================================================================================
AGGREGATOR ALGORITHM COMPARISON - STATION COMBINATIONS
================================================================================
Timestamp: 2025-06-15 13:05:21
Solver: gurobi
Time limit: 15 seconds
Verbosity level: 2
Algorithms to test: linear, rf, svm, cart, gbm, mlp
Output CSV: ../results/aggregator_37map_alg_comparison_20250615_130521.csv
Log file: ../logs/aggregator_37map_alg_comparison_20250615_130521.txt

Loading base data...
→ Loading aggregator data from: ../data/37-intersection map Aggregator Competition.xlsx
→ Loading map data from: ../data/37-intersection map.xlsx
→ Extracting price information...
→ Available stations: [11, 14, 15, 26, 37]
→ Base case prices: {11: np.float64(0.6), 14: np.float64(0.6), 15: np.float64(0.5), 26: np.float64(0.6), 37: np.float64(0.5)}
→ Price range: $0.200 - $0.800

Generating station combinations...
→ Testing 31 combinations:
     1. [11]
     2. [14]
     3. [15]
     4. [26]
     5. [37]
     6. [11, 14]
     7. [11, 15]
     8. [11, 26]
     9. [11, 37]
    10. [14, 15]
    11. [14, 26]
    12. [14, 37]
    13. [15, 26]
    14. [15, 37]
    15. [26, 37]
    16. [11, 14, 15]
    17. [11, 14, 26]
    18. [11, 14, 37]
    19. [11, 15, 26]
    20. [11, 15, 37]
    21. [11, 26, 37]
    22. [14, 15, 26]
    23. [14, 15, 37]
    24. [14, 26, 37]
    25. [15, 26, 37]
    26. [11, 14, 15, 26]
    27. [11, 14, 15, 37]
    28. [11, 14, 26, 37]
    29. [11, 15, 26, 37]
    30. [14, 15, 26, 37]
    31. [11, 14, 15, 26, 37]

Running base case scenario (once for all combinations)...
================================================================================
Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466128

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199929

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455732996

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 12.46
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $31.2505
Total Cost: $1.0441
Profit: $30.2064
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534995553), '15': np.float64(13.727748669593861), '26': np.float64(0.0), '37': np.float64(9.948502531171913)}
✓ Base case solved successfully

Starting experiments...
================================================================================

PROGRESS: Combination 1/31 - [11]
Remaining: 30 combinations


============================================================
EXPERIMENT: Controlled stations [11]
============================================================

Creating synthetic aggregator data for stations [11]...
Price bounds: $0.200 - $0.800
Controlled stations: [11]
Competitor stations: [14, 15, 26, 37]
Base case profit: $0.0000


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
ERROR: evaluating object as numeric value: x[rc_15]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_15]
ERROR: evaluating object as numeric value: x[rc_37]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_37]
Predicted aggregator profit: $4.36
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $4.36
Solution prices: 11:0.200, 14:0.600, 15:None, 26:0.600, 37:None

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: np.float64(0.5), 26: 0.6, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651465412

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.985420854769723

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546658

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 10.99
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603 + t16:1.780kWh*$0.200=$0.3561 + t17:6.600kWh*$0.200=$1.3200 + t18:6.600kWh*$0.200=$1.3200 + t19:4.578kWh*$0.200=$0.9156
  Station 14: t11:3.985kWh*$0.600=$2.3910
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:0.306kWh*$0.500=$0.1530 + t13:3.767kWh*$0.500=$1.8834 + t14:7.200kWh*$0.500=$3.6000 + t15:6.375kWh*$0.500=$3.1876 + t16:3.600kWh*$0.500=$1.8000 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:3.985kWh*$0.019=$0.0751 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:0.306kWh*$0.017=$0.0053
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:3.767kWh*$0.017=$0.0640
  t16: s11:1.780kWh*$0.013=$0.0234 + s37:3.600kWh*$0.013=$0.0474
  t17: s11:6.600kWh*$0.014=$0.0931 + s37:3.433kWh*$0.014=$0.0484
  t18: s11:6.600kWh*$0.012=$0.0769
  t19: s11:4.578kWh*$0.015=$0.0673
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:6.375kWh*$0.015=$0.0958

Profit breakdown by station:
  Station 11: $6.4979
  Station 14: $2.3158
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $11.9522

Total Revenue: $24.8218
Total Cost: $1.1133
Profit: $23.7084
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.497949433416599), '14': np.float64(2.3158083462495394), '15': np.float64(2.9424478455020164), '26': np.float64(0.0), '37': np.float64(11.952242059613722)}
Real profit: $6.4979

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $4.3626
 Real profit: $6.4979
 Improvement over base: $6.4979 (base profit is zero)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 31 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $5.96
Charging prices:
  Station 11 (AGGREGATOR): $0.351/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $5.96
Solution prices: 11:0.351, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3505000025033951, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466185

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999538

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.257190107128927

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 12.46
EV 3: Objective = 5.26

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3505000025033951), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.351=$1.8306 + t12:6.600kWh*$0.351=$2.3133 + t13:3.801kWh*$0.351=$1.3323
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:2.161kWh*$0.500=$1.0807 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $5.1985
  Station 14: $5.6067
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $13.9619

Total Revenue: $28.7109
Total Cost: $1.0013
Profit: $27.7096
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.19851878287), '14': np.float64(5.606709304995826), '15': np.float64(2.942447845502781), '26': np.float64(0.0), '37': np.float64(13.961877033872701)}
Real profit: $5.1985

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $5.9566
 Real profit: $5.1985
 Improvement over base: $5.1985 (base profit is zero)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $6.27
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $6.27
Solution prices: 11:0.200, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651465412

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.564711167893249

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546658

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 11.56
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603 + t17:5.544kWh*$0.200=$1.1089 + t18:6.600kWh*$0.200=$1.3200 + t19:6.600kWh*$0.200=$1.3200 + t20:0.814kWh*$0.200=$0.1628
  Station 14: t11:4.107kWh*$0.600=$2.4640 + t12:0.884kWh*$0.600=$0.5304
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:2.526kWh*$0.500=$1.2629 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:4.322kWh*$0.500=$2.1610 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.107kWh*$0.019=$0.0774 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:0.884kWh*$0.017=$0.0154 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.526kWh*$0.017=$0.0429
  t17: s11:5.544kWh*$0.014=$0.0782 + s37:3.433kWh*$0.014=$0.0484
  t18: s11:6.600kWh*$0.012=$0.0769
  t19: s11:6.600kWh*$0.015=$0.0971
  t20: s11:0.814kWh*$0.020=$0.0159
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:4.322kWh*$0.013=$0.0569

Profit breakdown by station:
  Station 11: $6.4906
  Station 14: $2.9016
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $11.9568

Total Revenue: $25.4252
Total Cost: $1.1338
Profit: $24.2914
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.490619840099297), '14': np.float64(2.901588373560388), '15': np.float64(2.9424478455020164), '26': np.float64(0.0), '37': np.float64(11.956751437423446)}
Real profit: $6.4906

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $6.2720
 Real profit: $6.4906
 Improvement over base: $6.4906 (base profit is zero)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $8.61
Charging prices:
  Station 11 (AGGREGATOR): $0.429/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $8.61
Solution prices: 11:0.429, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.42900000512599945, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.927616348133174

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999975

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.434620732662854

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.93
EV 2: Objective = 12.46
EV 3: Objective = 6.43

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.42900000512599945), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.429=$2.2406 + t12:6.600kWh*$0.429=$2.8314 + t13:3.801kWh*$0.429=$1.6307
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:5.252kWh*$0.500=$2.6260 + t17:5.205kWh*$0.500=$2.6027 + t18:1.030kWh*$0.500=$0.5152

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:3.600kWh*$0.017=$0.0612 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:5.252kWh*$0.013=$0.0691
  t17: s37:5.205kWh*$0.014=$0.0734
  t18: s37:1.030kWh*$0.012=$0.0120

Profit breakdown by station:
  Station 11: $6.4250
  Station 14: $5.6067
  Station 15: $6.9449
  Station 26: $0.0000
  Station 37: $10.0350

Total Revenue: $30.0248
Total Cost: $1.0132
Profit: $29.0116
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.425009017801167), '14': np.float64(5.606709304996261), '15': np.float64(6.944855604342201), '26': np.float64(0.0), '37': np.float64(10.0350356193087)}
Real profit: $6.4250

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $8.6102
 Real profit: $6.4250
 Improvement over base: $6.4250 (base profit is zero)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 61 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $8.08
Charging prices:
  Station 11 (AGGREGATOR): $0.260/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $8.08
Solution prices: 11:0.260, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2600010053574806, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.84367365146625

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.16748217500313

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.8997851738838833

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 9.17
EV 3: Objective = 3.90

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2600010053574806), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:8.948kWh*$0.260=$2.3264 + t12:13.200kWh*$0.260=$3.4320 + t13:10.401kWh*$0.260=$2.7043 + t14:3.381kWh*$0.260=$0.8790
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.600kWh*$0.500=$1.8000 + t15:5.502kWh*$0.500=$2.7510 + t16:7.200kWh*$0.500=$3.6000 + t17:6.471kWh*$0.500=$3.2355

Cost breakdown by time period:
  t11: s11:8.948kWh*$0.019=$0.1687 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:10.401kWh*$0.017=$0.1768 + s37:0.167kWh*$0.017=$0.0028
  t14: s11:3.381kWh*$0.018=$0.0598 + s37:3.600kWh*$0.018=$0.0637
  t15: s37:5.502kWh*$0.015=$0.0827
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:6.471kWh*$0.014=$0.0912

Profit breakdown by station:
  Station 11: $8.7072
  Station 14: $0.0000
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $11.1347

Total Revenue: $23.8656
Total Cost: $1.0812
Profit: $22.7844
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(8.707212054083902), '14': np.float64(0.0), '15': np.float64(2.9424478455028473), '26': np.float64(0.0), '37': np.float64(11.134727394116652)}
Real profit: $8.7072

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $8.0751
 Real profit: $8.7072
 Improvement over base: $8.7072 (base profit is zero)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 31 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $7.35
Charging prices:
  Station 11 (AGGREGATOR): $0.360/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $7.35
Solution prices: 11:0.360, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3601169304945935, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466384

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.008824121082107

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.216050345759983

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 11.01
EV 3: Objective = 9.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3601169304945935), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.360=$1.7549 + t12:6.600kWh*$0.360=$2.3768 + t13:6.600kWh*$0.360=$2.3768 + t14:1.914kWh*$0.360=$0.6891
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:0.771kWh*$0.600=$0.4628
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.500=$1.2103 + t13:3.767kWh*$0.500=$1.8834 + t14:7.200kWh*$0.500=$3.6000 + t15:9.902kWh*$0.500=$4.9512 + t16:8.379kWh*$0.500=$4.1897 + t17:5.671kWh*$0.500=$2.8354

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s14:0.771kWh*$0.019=$0.0145 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s11:6.600kWh*$0.017=$0.1122 + s37:3.767kWh*$0.017=$0.0640
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:7.200kWh*$0.018=$0.1274
  t10: s14:3.229kWh*$0.040=$0.1302
  t15: s37:9.902kWh*$0.015=$0.1488
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $6.8450
  Station 14: $2.2553
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $18.0975

Total Revenue: $31.3214
Total Cost: $1.1811
Profit: $30.1403
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.845027781966806), '14': np.float64(2.2553424702013602), '15': np.float64(2.942447845502983), '26': np.float64(0.0), '37': np.float64(18.097455415170003)}
Real profit: $6.8450

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $7.3530
 Real profit: $6.8450
 Improvement over base: $6.8450 (base profit is zero)
✓ Completed combination 1/31

PROGRESS: Combination 2/31 - [14]
Remaining: 29 combinations


============================================================
EXPERIMENT: Controlled stations [14]
============================================================

Creating synthetic aggregator data for stations [14]...
Price bounds: $0.200 - $0.800
Controlled stations: [14]
Competitor stations: [11, 15, 26, 37]
Base case profit: $6.5302


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $9.83
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.83
Solution prices: 11:0.600, 14:0.200, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.447202638986536

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.479729390183811

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.789569238293221

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.45
EV 2: Objective = 10.48
EV 3: Objective = 3.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t13:1.651kWh*$0.600=$0.9903
  Station 14: t10:11.871kWh*$0.200=$2.3742 + t11:17.319kWh*$0.200=$3.4637 + t12:8.171kWh*$0.200=$1.6341 + t13:6.600kWh*$0.200=$1.3200 + t14:2.172kWh*$0.200=$0.4344
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:1.061kWh*$0.500=$0.5306 + t15:6.279kWh*$0.500=$3.1394 + t16:4.473kWh*$0.500=$2.2366 + t17:3.600kWh*$0.500=$1.8000 + t18:2.539kWh*$0.500=$1.2694

Cost breakdown by time period:
  t13: s11:1.651kWh*$0.017=$0.0281 + s14:6.600kWh*$0.017=$0.1122 + s15:2.690kWh*$0.017=$0.0457
  t10: s14:11.871kWh*$0.040=$0.4786
  t11: s14:17.319kWh*$0.019=$0.3266
  t12: s14:8.171kWh*$0.017=$0.1419
  t14: s14:2.172kWh*$0.018=$0.0384 + s37:1.061kWh*$0.018=$0.0188
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:4.473kWh*$0.013=$0.0589
  t17: s37:3.600kWh*$0.014=$0.0508
  t18: s37:2.539kWh*$0.012=$0.0296

Profit breakdown by station:
  Station 11: $0.9623
  Station 14: $8.1288
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $8.7237

Total Revenue: $20.5380
Total Cost: $1.4238
Profit: $19.1142
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.9622506451176526), '14': np.float64(8.128775330244599), '15': np.float64(1.2994780035820253), '26': np.float64(0.0), '37': np.float64(8.723721022926883)}
Real profit: $8.1288

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $9.8347
 Real profit: $8.1288
 Improvement over base: $1.5986 (24.5%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 76 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $11.39
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.398/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $11.39
Solution prices: 11:0.600, 14:0.398, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.39750099343655165, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.142617680009433

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.601328727743761

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.256524006971421

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.14
EV 2: Objective = 9.60
EV 3: Objective = 6.26

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.39750099343655165), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.398=$2.3446 + t11:15.277kWh*$0.398=$6.0726 + t12:13.713kWh*$0.398=$5.4509 + t13:13.200kWh*$0.398=$5.2470 + t14:4.082kWh*$0.398=$1.6225
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $19.6770
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $26.0422
Total Cost: $1.2228
Profit: $24.8194
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(19.67702669161282), '15': np.float64(1.2994780035813178), '26': np.float64(0.0), '37': np.float64(3.8428521118357915)}
Real profit: $19.6770

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $11.3915
 Real profit: $19.6770
 Improvement over base: $13.1468 (201.3%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.32
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.32
Solution prices: 11:0.600, 14:0.200, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.447202638986536

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.479729390183811

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.789569238293221

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.45
EV 2: Objective = 10.48
EV 3: Objective = 3.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t13:1.651kWh*$0.600=$0.9903
  Station 14: t10:11.871kWh*$0.200=$2.3742 + t11:17.319kWh*$0.200=$3.4637 + t12:8.171kWh*$0.200=$1.6341 + t13:6.600kWh*$0.200=$1.3200 + t14:2.172kWh*$0.200=$0.4344
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:1.061kWh*$0.500=$0.5306 + t15:6.279kWh*$0.500=$3.1394 + t16:4.473kWh*$0.500=$2.2366 + t17:3.600kWh*$0.500=$1.8000 + t18:2.539kWh*$0.500=$1.2694

Cost breakdown by time period:
  t13: s11:1.651kWh*$0.017=$0.0281 + s14:6.600kWh*$0.017=$0.1122 + s15:2.690kWh*$0.017=$0.0457
  t10: s14:11.871kWh*$0.040=$0.4786
  t11: s14:17.319kWh*$0.019=$0.3266
  t12: s14:8.171kWh*$0.017=$0.1419
  t14: s14:2.172kWh*$0.018=$0.0384 + s37:1.061kWh*$0.018=$0.0188
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:4.473kWh*$0.013=$0.0589
  t17: s37:3.600kWh*$0.014=$0.0508
  t18: s37:2.539kWh*$0.012=$0.0296

Profit breakdown by station:
  Station 11: $0.9623
  Station 14: $8.1288
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $8.7237

Total Revenue: $20.5380
Total Cost: $1.4238
Profit: $19.1142
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.9622506451176526), '14': np.float64(8.128775330244599), '15': np.float64(1.2994780035820253), '26': np.float64(0.0), '37': np.float64(8.723721022926883)}
Real profit: $8.1288

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $12.3224
 Real profit: $8.1288
 Improvement over base: $1.5986 (24.5%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.16
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.440/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.16
Solution prices: 11:0.600, 14:0.440, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.43950000405311584, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466093

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.394332550832136

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.781127239175539

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 10.39
EV 3: Objective = 6.78

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.43950000405311584), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.440=$2.5923 + t11:11.158kWh*$0.440=$4.9041 + t12:7.113kWh*$0.440=$3.1262 + t13:6.600kWh*$0.440=$2.9007 + t14:1.910kWh*$0.440=$0.8394
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:6.290kWh*$0.500=$3.1452 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $13.6449
  Station 15: $8.2443
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $28.1449
Total Cost: $1.1669
Profit: $26.9780
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(13.644942703349464), '15': np.float64(8.24433360792325), '26': np.float64(0.0), '37': np.float64(5.0887332897136295)}
Real profit: $13.6449

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $14.1585
 Real profit: $13.6449
 Improvement over base: $7.1148 (109.0%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 61 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.34
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.457/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.34
Solution prices: 11:0.600, 14:0.457, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4565009937941795, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466421

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.715336537902942

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.993484007535646

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 10.72
EV 3: Objective = 6.99

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4565009937941795), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.457=$2.6926 + t11:11.158kWh*$0.457=$5.0938 + t12:7.113kWh*$0.457=$3.2471 + t13:6.600kWh*$0.457=$3.0129 + t14:1.910kWh*$0.457=$0.8718
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.021kWh*$0.500=$1.5107 + t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:3.414kWh*$0.500=$1.7068 + t15:7.200kWh*$0.500=$3.6000 + t16:4.245kWh*$0.500=$2.1223 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.021kWh*$0.017=$0.0525
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:1.910kWh*$0.018=$0.0338 + s37:3.414kWh*$0.018=$0.0604
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:4.245kWh*$0.013=$0.0559
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $14.2005
  Station 15: $4.4712
  Station 26: $0.0000
  Station 37: $8.8729

Total Revenue: $28.7005
Total Cost: $1.1559
Profit: $27.5446
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(14.20052682358982), '15': np.float64(4.47118196942645), '26': np.float64(0.0), '37': np.float64(8.87289078909654)}
Real profit: $14.2005

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $14.3356
 Real profit: $14.2005
 Improvement over base: $7.6703 (117.5%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 151 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.33
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.375/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.33
Solution prices: 11:0.600, 14:0.375, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.3748355338979832, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.718527255788356

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.173371121069854

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.973413210818042

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.72
EV 2: Objective = 9.17
EV 3: Objective = 5.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.3748355338979832), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.375=$2.2109 + t11:15.277kWh*$0.375=$5.7263 + t12:13.713kWh*$0.375=$5.1401 + t13:13.200kWh*$0.375=$4.9478 + t14:4.082kWh*$0.375=$1.5300
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.4946
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $24.8597
Total Cost: $1.2228
Profit: $23.6369
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.494569580103406), '15': np.float64(1.2994780035820035), '26': np.float64(0.0), '37': np.float64(3.8428521118357084)}
Real profit: $18.4946

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $16.3264
 Real profit: $18.4946
 Improvement over base: $11.9644 (183.2%)
✓ Completed combination 2/31

PROGRESS: Combination 3/31 - [15]
Remaining: 28 combinations


============================================================
EXPERIMENT: Controlled stations [15]
============================================================

Creating synthetic aggregator data for stations [15]...
Price bounds: $0.200 - $0.800
Controlled stations: [15]
Competitor stations: [11, 14, 26, 37]
Base case profit: $13.7277


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm linear (R² = 0.3398)
     outcome model_type  ...        task objective
0  profit_15     linear  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
ERROR: evaluating object as numeric value: x[rc_37]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_37]
Predicted aggregator profit: $5.44
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $5.44
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.600, 37:None

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.6, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.696473651466448

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.392898093864318

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.648329382293098

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 10.39
EV 3: Objective = 3.65

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t16:1.650kWh*$0.600=$0.9900
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:8.910kWh*$0.200=$1.7821 + t12:10.800kWh*$0.200=$2.1600 + t13:10.800kWh*$0.200=$2.1600 + t14:9.404kWh*$0.200=$1.8807 + t15:1.541kWh*$0.200=$0.3083
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:6.096kWh*$0.500=$3.0480 + t18:3.600kWh*$0.500=$1.8000 + t19:3.600kWh*$0.500=$1.8000 + t20:3.600kWh*$0.500=$1.8000 + t21:0.449kWh*$0.500=$0.2245

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665 + s15:1.396kWh*$0.040=$0.0563
  t16: s14:1.650kWh*$0.013=$0.0217 + s37:2.674kWh*$0.013=$0.0352
  t11: s15:8.910kWh*$0.019=$0.1680
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:9.404kWh*$0.018=$0.1664
  t15: s15:1.541kWh*$0.015=$0.0232
  t17: s37:6.096kWh*$0.014=$0.0860
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.449kWh*$0.062=$0.0279

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $1.8918
  Station 15: $7.7854
  Station 26: $0.0000
  Station 37: $9.6954

Total Revenue: $20.5601
Total Cost: $1.1876
Profit: $19.3725
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(1.8917626200023665), '15': np.float64(7.785351181297673), '26': np.float64(0.0), '37': np.float64(9.695381654680661)}
Real profit: $7.7854

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $5.4372
 Real profit: $7.7854
 Improvement over base: $-5.9424 (-43.3%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm rf (R² = 0.5705)
     outcome model_type  ...        task objective
0  profit_15         rf  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 76 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $7.40
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.337/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $7.40
Solution prices: 11:0.600, 14:0.600, 15:0.337, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.33650000393390656, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.5834497058490475

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999869

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.4896662387751425

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.58
EV 2: Objective = 12.46
EV 3: Objective = 5.49

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.33650000393390656), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.337=$1.7869 + t12:7.200kWh*$0.337=$2.4228 + t13:7.200kWh*$0.337=$2.4228 + t14:7.200kWh*$0.337=$2.4228 + t15:1.541kWh*$0.337=$0.5187
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $9.0759
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $26.5987
Total Cost: $1.0441
Profit: $25.5546
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.53019153499614), '15': np.float64(9.075893291911012), '26': np.float64(0.0), '37': np.float64(9.948502531172526)}
Real profit: $9.0759

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $7.4001
 Real profit: $9.0759
 Improvement over base: $-4.6519 (-33.9%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm svm (R² = 0.5406)
     outcome model_type  ...        task objective
0  profit_15        svm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $7.90
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $7.90
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.696473651466448

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.392898093864318

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.648329382293098

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 10.39
EV 3: Objective = 3.65

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t16:1.650kWh*$0.600=$0.9900
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:8.910kWh*$0.200=$1.7821 + t12:10.800kWh*$0.200=$2.1600 + t13:10.800kWh*$0.200=$2.1600 + t14:9.404kWh*$0.200=$1.8807 + t15:1.541kWh*$0.200=$0.3083
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:6.096kWh*$0.500=$3.0480 + t18:3.600kWh*$0.500=$1.8000 + t19:3.600kWh*$0.500=$1.8000 + t20:3.600kWh*$0.500=$1.8000 + t21:0.449kWh*$0.500=$0.2245

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665 + s15:1.396kWh*$0.040=$0.0563
  t16: s14:1.650kWh*$0.013=$0.0217 + s37:2.674kWh*$0.013=$0.0352
  t11: s15:8.910kWh*$0.019=$0.1680
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:9.404kWh*$0.018=$0.1664
  t15: s15:1.541kWh*$0.015=$0.0232
  t17: s37:6.096kWh*$0.014=$0.0860
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.449kWh*$0.062=$0.0279

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $1.8918
  Station 15: $7.7854
  Station 26: $0.0000
  Station 37: $9.6954

Total Revenue: $20.5601
Total Cost: $1.1876
Profit: $19.3725
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(1.8917626200023665), '15': np.float64(7.785351181297673), '26': np.float64(0.0), '37': np.float64(9.695381654680661)}
Real profit: $7.7854

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $7.8969
 Real profit: $7.7854
 Improvement over base: $-5.9424 (-43.3%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm cart (R² = 0.5669)
     outcome model_type  ...        task objective
0  profit_15       cart  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $10.06
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.560/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $10.06
Solution prices: 11:0.600, 14:0.600, 15:0.560, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5604999959468842, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.19840613952895

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999986

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.861146991519933

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.20
EV 2: Objective = 12.46
EV 3: Objective = 8.86

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5604999959468842), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:3.384kWh*$0.600=$2.0304
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.560=$1.9960 + t12:2.546kWh*$0.560=$1.4273
  Station 37: t12:2.655kWh*$0.500=$1.3275 + t13:5.761kWh*$0.500=$2.8807 + t14:10.800kWh*$0.500=$5.4000 + t15:10.800kWh*$0.500=$5.4000 + t16:8.145kWh*$0.500=$4.0725 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t9: s11:3.384kWh*$0.075=$0.2552
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.655kWh*$0.017=$0.0461
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.145kWh*$0.013=$0.1072
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $1.7752
  Station 14: $5.6067
  Station 15: $3.3120
  Station 26: $0.0000
  Station 37: $20.9244

Total Revenue: $32.8345
Total Cost: $1.2163
Profit: $31.6182
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.775205926141274), '14': np.float64(5.606709304996276), '15': np.float64(3.311960853901486), '26': np.float64(0.0), '37': np.float64(20.92435835043875)}
Real profit: $3.3120

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $10.0629
 Real profit: $3.3120
 Improvement over base: $-10.4158 (-75.9%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm gbm (R² = 0.6104)
     outcome model_type  ...        task objective
0  profit_15        gbm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 61 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $11.37
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.502/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $11.37
Solution prices: 11:0.600, 14:0.600, 15:0.502, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5020000040531158, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.85540036983736

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 26.602153096694273

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.216050345759982

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.86
EV 2: Objective = 26.60
EV 3: Objective = 9.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5020000040531158), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:0.771kWh*$0.600=$0.4628
  Station 15: t10:0.276kWh*$0.502=$0.1388 + t11:7.161kWh*$0.502=$3.5949 + t12:6.146kWh*$0.502=$3.0855 + t13:3.600kWh*$0.502=$1.8072 + t14:0.853kWh*$0.502=$0.4282
  Station 37: t12:2.421kWh*$0.500=$1.2103 + t13:3.767kWh*$0.500=$1.8834 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:6.470kWh*$0.500=$3.2349 + t17:7.033kWh*$0.500=$3.5166 + t18:3.600kWh*$0.500=$1.8000 + t19:3.600kWh*$0.500=$1.8000 + t20:1.910kWh*$0.500=$0.9549

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302 + s15:0.276kWh*$0.040=$0.0111
  t11: s14:0.771kWh*$0.019=$0.0145 + s15:7.161kWh*$0.019=$0.1350
  t12: s15:6.146kWh*$0.017=$0.1067 + s37:2.421kWh*$0.017=$0.0420
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:3.767kWh*$0.017=$0.0640
  t14: s15:0.853kWh*$0.018=$0.0151 + s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:6.470kWh*$0.013=$0.0852
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:1.910kWh*$0.020=$0.0373

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.2553
  Station 15: $8.7254
  Station 26: $0.0000
  Station 37: $20.9418

Total Revenue: $33.0546
Total Cost: $1.1321
Profit: $31.9225
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.2553424702012306), '15': np.float64(8.72535684656032), '26': np.float64(0.0), '37': np.float64(20.94179647698473)}
Real profit: $8.7254

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $11.3679
 Real profit: $8.7254
 Improvement over base: $-5.0024 (-36.4%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 151 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $9.92
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.396/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.92
Solution prices: 11:0.600, 14:0.600, 15:0.396, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.39641151163728505, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.495609085007116

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199764

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.297851323627245

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.50
EV 2: Objective = 12.46
EV 3: Objective = 6.30

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.39641151163728505), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.396=$2.1051 + t12:7.200kWh*$0.396=$2.8542 + t13:7.200kWh*$0.396=$2.8542 + t14:7.200kWh*$0.396=$2.8542 + t15:1.541kWh*$0.396=$0.6110
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:5.252kWh*$0.500=$2.6260 + t17:5.205kWh*$0.500=$2.6027 + t18:1.030kWh*$0.500=$0.5152

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:5.252kWh*$0.013=$0.0691
  t17: s37:5.205kWh*$0.014=$0.0734
  t18: s37:1.030kWh*$0.012=$0.0120

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $10.7805
  Station 26: $0.0000
  Station 37: $10.0350

Total Revenue: $28.3907
Total Cost: $1.0450
Profit: $27.3457
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534993892), '15': np.float64(10.780478466227262), '26': np.float64(0.0), '37': np.float64(10.035035619308863)}
Real profit: $10.7805

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $9.9184
 Real profit: $10.7805
 Improvement over base: $-2.9473 (-21.5%)
✓ Completed combination 3/31

PROGRESS: Combination 4/31 - [26]
Remaining: 27 combinations


============================================================
EXPERIMENT: Controlled stations [26]
============================================================

Creating synthetic aggregator data for stations [26]...
Price bounds: $0.200 - $0.800
Controlled stations: [26]
Competitor stations: [11, 14, 15, 37]
Base case profit: $0.0000


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_26     linear  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $9.77
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.77
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.198814348533518

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 7.845867276426583

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066766

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.20
EV 2: Objective = 7.85
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:2.040kWh*$0.500=$1.0201 + t12:3.600kWh*$0.500=$1.8000 + t13:0.383kWh*$0.500=$0.1917
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:6.229kWh*$0.200=$1.2459 + t15:12.302kWh*$0.200=$2.4604 + t16:13.200kWh*$0.200=$2.6400 + t17:5.324kWh*$0.200=$1.0648

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:2.040kWh*$0.019=$0.0385 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:0.383kWh*$0.017=$0.0065 + s26:6.600kWh*$0.017=$0.1122
  t14: s26:6.229kWh*$0.018=$0.1102
  t15: s26:12.302kWh*$0.015=$0.1848
  t16: s26:13.200kWh*$0.013=$0.1738
  t17: s26:5.324kWh*$0.014=$0.0751

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $2.9043
  Station 26: $9.5245
  Station 37: $0.0000

Total Revenue: $18.0598
Total Cost: $1.0472
Profit: $17.0126
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740204), '15': np.float64(2.9042547843388142), '26': np.float64(9.5245368091263), '37': np.float64(0.0)}
Real profit: $9.5245

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $9.7664
 Real profit: $9.5245
 Improvement over base: $9.5245 (base profit is zero)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_26         rf  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 76 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.39
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.432/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.39
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.432, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.4324999898672104, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.10576236117643

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.690861032404039

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.120576799796804

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.11
EV 2: Objective = 11.69
EV 3: Objective = 7.12

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4324999898672104), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.432=$0.5829 + t12:6.600kWh*$0.432=$2.8545 + t13:6.600kWh*$0.432=$2.8545 + t14:11.703kWh*$0.432=$5.0615 + t15:13.200kWh*$0.432=$5.7090 + t16:11.753kWh*$0.432=$5.0833 + t17:0.399kWh*$0.432=$0.1727

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $21.5004
  Station 37: $0.0000

Total Revenue: $29.0804
Total Cost: $1.0375
Profit: $28.0429
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043739767), '15': np.float64(1.9586532510804875), '26': np.float64(21.500409434808116), '37': np.float64(0.0)}
Real profit: $21.5004

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $12.3902
 Real profit: $21.5004
 Improvement over base: $21.5004 (base profit is zero)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_26        svm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.90
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.90
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.9633849509330865

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 7.845867276426583

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066766

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.96
EV 2: Objective = 7.85
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:2.985kWh*$0.500=$1.4927 + t12:2.548kWh*$0.500=$1.2738
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:7.964kWh*$0.200=$1.5928 + t15:13.200kWh*$0.200=$2.6400 + t16:13.200kWh*$0.200=$2.6400 + t17:2.692kWh*$0.200=$0.5383

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:2.985kWh*$0.019=$0.0563 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:2.548kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:7.964kWh*$0.018=$0.1409
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:13.200kWh*$0.013=$0.1738
  t17: s26:2.692kWh*$0.014=$0.0380

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $2.6660
  Station 26: $9.5175
  Station 37: $0.0000

Total Revenue: $17.8146
Total Cost: $1.0473
Profit: $16.7673
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740204), '15': np.float64(2.6659826775040436), '26': np.float64(9.51747728949446), '37': np.float64(0.0)}
Real profit: $9.5175

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $12.8959
 Real profit: $9.5175
 Improvement over base: $9.5175 (base profit is zero)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_26       cart  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.52
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.490/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.52
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.490, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.4895000010728836, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466647

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.860941082529333

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.810394259066657

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 13.86
EV 3: Objective = 7.81

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4895000010728836), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.037kWh*$0.600=$2.4224
  Station 14: t10:1.650kWh*$0.600=$0.9900
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:5.303kWh*$0.500=$2.6516 + t14:3.600kWh*$0.500=$1.8000 + t15:1.742kWh*$0.500=$0.8712
  Station 26: t12:4.975kWh*$0.490=$2.4351 + t13:6.600kWh*$0.490=$3.2307 + t14:6.600kWh*$0.490=$3.2307 + t15:3.596kWh*$0.490=$1.7603
  Station 37: t14:1.010kWh*$0.500=$0.5050 + t15:3.600kWh*$0.500=$1.8000 + t16:6.319kWh*$0.500=$3.1593 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t11: s11:4.037kWh*$0.019=$0.0761 + s15:5.310kWh*$0.019=$0.1001
  t10: s14:1.650kWh*$0.040=$0.0665
  t12: s15:7.200kWh*$0.017=$0.1250 + s26:4.975kWh*$0.017=$0.0864
  t13: s15:5.303kWh*$0.017=$0.0901 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:6.600kWh*$0.018=$0.1168 + s37:1.010kWh*$0.018=$0.0179
  t15: s15:1.742kWh*$0.015=$0.0262 + s26:3.596kWh*$0.015=$0.0540 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.319kWh*$0.013=$0.0832
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $2.3463
  Station 14: $0.9235
  Station 15: $11.1728
  Station 26: $10.2874
  Station 37: $6.9774

Total Revenue: $32.8281
Total Cost: $1.1208
Profit: $31.7074
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.3462701116468914), '14': np.float64(0.9234822299999998), '15': np.float64(11.17279525398153), '26': np.float64(10.287444408578006), '37': np.float64(6.977377601844568)}
Real profit: $10.2874

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $19.5200
 Real profit: $10.2874
 Improvement over base: $10.2874 (base profit is zero)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_26        gbm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 61 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.73
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.73
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.443, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.442500995224691, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.271155070119349

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.856253741346013

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.285230969488127

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.27
EV 2: Objective = 11.86
EV 3: Objective = 7.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.442500995224691), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.443=$0.5963 + t12:6.600kWh*$0.443=$2.9205 + t13:6.600kWh*$0.443=$2.9205 + t14:11.703kWh*$0.443=$5.1785 + t15:13.200kWh*$0.443=$5.8410 + t16:11.753kWh*$0.443=$5.2009 + t17:0.399kWh*$0.443=$0.1767

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $22.0165
  Station 37: $0.0000

Total Revenue: $29.5965
Total Cost: $1.0375
Profit: $28.5590
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740226), '15': np.float64(1.95865325108188), '26': np.float64(22.016492338531354), '37': np.float64(0.0)}
Real profit: $22.0165

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $17.7280
 Real profit: $22.0165
 Improvement over base: $22.0165 (base profit is zero)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_26        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 301 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.90
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.90
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.411, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.41114031857199157, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.752524484449143

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.41675494802118

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.828484602557025

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.75
EV 2: Objective = 12.42
EV 3: Objective = 7.83

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.41114031857199157), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:2.723kWh*$0.600=$1.6340
  Station 14: t9:1.650kWh*$0.600=$0.9900 + t10:1.787kWh*$0.600=$1.0721
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t12:9.998kWh*$0.411=$4.1104 + t13:13.200kWh*$0.411=$5.4271 + t14:17.694kWh*$0.411=$7.2748 + t15:10.179kWh*$0.411=$4.1850 + t16:5.153kWh*$0.411=$2.1188
  Station 37: t16:2.719kWh*$0.500=$1.3593

Cost breakdown by time period:
  t11: s11:2.723kWh*$0.019=$0.0514 + s15:3.561kWh*$0.019=$0.0672
  t9: s14:1.650kWh*$0.075=$0.1244
  t10: s14:1.787kWh*$0.040=$0.0720
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:9.998kWh*$0.017=$0.1736
  t13: s26:13.200kWh*$0.017=$0.2244
  t14: s26:17.694kWh*$0.018=$0.3131
  t15: s26:10.179kWh*$0.015=$0.1529
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $1.5826
  Station 14: $1.8656
  Station 15: $1.9587
  Station 26: $22.1842
  Station 37: $1.3235

Total Revenue: $30.2060
Total Cost: $1.2914
Profit: $28.9146
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.5826441852192707), '14': np.float64(1.8656439799656968), '15': np.float64(1.9586532510806869), '26': np.float64(22.184210346220564), '37': np.float64(1.3234679051917433)}
Real profit: $22.1842

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $17.9016
 Real profit: $22.1842
 Improvement over base: $22.1842 (base profit is zero)
✓ Completed combination 4/31

PROGRESS: Combination 5/31 - [37]
Remaining: 26 combinations


============================================================
EXPERIMENT: Controlled stations [37]
============================================================

Creating synthetic aggregator data for stations [37]...
Price bounds: $0.200 - $0.800
Controlled stations: [37]
Competitor stations: [11, 14, 15, 26]
Base case profit: $9.9485


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_37     linear  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
ERROR: evaluating object as numeric value: x[rc_11]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_11]
ERROR: evaluating object as numeric value: x[rc_15]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_15]
Predicted aggregator profit: $7.76
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $7.76
Solution prices: 11:None, 14:0.600, 15:None, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.6, 15: np.float64(0.5), 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.696473651466521

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.314395011997984

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.0688503457594996

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 8.31
EV 3: Objective = 5.07

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.200=$0.4841 + t13:5.761kWh*$0.200=$1.1523 + t14:10.800kWh*$0.200=$2.1600 + t15:10.800kWh*$0.200=$2.1600 + t16:8.379kWh*$0.200=$1.6759 + t17:5.039kWh*$0.200=$1.0077

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $7.9653

Total Revenue: $19.8747
Total Cost: $1.1049
Profit: $18.7698
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775195224), '15': np.float64(2.9424478455031204), '26': np.float64(0.0), '37': np.float64(7.96534375638842)}
Real profit: $7.9653

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $7.7641
 Real profit: $7.9653
 Improvement over base: $-1.9832 (-19.9%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_37         rf  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 76 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $9.13
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.13
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4410009996354347}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.028071470426493

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.64599283096024

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.400448164720142

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.03
EV 2: Objective = 11.65
EV 3: Objective = 8.40

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4410009996354347)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.441=$1.0675 + t13:5.761kWh*$0.441=$2.5408 + t14:10.800kWh*$0.441=$4.7628 + t15:10.800kWh*$0.441=$4.7628 + t16:8.379kWh*$0.441=$3.6954 + t17:5.039kWh*$0.441=$2.2220

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $18.3766

Total Revenue: $30.2860
Total Cost: $1.1049
Profit: $29.1811
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775197586), '15': np.float64(2.942447845502844), '26': np.float64(0.0), '37': np.float64(18.376586940639058)}
Real profit: $18.3766

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $9.1306
 Real profit: $18.3766
 Improvement over base: $8.4281 (84.7%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_37        svm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 1 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $10.56
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $10.56
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.696473651466521

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.314395011997984

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.0688503457594996

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 8.31
EV 3: Objective = 5.07

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.200=$0.4841 + t13:5.761kWh*$0.200=$1.1523 + t14:10.800kWh*$0.200=$2.1600 + t15:10.800kWh*$0.200=$2.1600 + t16:8.379kWh*$0.200=$1.6759 + t17:5.039kWh*$0.200=$1.0077

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $7.9653

Total Revenue: $19.8747
Total Cost: $1.1049
Profit: $18.7698
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775195224), '15': np.float64(2.9424478455031204), '26': np.float64(0.0), '37': np.float64(7.96534375638842)}
Real profit: $7.9653

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $10.5615
 Real profit: $7.9653
 Improvement over base: $-1.9832 (-19.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_37       cart  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $10.79
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.427/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $10.79
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.427

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4270000010728836}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.834521666298077

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.452443026830753

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.077233698351534

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.83
EV 2: Objective = 11.45
EV 3: Objective = 8.08

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4270000010728836)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.775kWh*$0.600=$2.2650 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:3.162kWh*$0.427=$1.3502 + t13:5.761kWh*$0.427=$2.4601 + t14:10.800kWh*$0.427=$4.6116 + t15:10.800kWh*$0.427=$4.6116 + t16:7.638kWh*$0.427=$3.2614 + t17:5.039kWh*$0.427=$2.1515

Cost breakdown by time period:
  t10: s14:3.775kWh*$0.040=$0.1522
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:3.162kWh*$0.017=$0.0549
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:7.638kWh*$0.013=$0.1005
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.7195
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $17.7686

Total Revenue: $29.5460
Total Cost: $1.1155
Profit: $28.4306
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.719510798994985), '15': np.float64(2.942447845503134), '26': np.float64(0.0), '37': np.float64(17.768627301318624)}
Real profit: $17.7686

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $10.7897
 Real profit: $17.7686
 Improvement over base: $7.8201 (78.6%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_37        gbm  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 61 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $10.72
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $10.72
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.44050100607273635}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.021159559415215

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.639080919949377

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455733325

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.02
EV 2: Objective = 11.64
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.44050100607273635)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:6.146kWh*$0.500=$3.0732 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:1.503kWh*$0.500=$0.7513
  Station 37: t13:2.161kWh*$0.441=$0.9521 + t14:7.200kWh*$0.441=$3.1716 + t15:7.200kWh*$0.441=$3.1716 + t16:7.200kWh*$0.441=$3.1716 + t17:5.039kWh*$0.441=$2.2195

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:2.161kWh*$0.017=$0.0367
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $9.7253
  Station 26: $0.0000
  Station 37: $12.2483

Total Revenue: $29.5369
Total Cost: $1.0331
Profit: $28.5038
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.53019153499597), '15': np.float64(9.72534091075472), '26': np.float64(0.0), '37': np.float64(12.248306008767392)}
Real profit: $12.2483

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $10.7168
 Real profit: $12.2483
 Improvement over base: $2.2998 (23.1%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_37        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 301 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.22
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.22
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.460

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.46014156141328855}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.292670596443639

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.910591956977287

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.665047290736725

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.29
EV 2: Objective = 11.91
EV 3: Objective = 8.67

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.46014156141328855)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.460=$1.1138 + t13:5.761kWh*$0.460=$2.6511 + t14:10.800kWh*$0.460=$4.9695 + t15:10.800kWh*$0.460=$4.9695 + t16:8.379kWh*$0.460=$3.8557 + t17:5.039kWh*$0.460=$2.3185

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $19.2035

Total Revenue: $31.1128
Total Cost: $1.1049
Profit: $30.0080
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775197101), '15': np.float64(2.942447845502939), '26': np.float64(0.0), '37': np.float64(19.20345920944271)}
Real profit: $19.2035

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $13.2167
 Real profit: $19.2035
 Improvement over base: $9.2550 (93.0%)
✓ Completed combination 5/31

PROGRESS: Combination 6/31 - [11, 14]
Remaining: 25 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14]
============================================================

Creating synthetic aggregator data for stations [11, 14]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14]
Competitor stations: [15, 26, 37]
Base case profit: $6.5302


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.16
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.16
Solution prices: 11:0.200, 14:0.200, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.447202638986491

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.8722160519995965

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546578

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.45
EV 2: Objective = 5.87
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603
  Station 14: t11:8.677kWh*$0.200=$1.7354 + t12:13.200kWh*$0.200=$2.6400 + t13:13.200kWh*$0.200=$2.6400 + t14:4.082kWh*$0.200=$0.8164
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:8.677kWh*$0.019=$0.1636
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:13.200kWh*$0.017=$0.2292
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:13.200kWh*$0.017=$0.2244
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $2.8471
  Station 14: $7.1423
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $14.9159
Total Cost: $1.0836
Profit: $13.8322
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.847094868721721), '14': np.float64(7.1422903553070975), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(3.842852111835565)}
Real profit: $9.9894

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $12.1585
 Real profit: $9.9894
 Improvement over base: $3.4592 (53.0%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 107 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $15.20
Charging prices:
  Station 11 (AGGREGATOR): $0.311/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.365/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $15.20
Solution prices: 11:0.311, 14:0.365, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.31050099593994673, 14: 0.3645010010659462, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.52515917492517

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.978239761418017

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.65724037788957

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.53
EV 2: Objective = 8.98
EV 3: Objective = 4.66

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.31050099593994673), '14': np.float64(0.3645010010659462), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.311=$1.6217 + t12:6.600kWh*$0.311=$2.0493 + t13:3.801kWh*$0.311=$1.1803
  Station 14: t11:8.677kWh*$0.365=$3.1628 + t12:13.200kWh*$0.365=$4.8114 + t13:13.200kWh*$0.365=$4.8114 + t14:4.082kWh*$0.365=$1.4878
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:8.677kWh*$0.019=$0.1636
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:13.200kWh*$0.017=$0.2292
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:13.200kWh*$0.017=$0.2244
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $4.5736
  Station 14: $13.5839
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $23.0840
Total Cost: $1.0836
Profit: $22.0004
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.573571148245649), '14': np.float64(13.583936444220633), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(3.842852111835628)}
Real profit: $18.1575

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $15.1981
 Real profit: $18.1575
 Improvement over base: $11.6273 (178.1%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.77
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.77
Solution prices: 11:0.200, 14:0.200, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.447202638986491

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.8722160519995965

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546578

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.45
EV 2: Objective = 5.87
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603
  Station 14: t11:8.677kWh*$0.200=$1.7354 + t12:13.200kWh*$0.200=$2.6400 + t13:13.200kWh*$0.200=$2.6400 + t14:4.082kWh*$0.200=$0.8164
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:8.677kWh*$0.019=$0.1636
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:13.200kWh*$0.017=$0.2292
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:13.200kWh*$0.017=$0.2244
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $2.8471
  Station 14: $7.1423
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $14.9159
Total Cost: $1.0836
Profit: $13.8322
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.847094868721721), '14': np.float64(7.1422903553070975), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(3.842852111835565)}
Real profit: $9.9894

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $13.7705
 Real profit: $9.9894
 Improvement over base: $3.4592 (53.0%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.98
Charging prices:
  Station 11 (AGGREGATOR): $0.369/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.327/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.98
Solution prices: 11:0.369, 14:0.327, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3685009942710167, 14: 0.32700100702641066, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.907444428757132

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.270184066710137

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.311385161979538

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.91
EV 2: Objective = 8.27
EV 3: Objective = 5.31

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3685009942710167), '14': np.float64(0.32700100702641066), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t13:3.468kWh*$0.369=$1.2780
  Station 14: t10:5.898kWh*$0.327=$1.9287 + t11:15.277kWh*$0.327=$4.9956 + t12:13.713kWh*$0.327=$4.4842 + t13:13.200kWh*$0.327=$4.3164 + t14:4.082kWh*$0.327=$1.3347
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:5.257kWh*$0.500=$2.6283 + t16:2.715kWh*$0.500=$1.3576

Cost breakdown by time period:
  t13: s11:3.468kWh*$0.017=$0.0589 + s14:13.200kWh*$0.017=$0.2244
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:5.257kWh*$0.015=$0.0790
  t16: s37:2.715kWh*$0.013=$0.0357

Profit breakdown by station:
  Station 11: $1.2190
  Station 14: $15.9990
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $3.9299

Total Revenue: $22.3844
Total Cost: $1.2364
Profit: $21.1480
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.2190368175333288), '14': np.float64(15.999042128798324), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(3.9298921609003417)}
Real profit: $17.2181

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $19.9794
 Real profit: $17.2181
 Improvement over base: $10.6879 (163.7%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.86
Charging prices:
  Station 11 (AGGREGATOR): $0.363/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.457/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.86
Solution prices: 11:0.363, 14:0.457, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3630010054766899, 14: 0.4565009937941795, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.8436736514665

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.715336537902012

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.44469409768809

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 10.72
EV 3: Objective = 5.44

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3630010054766899), '14': np.float64(0.4565009937941795), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.363=$1.8959 + t12:6.600kWh*$0.363=$2.3958 + t13:3.801kWh*$0.363=$1.3799
  Station 14: t11:4.558kWh*$0.457=$2.0809 + t12:6.600kWh*$0.457=$3.0129 + t13:6.600kWh*$0.457=$3.0129 + t14:1.910kWh*$0.457=$0.8718
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:6.600kWh*$0.017=$0.1146 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:6.600kWh*$0.017=$0.1122 + s15:3.600kWh*$0.017=$0.0612
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $5.3938
  Station 14: $8.6320
  Station 15: $6.9449
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $27.0872
Total Cost: $1.0278
Profit: $26.0594
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.39383543970246), '14': np.float64(8.632006858328118), '15': np.float64(6.944855604341817), '26': np.float64(0.0), '37': np.float64(5.088733289713914)}
Real profit: $14.0258

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $19.8629
 Real profit: $14.0258
 Improvement over base: $7.4957 (114.8%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 182 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.66
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.382/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.66
Solution prices: 11:0.800, 14:0.382, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.3818313029459418, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.959439334888382

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.305461651751637

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.060796294381256

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.96
EV 2: Objective = 9.31
EV 3: Objective = 6.06

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.3818313029459418), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.382=$2.2521 + t11:14.850kWh*$0.382=$5.6701 + t12:13.713kWh*$0.382=$5.2361 + t13:13.200kWh*$0.382=$5.0402 + t14:4.809kWh*$0.382=$1.8362
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:5.882kWh*$0.500=$2.9411 + t16:1.915kWh*$0.500=$0.9573

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:14.850kWh*$0.019=$0.2800
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.809kWh*$0.018=$0.0851 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:5.882kWh*$0.015=$0.0884
  t16: s37:1.915kWh*$0.013=$0.0252

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.9693
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8436

Total Revenue: $25.3393
Total Cost: $1.2269
Profit: $24.1124
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.969325104474713), '15': np.float64(1.2994780035813702), '26': np.float64(0.0), '37': np.float64(3.8435900372162464)}
Real profit: $18.9693

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $18.6585
 Real profit: $18.9693
 Improvement over base: $12.4391 (190.5%)
✓ Completed combination 6/31

PROGRESS: Combination 7/31 - [11, 15]
Remaining: 24 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15]
============================================================

Creating synthetic aggregator data for stations [11, 15]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15]
Competitor stations: [14, 26, 37]
Base case profit: $13.7277


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 15: Using specified algorithm linear (R² = 0.3398)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
ERROR: evaluating object as numeric value: x[rc_37]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_37]
Predicted aggregator profit: $9.60
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.60
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.600, 37:None

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.6, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.6964736514665475

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.366759868053183

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546507

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 9.37
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.200=$2.1675 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:0.278kWh*$0.200=$0.0556
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t16:6.079kWh*$0.500=$3.0393 + t17:7.033kWh*$0.500=$3.5166 + t18:3.600kWh*$0.500=$1.8000 + t19:1.273kWh*$0.500=$0.6365

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:0.278kWh*$0.018=$0.0049 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006
  t16: s37:6.079kWh*$0.013=$0.0800
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:1.273kWh*$0.015=$0.0187

Profit breakdown by station:
  Station 11: $6.3280
  Station 14: $0.0000
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $8.7525

Total Revenue: $18.8157
Total Cost: $1.1103
Profit: $17.7053
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.327979031462729), '14': np.float64(0.0), '15': np.float64(2.6248556043417723), '26': np.float64(0.0), '37': np.float64(8.752504784197251)}
Real profit: $8.9528

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $9.6007
 Real profit: $8.9528
 Improvement over base: $-4.7749 (-34.8%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 15: Using specified algorithm rf (R² = 0.5705)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 107 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.13
Charging prices:
  Station 11 (AGGREGATOR): $0.405/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.472/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.13
Solution prices: 11:0.405, 14:0.600, 15:0.472, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4045010076224571, 14: 0.6, 15: 0.47200098795292433, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.456615308928594

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.891124973444974

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.067157433403198

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.46
EV 2: Objective = 11.89
EV 3: Objective = 6.07

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4045010076224571), '14': np.float64(0.6), '15': np.float64(0.47200098795292433), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:9.291kWh*$0.405=$3.7580 + t12:13.200kWh*$0.405=$5.3394 + t13:10.401kWh*$0.405=$4.2073 + t14:2.798kWh*$0.405=$1.1318
  Station 15: t11:3.561kWh*$0.472=$1.6809 + t12:3.600kWh*$0.472=$1.6992 + t13:3.600kWh*$0.472=$1.6992 + t14:3.600kWh*$0.472=$1.6992 + t15:0.039kWh*$0.472=$0.0183
  Station 37: t15:2.220kWh*$0.500=$1.1100 + t16:6.274kWh*$0.500=$3.1372 + t17:6.153kWh*$0.500=$3.0766

Cost breakdown by time period:
  t11: s11:9.291kWh*$0.019=$0.1752 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:2.798kWh*$0.018=$0.0495 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:2.220kWh*$0.015=$0.0334
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:6.153kWh*$0.014=$0.0868

Profit breakdown by station:
  Station 11: $13.8059
  Station 14: $0.0000
  Station 15: $6.5417
  Station 26: $0.0000
  Station 37: $7.1211

Total Revenue: $28.5572
Total Cost: $1.0886
Profit: $27.4686
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(13.805865468624562), '14': np.float64(0.0), '15': np.float64(6.541669830863977), '26': np.float64(0.0), '37': np.float64(7.121059477181025)}
Real profit: $20.3475

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $12.1287
 Real profit: $20.3475
 Improvement over base: $6.6198 (48.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 15: Using specified algorithm svm (R² = 0.5406)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.21
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.21
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.6964736514665475

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.366759868053183

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546507

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 9.37
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.200=$2.1675 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:0.278kWh*$0.200=$0.0556
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t16:6.079kWh*$0.500=$3.0393 + t17:7.033kWh*$0.500=$3.5166 + t18:3.600kWh*$0.500=$1.8000 + t19:1.273kWh*$0.500=$0.6365

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:0.278kWh*$0.018=$0.0049 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006
  t16: s37:6.079kWh*$0.013=$0.0800
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:1.273kWh*$0.015=$0.0187

Profit breakdown by station:
  Station 11: $6.3280
  Station 14: $0.0000
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $8.7525

Total Revenue: $18.8157
Total Cost: $1.1103
Profit: $17.7053
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.327979031462729), '14': np.float64(0.0), '15': np.float64(2.6248556043417723), '26': np.float64(0.0), '37': np.float64(8.752504784197251)}
Real profit: $8.9528

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $12.2141
 Real profit: $8.9528
 Improvement over base: $-4.7749 (-34.8%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 15: Using specified algorithm cart (R² = 0.5669)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.93
Charging prices:
  Station 11 (AGGREGATOR): $0.508/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.561/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.93
Solution prices: 11:0.508, 14:0.600, 15:0.561, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.5075010226428276, 14: 0.6, 15: 0.5605009959399467, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.198412002835841

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199981

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.61206658071205

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.20
EV 2: Objective = 12.46
EV 3: Objective = 7.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.5075010226428276), '14': np.float64(0.6), '15': np.float64(0.5605009959399467), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.508=$2.6506 + t12:6.600kWh*$0.508=$3.3495 + t13:3.801kWh*$0.508=$1.9291
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.561=$1.9960 + t12:2.546kWh*$0.561=$1.4273
  Station 37: t13:2.161kWh*$0.500=$1.0807 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $7.6515
  Station 14: $5.6067
  Station 15: $3.3120
  Station 26: $0.0000
  Station 37: $13.9619

Total Revenue: $31.5334
Total Cost: $1.0013
Profit: $30.5321
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(7.651515109519091), '14': np.float64(5.606709304996097), '15': np.float64(3.311966961512827), '26': np.float64(0.0), '37': np.float64(13.961877033872584)}
Real profit: $10.9635

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $16.9302
 Real profit: $10.9635
 Improvement over base: $-2.7643 (-20.1%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 15: Using specified algorithm gbm (R² = 0.6104)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $15.88
Charging prices:
  Station 11 (AGGREGATOR): $0.357/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $15.88
Solution prices: 11:0.357, 14:0.600, 15:0.439, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.356500999754644, 14: 0.6, 15: 0.4385000020265579, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.993497679481065

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.235219969119516

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.347199759502428

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.99
EV 2: Objective = 12.24
EV 3: Objective = 5.35

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.356500999754644), '14': np.float64(0.6), '15': np.float64(0.4385000020265579), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.357=$3.8635 + t12:13.200kWh*$0.357=$4.7058 + t13:10.401kWh*$0.357=$3.7081 + t14:0.278kWh*$0.357=$0.0991
  Station 15: t11:3.561kWh*$0.439=$1.5616 + t12:3.600kWh*$0.439=$1.5786 + t13:3.600kWh*$0.439=$1.5786 + t14:3.600kWh*$0.439=$1.5786 + t15:0.039kWh*$0.439=$0.0170
  Station 37: t16:6.079kWh*$0.500=$3.0393 + t17:7.033kWh*$0.500=$3.5166 + t18:3.600kWh*$0.500=$1.8000 + t19:1.273kWh*$0.500=$0.6365

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:0.278kWh*$0.018=$0.0049 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006
  t16: s37:6.079kWh*$0.013=$0.0800
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:1.273kWh*$0.015=$0.0187

Profit breakdown by station:
  Station 11: $11.7611
  Station 14: $0.0000
  Station 15: $6.0593
  Station 26: $0.0000
  Station 37: $8.7525

Total Revenue: $27.6832
Total Cost: $1.1103
Profit: $26.5729
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(11.76114227211139), '14': np.float64(0.0), '15': np.float64(6.05925563352421), '26': np.float64(0.0), '37': np.float64(8.752504784196141)}
Real profit: $17.8204

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $15.8819
 Real profit: $17.8204
 Improvement over base: $4.0926 (29.8%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 15: Using specified algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 182 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.95
Charging prices:
  Station 11 (AGGREGATOR): $0.375/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.266/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.95
Solution prices: 11:0.375, 14:0.600, 15:0.266, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.37459770110802126, 14: 0.6, 15: 0.26579411527184293, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.606011500984531

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.853400524009935

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.95702167977693

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.61
EV 2: Objective = 10.85
EV 3: Objective = 4.96

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.37459770110802126), '14': np.float64(0.6), '15': np.float64(0.26579411527184293), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.653kWh*$0.375=$0.6193 + t16:8.671kWh*$0.375=$3.2482 + t17:1.807kWh*$0.375=$0.6768
  Station 15: t11:8.705kWh*$0.266=$2.3138 + t12:10.800kWh*$0.266=$2.8706 + t13:10.800kWh*$0.266=$2.8706 + t14:10.800kWh*$0.266=$2.8706 + t15:2.095kWh*$0.266=$0.5568
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:3.433kWh*$0.500=$1.7166 + t18:2.761kWh*$0.500=$1.3803 + t19:3.600kWh*$0.500=$1.8000 + t20:2.179kWh*$0.500=$1.0896

Cost breakdown by time period:
  t15: s11:1.653kWh*$0.015=$0.0248 + s15:2.095kWh*$0.015=$0.0315
  t16: s11:8.671kWh*$0.013=$0.1141 + s37:2.674kWh*$0.013=$0.0352
  t17: s11:1.807kWh*$0.014=$0.0255 + s37:3.433kWh*$0.014=$0.0484
  t11: s15:8.705kWh*$0.019=$0.1642
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:10.800kWh*$0.018=$0.1911
  t18: s37:2.761kWh*$0.012=$0.0322
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:2.179kWh*$0.020=$0.0426

Profit breakdown by station:
  Station 11: $4.3799
  Station 14: $0.0000
  Station 15: $10.7245
  Station 26: $0.0000
  Station 37: $7.1124

Total Revenue: $23.3505
Total Cost: $1.1336
Profit: $22.2168
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.379919991745164), '14': np.float64(0.0), '15': np.float64(10.72445781302829), '26': np.float64(0.0), '37': np.float64(7.112427306699279)}
Real profit: $15.1044

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $13.9497
 Real profit: $15.1044
 Improvement over base: $1.3766 (10.0%)
✓ Completed combination 7/31

PROGRESS: Combination 8/31 - [11, 26]
Remaining: 23 combinations


============================================================
EXPERIMENT: Controlled stations [11, 26]
============================================================

Creating synthetic aggregator data for stations [11, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 26]
Competitor stations: [14, 15, 37]
Base case profit: $0.0000


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_26     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.55
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.55
Solution prices: 11:0.200, 14:0.600, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.26076860520003

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.151786645759506

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066424

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.26
EV 2: Objective = 6.15
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.615kWh*$0.200=$1.1229 + t12:6.600kWh*$0.200=$1.3200 + t13:2.599kWh*$0.200=$0.5199
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:6.600kWh*$0.200=$1.3200 + t16:7.288kWh*$0.200=$1.4575 + t17:6.600kWh*$0.200=$1.3200 + t18:6.600kWh*$0.200=$1.3200 + t19:1.892kWh*$0.200=$0.3785

Cost breakdown by time period:
  t11: s11:5.615kWh*$0.019=$0.1059 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s11:2.599kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1122
  t14: s26:8.075kWh*$0.018=$0.1429
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:7.288kWh*$0.013=$0.0959
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $2.6981
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $9.5326
  Station 37: $0.0000

Total Revenue: $15.3180
Total Cost: $1.1287
Profit: $14.1893
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.6980977449448256), '14': np.float64(0.0), '15': np.float64(1.9586532510819685), '26': np.float64(9.532591286951263), '37': np.float64(0.0)}
Real profit: $12.2307

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $13.5493
 Real profit: $12.2307
 Improvement over base: $12.2307 (base profit is zero)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_26         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 107 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.60
Charging prices:
  Station 11 (AGGREGATOR): $0.351/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.432/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.60
Solution prices: 11:0.351, 14:0.600, 15:0.500, 26:0.432, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3505000025033951, 14: 0.6, 15: 0.5, 26: 0.4324999898672104, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.105762361177666

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.6908610324042

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.257190107128782

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.11
EV 2: Objective = 11.69
EV 3: Objective = 5.26

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3505000025033951), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4324999898672104), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.351=$1.8306 + t12:6.600kWh*$0.351=$2.3133 + t13:3.801kWh*$0.351=$1.3323
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t14:9.101kWh*$0.432=$3.9361 + t15:13.200kWh*$0.432=$5.7090 + t16:11.753kWh*$0.432=$5.0833 + t17:0.399kWh*$0.432=$0.1727

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s26:9.101kWh*$0.018=$0.1610
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $5.1985
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $14.3814
  Station 37: $0.0000

Total Revenue: $27.1394
Total Cost: $1.0170
Profit: $26.1224
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.198518782869876), '14': np.float64(4.5838140437399275), '15': np.float64(1.9586532510817165), '26': np.float64(14.381397295779859), '37': np.float64(0.0)}
Real profit: $19.5799

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $17.6028
 Real profit: $19.5799
 Improvement over base: $19.5799 (base profit is zero)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_26        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.10
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.10
Solution prices: 11:0.200, 14:0.600, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.26076860520003

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.151786645759506

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066424

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.26
EV 2: Objective = 6.15
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.615kWh*$0.200=$1.1229 + t12:6.600kWh*$0.200=$1.3200 + t13:2.599kWh*$0.200=$0.5199
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:6.600kWh*$0.200=$1.3200 + t16:7.288kWh*$0.200=$1.4575 + t17:6.600kWh*$0.200=$1.3200 + t18:6.600kWh*$0.200=$1.3200 + t19:1.892kWh*$0.200=$0.3785

Cost breakdown by time period:
  t11: s11:5.615kWh*$0.019=$0.1059 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s11:2.599kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1122
  t14: s26:8.075kWh*$0.018=$0.1429
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:7.288kWh*$0.013=$0.0959
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $2.6981
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $9.5326
  Station 37: $0.0000

Total Revenue: $15.3180
Total Cost: $1.1287
Profit: $14.1893
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.6980977449448256), '14': np.float64(0.0), '15': np.float64(1.9586532510819685), '26': np.float64(9.532591286951263), '37': np.float64(0.0)}
Real profit: $12.2307

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $16.1041
 Real profit: $12.2307
 Improvement over base: $12.2307 (base profit is zero)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_26       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.39
Charging prices:
  Station 11 (AGGREGATOR): $0.433/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.392/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.39
Solution prices: 11:0.433, 14:0.600, 15:0.500, 26:0.392, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4330009983241325, 14: 0.6, 15: 0.5, 26: 0.39200100464222487, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.436006008059561

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.021104679286253

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.453811155023317

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.44
EV 2: Objective = 11.02
EV 3: Objective = 6.45

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4330009983241325), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.39200100464222487), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.392=$0.5283 + t12:6.600kWh*$0.392=$2.5872 + t13:6.600kWh*$0.392=$2.5872 + t14:11.703kWh*$0.392=$4.5875 + t15:13.200kWh*$0.392=$5.1744 + t16:11.753kWh*$0.392=$4.6073 + t17:0.399kWh*$0.392=$0.1565

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $19.4105
  Station 37: $0.0000

Total Revenue: $26.9905
Total Cost: $1.0375
Profit: $25.9530
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740298), '15': np.float64(1.958653251081936), '26': np.float64(19.41053615250584), '37': np.float64(0.0)}
Real profit: $19.4105

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $26.3873
 Real profit: $19.4105
 Improvement over base: $19.4105 (base profit is zero)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_26        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.00
Charging prices:
  Station 11 (AGGREGATOR): $0.276/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.00
Solution prices: 11:0.276, 14:0.600, 15:0.500, 26:0.443, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2755009995162254, 14: 0.6, 15: 0.5, 26: 0.442500995224691, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.271155070118898

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.856253741345737

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.13227138035987

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.27
EV 2: Objective = 11.86
EV 3: Objective = 4.13

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2755009995162254), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.442500995224691), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.276=$1.4389 + t12:6.600kWh*$0.276=$1.8183 + t13:3.801kWh*$0.276=$1.0473
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t14:9.101kWh*$0.443=$4.0271 + t15:13.200kWh*$0.443=$5.8410 + t16:11.753kWh*$0.443=$5.2009 + t17:0.399kWh*$0.443=$0.1767

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s26:9.101kWh*$0.018=$0.1610
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $4.0267
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $14.7260
  Station 37: $0.0000

Total Revenue: $26.3122
Total Cost: $1.0170
Profit: $25.2952
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.026728442485563), '14': np.float64(4.583814043739944), '15': np.float64(1.9586532510813606), '26': np.float64(14.72596543940813), '37': np.float64(0.0)}
Real profit: $18.7527

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $23.0004
 Real profit: $18.7527
 Improvement over base: $18.7527 (base profit is zero)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 332 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.41
Charging prices:
  Station 11 (AGGREGATOR): $0.347/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.41
Solution prices: 11:0.347, 14:0.600, 15:0.500, 26:0.411, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3472724781455038, 14: 0.6, 15: 0.5, 26: 0.4111365740118157, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.752462558381241

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.475576481464575

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.20878009570637

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.75
EV 2: Objective = 11.48
EV 3: Objective = 5.21

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3472724781455038), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4111365740118157), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.347=$3.7635 + t12:13.200kWh*$0.347=$4.5840 + t13:10.401kWh*$0.347=$3.6121 + t14:0.278kWh*$0.347=$0.0965
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t14:5.473kWh*$0.411=$2.2503 + t15:6.600kWh*$0.411=$2.7135 + t16:5.153kWh*$0.411=$2.1187 + t17:4.456kWh*$0.411=$1.8319 + t18:6.600kWh*$0.411=$2.7135 + t19:1.892kWh*$0.411=$0.7780

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:10.401kWh*$0.017=$0.1768
  t14: s11:0.278kWh*$0.018=$0.0049 + s26:5.473kWh*$0.018=$0.0968
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:5.153kWh*$0.013=$0.0678
  t17: s26:4.456kWh*$0.014=$0.0628
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $11.4408
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $11.9745
  Station 37: $0.0000

Total Revenue: $26.4967
Total Cost: $1.1227
Profit: $25.3739
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(11.440760520870452), '14': np.float64(0.0), '15': np.float64(1.9586532510821293), '26': np.float64(11.974533197302657), '37': np.float64(0.0)}
Real profit: $23.4153

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $20.4053
 Real profit: $23.4153
 Improvement over base: $23.4153 (base profit is zero)
✓ Completed combination 8/31

PROGRESS: Combination 9/31 - [11, 37]
Remaining: 22 combinations


============================================================
EXPERIMENT: Controlled stations [11, 37]
============================================================

Creating synthetic aggregator data for stations [11, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 37]
Competitor stations: [14, 15, 26]
Base case profit: $9.9485


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_37     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
ERROR: evaluating object as numeric value: x[rc_15]
        (object: <class 'pyomo.core.base.var.VarData'>)
    No value for uninitialized NumericValue object x[rc_15]
Predicted aggregator profit: $12.13
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.13
Solution prices: 11:0.200, 14:0.600, 15:None, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: np.float64(0.5), 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.696473651466605

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.477122524799834

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.99982314954662

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 5.48
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.200=$2.0192 + t12:13.200kWh*$0.200=$2.6400 + t13:6.455kWh*$0.200=$1.2910
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:0.167kWh*$0.200=$0.0333 + t14:5.899kWh*$0.200=$1.1798 + t15:7.200kWh*$0.200=$1.4400 + t16:7.200kWh*$0.200=$1.4400 + t17:7.033kWh*$0.200=$1.4067 + t18:1.301kWh*$0.200=$0.2602

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:6.455kWh*$0.017=$0.1097 + s37:0.167kWh*$0.017=$0.0028
  t14: s37:5.899kWh*$0.018=$0.1044
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:1.301kWh*$0.012=$0.0152

Profit breakdown by station:
  Station 11: $5.4208
  Station 14: $0.0000
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $5.3355

Total Revenue: $14.7640
Total Cost: $1.0652
Profit: $13.6988
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.420812237738888), '14': np.float64(0.0), '15': np.float64(2.942447845503205), '26': np.float64(0.0), '37': np.float64(5.335507724962542)}
Real profit: $10.7563

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $12.1267
 Real profit: $10.7563
 Improvement over base: $0.8078 (8.1%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_37         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 107 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.66
Charging prices:
  Station 11 (AGGREGATOR): $0.271/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.66
Solution prices: 11:0.271, 14:0.600, 15:0.500, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.271000012755394, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4410009996354347}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.02807147042691

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.690662119579413

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.06476055895521

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.03
EV 2: Objective = 8.69
EV 3: Objective = 4.06

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.271000012755394), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4410009996354347)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.271=$1.4154 + t12:6.600kWh*$0.271=$1.7886 + t13:3.801kWh*$0.271=$1.0301 + t14:0.998kWh*$0.271=$0.2706 + t15:6.600kWh*$0.271=$1.7886 + t16:6.600kWh*$0.271=$1.7886 + t17:5.360kWh*$0.271=$1.4525
  Station 15: t10:0.611kWh*$0.500=$0.3057 + t11:7.161kWh*$0.500=$3.5806 + t12:5.840kWh*$0.500=$2.9200
  Station 37: t13:0.167kWh*$0.441=$0.0735 + t14:3.600kWh*$0.441=$1.5876 + t15:3.600kWh*$0.441=$1.5876 + t16:3.600kWh*$0.441=$1.5876 + t17:3.433kWh*$0.441=$1.5141

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s15:7.161kWh*$0.019=$0.1350
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:5.840kWh*$0.017=$0.1014
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:0.167kWh*$0.017=$0.0028
  t14: s11:0.998kWh*$0.018=$0.0177 + s37:3.600kWh*$0.018=$0.0637
  t15: s11:6.600kWh*$0.015=$0.0992 + s37:3.600kWh*$0.015=$0.0541
  t16: s11:6.600kWh*$0.013=$0.0869 + s37:3.600kWh*$0.013=$0.0474
  t17: s11:5.360kWh*$0.014=$0.0756 + s37:3.433kWh*$0.014=$0.0484
  t10: s15:0.611kWh*$0.040=$0.0247

Profit breakdown by station:
  Station 11: $8.9774
  Station 14: $0.0000
  Station 15: $6.5452
  Station 26: $0.0000
  Station 37: $6.1340

Total Revenue: $22.6911
Total Cost: $1.0345
Profit: $21.6566
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(8.977406578348454), '14': np.float64(0.0), '15': np.float64(6.5452078055035345), '26': np.float64(0.0), '37': np.float64(6.134000486329536)}
Real profit: $15.1114

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $14.6612
 Real profit: $15.1114
 Improvement over base: $5.1629 (51.9%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_37        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $15.25
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $15.25
Solution prices: 11:0.200, 14:0.600, 15:0.500, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.696473651466605

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.477122524799834

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.99982314954662

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 5.48
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.200=$2.0192 + t12:13.200kWh*$0.200=$2.6400 + t13:6.455kWh*$0.200=$1.2910
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:0.167kWh*$0.200=$0.0333 + t14:5.899kWh*$0.200=$1.1798 + t15:7.200kWh*$0.200=$1.4400 + t16:7.200kWh*$0.200=$1.4400 + t17:7.033kWh*$0.200=$1.4067 + t18:1.301kWh*$0.200=$0.2602

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:6.455kWh*$0.017=$0.1097 + s37:0.167kWh*$0.017=$0.0028
  t14: s37:5.899kWh*$0.018=$0.1044
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:1.301kWh*$0.012=$0.0152

Profit breakdown by station:
  Station 11: $5.4208
  Station 14: $0.0000
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $5.3355

Total Revenue: $14.7640
Total Cost: $1.0652
Profit: $13.6988
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.420812237738888), '14': np.float64(0.0), '15': np.float64(2.942447845503205), '26': np.float64(0.0), '37': np.float64(5.335507724962542)}
Real profit: $10.7563

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $15.2546
 Real profit: $10.7563
 Improvement over base: $0.8078 (8.1%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_37       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.19
Charging prices:
  Station 11 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.601/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.19
Solution prices: 11:0.411, 14:0.600, 15:0.500, 26:0.600, 37:0.601

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4114999920129776, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.6014999747276306}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.438803254533076

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.818470870748087

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.172136010393911

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.44
EV 2: Objective = 12.82
EV 3: Objective = 6.17

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4114999920129776), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.6014999747276306)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.411=$4.1545 + t12:13.200kWh*$0.411=$5.4318 + t13:10.401kWh*$0.411=$4.2801 + t14:1.914kWh*$0.411=$0.7875
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t14:2.225kWh*$0.600=$1.3352 + t15:3.596kWh*$0.600=$2.1577
  Station 37: t16:5.393kWh*$0.601=$3.2438 + t17:3.433kWh*$0.601=$2.0651

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:1.914kWh*$0.018=$0.0339 + s15:3.600kWh*$0.018=$0.0637 + s26:2.225kWh*$0.018=$0.0394
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:3.596kWh*$0.015=$0.0540
  t16: s37:5.393kWh*$0.013=$0.0710
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $14.0236
  Station 14: $0.0000
  Station 15: $6.9449
  Station 26: $3.3994
  Station 37: $5.1895

Total Revenue: $30.6556
Total Cost: $1.0982
Profit: $29.5574
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(14.023598132418476), '14': np.float64(0.0), '15': np.float64(6.9448556043417735), '26': np.float64(3.399426712305207), '37': np.float64(5.189534388986652)}
Real profit: $19.2131

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $18.1942
 Real profit: $19.2131
 Improvement over base: $9.2646 (93.1%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_37        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.86
Charging prices:
  Station 11 (AGGREGATOR): $0.367/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.86
Solution prices: 11:0.367, 14:0.600, 15:0.500, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.36650100511906203, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.44050100607273635}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.021159559415857

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.6390809199488

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.497190997440545

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.02
EV 2: Objective = 11.64
EV 3: Objective = 5.50

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.36650100511906203), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.44050100607273635)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.367=$1.9142 + t12:6.600kWh*$0.367=$2.4189 + t13:3.801kWh*$0.367=$1.3932
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:2.161kWh*$0.441=$0.9521 + t14:7.200kWh*$0.441=$3.1716 + t15:7.200kWh*$0.441=$3.1716 + t16:7.200kWh*$0.441=$3.1716 + t17:5.039kWh*$0.441=$2.2195

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $5.4485
  Station 14: $5.6067
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $12.2483

Total Revenue: $27.2473
Total Cost: $1.0013
Profit: $26.2460
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.448519710277981), '14': np.float64(5.606709304995581), '15': np.float64(2.942447845502949), '26': np.float64(0.0), '37': np.float64(12.248306008767388)}
Real profit: $17.6968

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $17.8617
 Real profit: $17.6968
 Improvement over base: $7.7483 (77.9%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 332 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.69
Charging prices:
  Station 11 (AGGREGATOR): $0.347/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.467/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.69
Solution prices: 11:0.347, 14:0.600, 15:0.500, 26:0.600, 37:0.467

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3469538025381768, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4665143286266772}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.380767730401814

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.481733781618368

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.172273070455145

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.38
EV 2: Objective = 10.48
EV 3: Objective = 8.17

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3469538025381768), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4665143286266772)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.347=$1.6908 + t12:6.600kWh*$0.347=$2.2899 + t13:6.600kWh*$0.347=$2.2899 + t14:1.914kWh*$0.347=$0.6639
  Station 14: t10:2.992kWh*$0.600=$1.7950
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:3.313kWh*$0.467=$1.5455 + t13:3.767kWh*$0.467=$1.7572 + t14:7.200kWh*$0.467=$3.3589 + t15:9.902kWh*$0.467=$4.6196 + t16:7.487kWh*$0.467=$3.4928 + t17:5.671kWh*$0.467=$2.6455

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s11:6.600kWh*$0.017=$0.1122 + s37:3.767kWh*$0.017=$0.0640
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:7.200kWh*$0.018=$0.1274
  t10: s14:2.992kWh*$0.040=$0.1206
  t15: s37:9.902kWh*$0.015=$0.1488
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $6.5819
  Station 14: $1.6744
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $16.8434

Total Revenue: $29.2029
Total Cost: $1.1608
Profit: $28.0421
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.581938990372942), '14': np.float64(1.6743741348674284), '15': np.float64(2.9424478455032292), '26': np.float64(0.0), '37': np.float64(16.843353386406136)}
Real profit: $23.4253

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $18.6857
 Real profit: $23.4253
 Improvement over base: $13.4768 (135.5%)
✓ Completed combination 9/31

PROGRESS: Combination 10/31 - [14, 15]
Remaining: 21 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15]
============================================================

Creating synthetic aggregator data for stations [14, 15]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15]
Competitor stations: [11, 26, 37]
Base case profit: $20.2579


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.77
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.77
Solution prices: 11:0.600, 14:0.200, 15:0.200, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.2, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.447199731976902

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.872216051999932

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.6061998093598415

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.45
EV 2: Objective = 5.87
EV 3: Objective = 4.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.200=$0.6458 + t11:11.158kWh*$0.200=$2.2317 + t12:11.444kWh*$0.200=$2.2889 + t13:6.600kWh*$0.200=$1.3200 + t14:1.910kWh*$0.200=$0.3820 + t15:4.119kWh*$0.200=$0.8237 + t16:0.972kWh*$0.200=$0.1944
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t13:0.199kWh*$0.500=$0.0994 + t14:3.650kWh*$0.500=$1.8250 + t15:3.600kWh*$0.500=$1.8000 + t16:0.645kWh*$0.500=$0.3223 + t17:3.333kWh*$0.500=$1.6667 + t18:0.219kWh*$0.500=$0.1094

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:11.444kWh*$0.017=$0.1987 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:3.600kWh*$0.017=$0.0612 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:3.650kWh*$0.018=$0.0646
  t15: s14:4.119kWh*$0.015=$0.0619 + s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s14:0.972kWh*$0.013=$0.0128 + s37:0.645kWh*$0.013=$0.0085
  t17: s37:3.333kWh*$0.014=$0.0470
  t18: s37:0.219kWh*$0.012=$0.0026

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.1264
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $5.6427

Total Revenue: $16.5892
Total Cost: $1.1952
Profit: $15.3940
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.126375938361843), '15': np.float64(2.62485403357671), '26': np.float64(0.0), '37': np.float64(5.642747428245675)}
Real profit: $9.7512

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $12.7672
 Real profit: $9.7512
 Improvement over base: $-10.5067 (-51.9%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 152 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.48
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.458/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.472/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.48
Solution prices: 11:0.600, 14:0.458, 15:0.472, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.45799998939037323, 15: 0.47200098795292433, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.456615308927358

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.74363980555424

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.939891897891928

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.46
EV 2: Objective = 10.74
EV 3: Objective = 6.94

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.45799998939037323), '15': np.float64(0.47200098795292433), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.458=$2.7014 + t11:11.158kWh*$0.458=$5.1106 + t12:7.113kWh*$0.458=$3.2578 + t13:6.600kWh*$0.458=$3.0228 + t14:1.910kWh*$0.458=$0.8747
  Station 15: t11:3.561kWh*$0.472=$1.6809 + t12:3.600kWh*$0.472=$1.6992 + t13:6.290kWh*$0.472=$2.9691 + t14:3.600kWh*$0.472=$1.6992 + t15:0.039kWh*$0.472=$0.0183
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $14.2495
  Station 15: $7.7658
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $28.2710
Total Cost: $1.1669
Profit: $27.1041
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(14.249513274510196), '15': np.float64(7.765818839783481), '26': np.float64(0.0), '37': np.float64(5.088733289713487)}
Real profit: $22.0153

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $16.4791
 Real profit: $22.0153
 Improvement over base: $1.7574 (8.7%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.81
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.81
Solution prices: 11:0.600, 14:0.200, 15:0.200, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.2, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.447199731976902

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.872216051999932

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.6061998093598415

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.45
EV 2: Objective = 5.87
EV 3: Objective = 4.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.200=$0.6458 + t11:11.158kWh*$0.200=$2.2317 + t12:11.444kWh*$0.200=$2.2889 + t13:6.600kWh*$0.200=$1.3200 + t14:1.910kWh*$0.200=$0.3820 + t15:4.119kWh*$0.200=$0.8237 + t16:0.972kWh*$0.200=$0.1944
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t13:0.199kWh*$0.500=$0.0994 + t14:3.650kWh*$0.500=$1.8250 + t15:3.600kWh*$0.500=$1.8000 + t16:0.645kWh*$0.500=$0.3223 + t17:3.333kWh*$0.500=$1.6667 + t18:0.219kWh*$0.500=$0.1094

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:11.444kWh*$0.017=$0.1987 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:3.600kWh*$0.017=$0.0612 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:3.650kWh*$0.018=$0.0646
  t15: s14:4.119kWh*$0.015=$0.0619 + s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s14:0.972kWh*$0.013=$0.0128 + s37:0.645kWh*$0.013=$0.0085
  t17: s37:3.333kWh*$0.014=$0.0470
  t18: s37:0.219kWh*$0.012=$0.0026

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.1264
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $5.6427

Total Revenue: $16.5892
Total Cost: $1.1952
Profit: $15.3940
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.126375938361843), '15': np.float64(2.62485403357671), '26': np.float64(0.0), '37': np.float64(5.642747428245675)}
Real profit: $9.7512

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $14.8072
 Real profit: $9.7512
 Improvement over base: $-10.5067 (-51.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.54
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.560/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.54
Solution prices: 11:0.600, 14:0.442, 15:0.560, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.44150100809929427, 15: 0.5604999959468842, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.965896151477573

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.617753233321988

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.962380835837635

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.97
EV 2: Objective = 10.62
EV 3: Objective = 6.96

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.44150100809929427), '15': np.float64(0.5604999959468842), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.442=$2.6041 + t11:14.934kWh*$0.442=$6.5934 + t12:13.713kWh*$0.442=$6.0543 + t13:13.200kWh*$0.442=$5.8278 + t14:4.665kWh*$0.442=$2.0594
  Station 15: t13:2.690kWh*$0.560=$1.5080
  Station 37: t15:4.160kWh*$0.500=$2.0802 + t16:3.933kWh*$0.500=$1.9665

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:14.934kWh*$0.019=$0.2816
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.665kWh*$0.018=$0.0825
  t15: s37:4.160kWh*$0.015=$0.0625
  t16: s37:3.933kWh*$0.013=$0.0518

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $22.0746
  Station 15: $1.4622
  Station 26: $0.0000
  Station 37: $3.9325

Total Revenue: $28.6938
Total Cost: $1.2245
Profit: $27.4693
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(22.074594950733893), '15': np.float64(1.4622481707606707), '26': np.float64(0.0), '37': np.float64(3.9324829905038166)}
Real profit: $23.5368

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $21.5354
 Real profit: $23.5368
 Improvement over base: $3.2789 (16.2%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.71
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.458/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.500/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.71
Solution prices: 11:0.600, 14:0.458, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4580009893834358, 15: 0.4995010064303642, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.836775564358357

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.743658686911536

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.010931423176693

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 10.74
EV 3: Objective = 7.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4580009893834358), '15': np.float64(0.4995010064303642), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.458=$2.7014 + t11:11.158kWh*$0.458=$5.1106 + t12:7.113kWh*$0.458=$3.2578 + t13:6.600kWh*$0.458=$3.0228 + t14:1.910kWh*$0.458=$0.8747
  Station 15: t11:3.561kWh*$0.500=$1.7788 + t12:3.600kWh*$0.500=$1.7982 + t13:6.290kWh*$0.500=$3.1421 + t14:3.600kWh*$0.500=$1.7982 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $14.2495
  Station 15: $8.2358
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $28.7410
Total Cost: $1.1669
Profit: $27.5741
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(14.249545953799952), '15': np.float64(8.235805600154432), '26': np.float64(0.0), '37': np.float64(5.088733289712435)}
Real profit: $22.4854

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $24.7137
 Real profit: $22.4854
 Improvement over base: $2.2274 (11.0%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 302 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.11
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.408/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.348/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.11
Solution prices: 11:0.600, 14:0.408, 15:0.348, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4080636704536281, 15: 0.34793641504431305, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.741546653039061

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.80076778913174

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.339912240587154

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.74
EV 2: Objective = 9.80
EV 3: Objective = 5.34

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4080636704536281), '15': np.float64(0.34793641504431305), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.408=$0.6733 + t11:4.558kWh*$0.408=$1.8601 + t12:6.600kWh*$0.408=$2.6932 + t13:6.600kWh*$0.408=$2.6932 + t14:1.910kWh*$0.408=$0.7793
  Station 15: t11:5.310kWh*$0.348=$1.8477 + t12:7.200kWh*$0.348=$2.5051 + t13:7.200kWh*$0.348=$2.5051 + t14:7.200kWh*$0.348=$2.5051 + t15:1.541kWh*$0.348=$0.5363
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $8.2861
  Station 15: $9.4013
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $23.8357
Total Cost: $1.0595
Profit: $22.7761
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(8.286118364607345), '15': np.float64(9.401278807539912), '26': np.float64(0.0), '37': np.float64(5.08873328971401)}
Real profit: $17.6874

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $20.1116
 Real profit: $17.6874
 Improvement over base: $-2.5705 (-12.7%)
✓ Completed combination 10/31

PROGRESS: Combination 11/31 - [14, 26]
Remaining: 20 combinations


============================================================
EXPERIMENT: Controlled stations [14, 26]
============================================================

Creating synthetic aggregator data for stations [14, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 26]
Competitor stations: [11, 15, 37]
Base case profit: $6.5302


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_26     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $15.26
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $15.26
Solution prices: 11:0.600, 14:0.200, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.575536203839483

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.82030352858666

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.8340851491729686

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.58
EV 2: Objective = 4.82
EV 3: Objective = 3.83

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.200=$1.1797 + t11:15.277kWh*$0.200=$3.0554 + t12:9.599kWh*$0.200=$1.9198 + t13:6.600kWh*$0.200=$1.3200 + t14:1.910kWh*$0.200=$0.3820
  Station 26: t13:2.423kWh*$0.200=$0.4846 + t14:10.563kWh*$0.200=$2.1126 + t15:6.600kWh*$0.200=$1.3200 + t16:9.637kWh*$0.200=$1.9274 + t17:0.399kWh*$0.200=$0.0799

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:9.599kWh*$0.017=$0.1667
  t13: s14:6.600kWh*$0.017=$0.1122 + s26:2.423kWh*$0.017=$0.0412
  t14: s14:1.910kWh*$0.018=$0.0338 + s26:10.563kWh*$0.018=$0.1869
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:9.637kWh*$0.013=$0.1269
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.0182
  Station 15: $0.0000
  Station 26: $5.4647
  Station 37: $0.0000

Total Revenue: $13.7812
Total Cost: $1.2983
Profit: $12.4829
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.018212978868005), '15': np.float64(0.0), '26': np.float64(5.464703198574384), '37': np.float64(0.0)}
Real profit: $12.4829

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $15.2585
 Real profit: $12.4829
 Improvement over base: $5.9527 (91.2%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_26         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 152 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.32
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.466/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.32
Solution prices: 11:0.600, 14:0.800, 15:0.500, 26:0.466, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7995010183512936, 15: 0.5, 26: 0.466499999165535, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.66804119624324

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.60943022133031

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.680344853147982

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.67
EV 2: Objective = 13.61
EV 3: Objective = 7.68

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7995010183512936), '15': np.float64(0.5), '26': np.float64(0.466499999165535), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2021
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.466=$0.6287 + t12:6.600kWh*$0.466=$3.0789 + t13:6.600kWh*$0.466=$3.0789 + t14:8.075kWh*$0.466=$3.7672 + t15:8.697kWh*$0.466=$4.0570 + t16:11.753kWh*$0.466=$5.4829 + t17:6.600kWh*$0.466=$3.0789 + t18:1.930kWh*$0.466=$0.9004
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1266
  Station 15: $1.9587
  Station 26: $23.2768
  Station 37: $2.8372

Total Revenue: $32.2477
Total Cost: $1.0485
Profit: $31.1992
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1265516425250786), '15': np.float64(1.958653251081908), '26': np.float64(23.276817623236504), '37': np.float64(2.8371799672049205)}
Real profit: $26.4034

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $18.3171
 Real profit: $26.4034
 Improvement over base: $19.8732 (304.3%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_26        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.07
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.07
Solution prices: 11:0.600, 14:0.200, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.575536203839483

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.82030352858666

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.8340851491729686

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.58
EV 2: Objective = 4.82
EV 3: Objective = 3.83

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.200=$1.1797 + t11:15.277kWh*$0.200=$3.0554 + t12:9.599kWh*$0.200=$1.9198 + t13:6.600kWh*$0.200=$1.3200 + t14:1.910kWh*$0.200=$0.3820
  Station 26: t13:2.423kWh*$0.200=$0.4846 + t14:10.563kWh*$0.200=$2.1126 + t15:6.600kWh*$0.200=$1.3200 + t16:9.637kWh*$0.200=$1.9274 + t17:0.399kWh*$0.200=$0.0799

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:9.599kWh*$0.017=$0.1667
  t13: s14:6.600kWh*$0.017=$0.1122 + s26:2.423kWh*$0.017=$0.0412
  t14: s14:1.910kWh*$0.018=$0.0338 + s26:10.563kWh*$0.018=$0.1869
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:9.637kWh*$0.013=$0.1269
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.0182
  Station 15: $0.0000
  Station 26: $5.4647
  Station 37: $0.0000

Total Revenue: $13.7812
Total Cost: $1.2983
Profit: $12.4829
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.018212978868005), '15': np.float64(0.0), '26': np.float64(5.464703198574384), '37': np.float64(0.0)}
Real profit: $12.4829

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $17.0679
 Real profit: $12.4829
 Improvement over base: $5.9527 (91.2%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_26       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $33.68
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.385/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.414/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $33.68
Solution prices: 11:0.600, 14:0.385, 15:0.500, 26:0.414, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.38450099689362105, 15: 0.5, 26: 0.413500996059156, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.899376459182763

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.355869446504984

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.094143034064706

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.90
EV 2: Objective = 9.36
EV 3: Objective = 6.09

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.38450099689362105), '15': np.float64(0.5), '26': np.float64(0.413500996059156), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.385=$2.2679 + t11:15.277kWh*$0.385=$5.8740 + t12:13.713kWh*$0.385=$5.2727 + t13:13.200kWh*$0.385=$5.0754 + t14:4.082kWh*$0.385=$1.5694
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.9988
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $25.3639
Total Cost: $1.2228
Profit: $24.1411
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.99881682184944), '15': np.float64(1.2994780035819695), '26': np.float64(0.0), '37': np.float64(3.8428521118357652)}
Real profit: $18.9988

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $33.6785
 Real profit: $18.9988
 Improvement over base: $12.4686 (190.9%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_26        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.45
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.547/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.459/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.45
Solution prices: 11:0.600, 14:0.547, 15:0.500, 26:0.459, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.5474999845027924, 15: 0.5, 26: 0.4594999998807907, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466656

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.740271262261519

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.565098532515947

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 11.74
EV 3: Objective = 7.57

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.5474999845027924), '15': np.float64(0.5), '26': np.float64(0.4594999998807907), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.547=$2.4957 + t12:3.321kWh*$0.547=$1.8181
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t11:1.348kWh*$0.459=$0.6192 + t12:6.600kWh*$0.459=$3.0327 + t13:6.600kWh*$0.459=$3.0327 + t14:6.229kWh*$0.459=$2.8624 + t15:6.600kWh*$0.459=$3.0327 + t16:6.600kWh*$0.459=$3.0327 + t17:0.399kWh*$0.459=$0.1835
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:6.229kWh*$0.018=$0.1102
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869 + s37:2.674kWh*$0.013=$0.0352
  t17: s26:0.399kWh*$0.014=$0.0056 + s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.1702
  Station 15: $6.9449
  Station 26: $15.2419
  Station 37: $2.9702

Total Revenue: $30.3636
Total Cost: $1.0365
Profit: $29.3271
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.170162627986438), '15': np.float64(6.944855604341761), '26': np.float64(15.241868393975867), '37': np.float64(2.9702115888791805)}
Real profit: $19.4120

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $25.4524
 Real profit: $19.4120
 Improvement over base: $12.8818 (197.3%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.82
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.798/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.82
Solution prices: 11:0.600, 14:0.798, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7980306461612408, 15: 0.5, 26: 0.4212499090435407, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.919712931472079

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.855448534393943

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.935358149193902

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.86
EV 3: Objective = 6.94

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7980306461612408), '15': np.float64(0.5), '26': np.float64(0.4212499090435407), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.798=$3.1962
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5677 + t12:6.600kWh*$0.421=$2.7802 + t13:6.600kWh*$0.421=$2.7802 + t14:8.075kWh*$0.421=$3.4018 + t15:8.697kWh*$0.421=$3.6635 + t16:11.753kWh*$0.421=$4.9511 + t17:6.600kWh*$0.421=$2.7802 + t18:1.930kWh*$0.421=$0.8130
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1207
  Station 15: $1.9587
  Station 26: $20.9418
  Station 37: $2.8372

Total Revenue: $29.9068
Total Cost: $1.0485
Profit: $28.8583
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.120662661102509), '15': np.float64(1.958653251081309), '26': np.float64(20.941772588345685), '37': np.float64(2.8371799672048637)}
Real profit: $24.0624

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $24.8190
 Real profit: $24.0624
 Improvement over base: $17.5322 (268.5%)
✓ Completed combination 11/31

PROGRESS: Combination 12/31 - [14, 37]
Remaining: 19 combinations


============================================================
EXPERIMENT: Controlled stations [14, 37]
============================================================

Creating synthetic aggregator data for stations [14, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 37]
Competitor stations: [11, 15, 26]
Base case profit: $16.4787


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_37     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $15.77
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $15.77
Solution prices: 11:0.600, 14:0.200, 15:0.500, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.424185229546646

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.614665003999647

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.789569238293165

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.42
EV 2: Objective = 4.61
EV 3: Objective = 3.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.200=$1.1797 + t11:15.277kWh*$0.200=$3.0554 + t12:10.288kWh*$0.200=$2.0577
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t13:3.295kWh*$0.200=$0.6590 + t14:7.200kWh*$0.200=$1.4400 + t15:7.200kWh*$0.200=$1.4400 + t16:7.200kWh*$0.200=$1.4400 + t17:3.730kWh*$0.200=$0.7460

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:10.288kWh*$0.017=$0.1787
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:3.295kWh*$0.017=$0.0560
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.730kWh*$0.014=$0.0526

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.5882
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $5.2861

Total Revenue: $13.3629
Total Cost: $1.1892
Profit: $12.1737
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.588164121559081), '15': np.float64(1.299478003581877), '26': np.float64(0.0), '37': np.float64(5.286082659095589)}
Real profit: $10.8742

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $15.7710
 Real profit: $10.8742
 Improvement over base: $-5.6044 (-34.0%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_37         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 152 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.05
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.400/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.05
Solution prices: 11:0.600, 14:0.400, 15:0.500, 26:0.600, 37:0.442

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.3999999910593033, 15: 0.5, 26: 0.6, 37: 0.4424999952316284}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.37484551538353

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.407482884331296

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.287738604909239

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.37
EV 2: Objective = 9.41
EV 3: Objective = 6.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.3999999910593033), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4424999952316284)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:11.593kWh*$0.400=$4.6374 + t11:17.758kWh*$0.400=$7.1034 + t12:10.105kWh*$0.400=$4.0420 + t13:6.600kWh*$0.400=$2.6400 + t14:1.910kWh*$0.400=$0.7639
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.442=$0.0539 + t15:7.046kWh*$0.442=$3.1179 + t16:4.245kWh*$0.442=$1.8783 + t17:1.204kWh*$0.442=$0.5326

Cost breakdown by time period:
  t10: s14:11.593kWh*$0.040=$0.4674
  t11: s14:17.758kWh*$0.019=$0.3349
  t12: s14:10.105kWh*$0.017=$0.1755
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:1.910kWh*$0.018=$0.0338 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:7.046kWh*$0.015=$0.1059
  t16: s37:4.245kWh*$0.013=$0.0559
  t17: s37:1.204kWh*$0.014=$0.0170

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.0630
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $5.4019

Total Revenue: $26.1147
Total Cost: $1.3503
Profit: $24.7643
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.062983278713578), '15': np.float64(1.2994780035819355), '26': np.float64(0.0), '37': np.float64(5.401877435035336)}
Real profit: $23.4649

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $19.0548
 Real profit: $23.4649
 Improvement over base: $6.9862 (42.4%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_37        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.48
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.48
Solution prices: 11:0.600, 14:0.200, 15:0.500, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.424185229546646

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.614665003999647

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.789569238293165

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.42
EV 2: Objective = 4.61
EV 3: Objective = 3.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.200=$1.1797 + t11:15.277kWh*$0.200=$3.0554 + t12:10.288kWh*$0.200=$2.0577
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t13:3.295kWh*$0.200=$0.6590 + t14:7.200kWh*$0.200=$1.4400 + t15:7.200kWh*$0.200=$1.4400 + t16:7.200kWh*$0.200=$1.4400 + t17:3.730kWh*$0.200=$0.7460

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:10.288kWh*$0.017=$0.1787
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:3.295kWh*$0.017=$0.0560
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.730kWh*$0.014=$0.0526

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.5882
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $5.2861

Total Revenue: $13.3629
Total Cost: $1.1892
Profit: $12.1737
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.588164121559081), '15': np.float64(1.299478003581877), '26': np.float64(0.0), '37': np.float64(5.286082659095589)}
Real profit: $10.8742

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $18.4821
 Real profit: $10.8742
 Improvement over base: $-5.6044 (-34.0%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_37       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.26
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.453/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.26
Solution prices: 11:0.600, 14:0.453, 15:0.500, 26:0.600, 37:0.415

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.452501000589109, 15: 0.5, 26: 0.6, 37: 0.41450101298687514}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.66173565499719

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.915390829854273

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.943520702843908

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.66
EV 2: Objective = 9.92
EV 3: Objective = 6.94

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.452501000589109), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.41450101298687514)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.453=$2.6690 + t11:11.158kWh*$0.453=$5.0492 + t12:5.589kWh*$0.453=$2.5292
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732 + t13:2.690kWh*$0.500=$1.3452
  Station 37: t13:2.161kWh*$0.415=$0.8959 + t14:7.200kWh*$0.415=$2.9844 + t15:7.200kWh*$0.415=$2.9844 + t16:7.200kWh*$0.415=$2.9844 + t17:5.039kWh*$0.415=$2.0885

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.589kWh*$0.017=$0.0971 + s15:2.546kWh*$0.017=$0.0442
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $9.7021
  Station 15: $4.2419
  Station 26: $0.0000
  Station 37: $11.4995

Total Revenue: $26.5840
Total Cost: $1.1405
Profit: $25.4435
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(9.702073551123895), '15': np.float64(4.2419258490846525), '26': np.float64(0.0), '37': np.float64(11.499506207894576)}
Real profit: $21.2016

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $22.2622
 Real profit: $21.2016
 Improvement over base: $4.7229 (28.7%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_37        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.85
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.457/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.85
Solution prices: 11:0.600, 14:0.457, 15:0.500, 26:0.600, 37:0.442

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4565009937941795, 15: 0.5, 26: 0.6, 37: 0.4424999952316284}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.048793585548612

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.339445997637302

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.99348400753506

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 10.34
EV 3: Objective = 6.99

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4565009937941795), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4424999952316284)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.457=$2.6926 + t11:11.158kWh*$0.457=$5.0938 + t12:5.589kWh*$0.457=$2.5515
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732 + t13:2.690kWh*$0.500=$1.3452
  Station 37: t13:2.161kWh*$0.442=$0.9564 + t14:7.200kWh*$0.442=$3.1860 + t15:7.200kWh*$0.442=$3.1860 + t16:7.200kWh*$0.442=$3.1860 + t17:5.039kWh*$0.442=$2.2296

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.589kWh*$0.017=$0.0971 + s15:2.546kWh*$0.017=$0.0442
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $9.7927
  Station 15: $4.2419
  Station 26: $0.0000
  Station 37: $12.3059

Total Revenue: $27.4810
Total Cost: $1.1405
Profit: $26.3405
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(9.792657448960298), '15': np.float64(4.241925849084559), '26': np.float64(0.0), '37': np.float64(12.305876896543506)}
Real profit: $22.0985

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $23.8522
 Real profit: $22.0985
 Improvement over base: $5.6198 (34.1%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.73
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.495/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.612/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.73
Solution prices: 11:0.600, 14:0.495, 15:0.500, 26:0.600, 37:0.612

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4947449584914937, 15: 0.5, 26: 0.6, 37: 0.6118180699965968}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.49930183060016

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.906162609500214

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.471183534214113

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.50
EV 2: Objective = 11.91
EV 3: Objective = 7.47

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4947449584914937), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.6118180699965968)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.495=$2.9181 + t11:11.158kWh*$0.495=$5.5206 + t12:7.113kWh*$0.495=$3.5191 + t13:6.600kWh*$0.495=$3.2653 + t14:1.910kWh*$0.495=$0.9449
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:6.290kWh*$0.500=$3.1452 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t14:0.122kWh*$0.612=$0.0746 + t15:3.600kWh*$0.612=$2.2025 + t16:3.319kWh*$0.612=$2.0306 + t17:3.433kWh*$0.612=$2.1005

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $15.4503
  Station 15: $8.2443
  Station 26: $0.0000
  Station 37: $6.2599

Total Revenue: $31.1215
Total Cost: $1.1669
Profit: $29.9546
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(15.450321088774587), '15': np.float64(8.244333607923187), '26': np.float64(0.0), '37': np.float64(6.25993254266425)}
Real profit: $21.7103

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $22.7252
 Real profit: $21.7103
 Improvement over base: $5.2316 (31.7%)
✓ Completed combination 12/31

PROGRESS: Combination 13/31 - [15, 26]
Remaining: 18 combinations


============================================================
EXPERIMENT: Controlled stations [15, 26]
============================================================

Creating synthetic aggregator data for stations [15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [15, 26]
Competitor stations: [11, 14, 37]
Base case profit: $13.7277


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_15     linear  ...  continuous         1
1  profit_26     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.24
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.24
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.088820434879872

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.831774686346579

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506356

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 6.83
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 15: t11:5.768kWh*$0.200=$1.1536 + t12:7.200kWh*$0.200=$1.4400 + t13:4.808kWh*$0.200=$0.9616 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:7.238kWh*$0.200=$1.4476 + t15:6.600kWh*$0.200=$1.3200 + t16:6.600kWh*$0.200=$1.3200 + t17:10.269kWh*$0.200=$2.0538 + t18:0.562kWh*$0.200=$0.1125
  Station 37: t18:2.719kWh*$0.500=$1.3593

Cost breakdown by time period:
  t11: s15:5.768kWh*$0.019=$0.1088 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:7.200kWh*$0.017=$0.1250 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:4.808kWh*$0.017=$0.0817 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:7.238kWh*$0.018=$0.1281
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:10.269kWh*$0.014=$0.1448
  t18: s26:0.562kWh*$0.012=$0.0066 + s37:2.719kWh*$0.012=$0.0317

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.0000
  Station 15: $3.9032
  Station 26: $8.4456
  Station 37: $1.3276

Total Revenue: $14.8056
Total Cost: $1.1292
Profit: $13.6764
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.0), '15': np.float64(3.9031956794820273), '26': np.float64(8.445643895666374), '37': np.float64(1.3275597994555213)}
Real profit: $12.3488

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $14.2438
 Real profit: $12.3488
 Improvement over base: $-1.3789 (-10.0%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_15         rf  ...  continuous         1
1  profit_26         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 152 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.38
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.478/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.408/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.38
Solution prices: 11:0.600, 14:0.600, 15:0.478, 26:0.408, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.4775009916484123, 26: 0.4075009988009697, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.604446600789071

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.277437510922493

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.708999366328541

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.60
EV 2: Objective = 11.28
EV 3: Objective = 6.71

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.4775009916484123), '26': np.float64(0.4075009988009697), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.478=$1.7005 + t12:0.508kWh*$0.478=$0.2426
  Station 26: t11:1.348kWh*$0.408=$0.5492 + t12:6.600kWh*$0.408=$2.6895 + t13:6.600kWh*$0.408=$2.6895 + t14:11.703kWh*$0.408=$4.7689 + t15:13.200kWh*$0.408=$5.3790 + t16:11.753kWh*$0.408=$4.7895 + t17:0.399kWh*$0.408=$0.1627

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.8671
  Station 26: $20.2104
  Station 37: $0.0000

Total Revenue: $27.6988
Total Cost: $1.0375
Profit: $26.6613
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740272), '15': np.float64(1.8670988355530715), '26': np.float64(20.210383938525336), '37': np.float64(0.0)}
Real profit: $22.0775

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $18.3790
 Real profit: $22.0775
 Improvement over base: $8.3497 (60.8%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_15        svm  ...  continuous         1
1  profit_26        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.41
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.41
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.088820434879872

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.831774686346579

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506356

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 6.83
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 15: t11:5.768kWh*$0.200=$1.1536 + t12:7.200kWh*$0.200=$1.4400 + t13:4.808kWh*$0.200=$0.9616 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:7.238kWh*$0.200=$1.4476 + t15:6.600kWh*$0.200=$1.3200 + t16:6.600kWh*$0.200=$1.3200 + t17:10.269kWh*$0.200=$2.0538 + t18:0.562kWh*$0.200=$0.1125
  Station 37: t18:2.719kWh*$0.500=$1.3593

Cost breakdown by time period:
  t11: s15:5.768kWh*$0.019=$0.1088 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:7.200kWh*$0.017=$0.1250 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:4.808kWh*$0.017=$0.0817 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:7.238kWh*$0.018=$0.1281
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:10.269kWh*$0.014=$0.1448
  t18: s26:0.562kWh*$0.012=$0.0066 + s37:2.719kWh*$0.012=$0.0317

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.0000
  Station 15: $3.9032
  Station 26: $8.4456
  Station 37: $1.3276

Total Revenue: $14.8056
Total Cost: $1.1292
Profit: $13.6764
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.0), '15': np.float64(3.9031956794820273), '26': np.float64(8.445643895666374), '37': np.float64(1.3275597994555213)}
Real profit: $12.3488

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $17.4056
 Real profit: $12.3488
 Improvement over base: $-1.3789 (-10.0%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_15       cart  ...  continuous         1
1  profit_26       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.69
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.446/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.490/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.69
Solution prices: 11:0.600, 14:0.600, 15:0.446, 26:0.490, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.4460009948670631, 26: 0.4895000010728836, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.097191404508752

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999533

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.635178991519275

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.10
EV 2: Objective = 12.46
EV 3: Objective = 8.64

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.4460009948670631), '26': np.float64(0.4895000010728836), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.992kWh*$0.600=$1.7950 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.446=$1.5883 + t12:3.600kWh*$0.446=$1.6056 + t13:3.600kWh*$0.446=$1.6056 + t14:3.600kWh*$0.446=$1.6056 + t15:0.039kWh*$0.446=$0.0173
  Station 37: t12:3.313kWh*$0.500=$1.6565 + t13:5.595kWh*$0.500=$2.7973 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:6.561kWh*$0.500=$3.2807 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:2.992kWh*$0.040=$0.1206
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:3.600kWh*$0.017=$0.0625 + s37:3.313kWh*$0.017=$0.0575
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:5.595kWh*$0.017=$0.0951
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:6.561kWh*$0.013=$0.0864
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.2811
  Station 15: $6.1673
  Station 26: $0.0000
  Station 37: $16.9082

Total Revenue: $31.4520
Total Cost: $1.0955
Profit: $30.3566
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.281083439862577), '15': np.float64(6.167269930427481), '26': np.float64(0.0), '37': np.float64(16.908218205823967)}
Real profit: $6.1673

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $26.6876
 Real profit: $6.1673
 Improvement over base: $-7.5605 (-55.1%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_15        gbm  ...  continuous         1
1  profit_26        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.12
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.498/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.12
Solution prices: 11:0.600, 14:0.600, 15:0.498, 26:0.443, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.49800099593994673, 26: 0.442500995224691, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.263345972950571

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.856253741346048

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.668257596788568

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.26
EV 2: Objective = 11.86
EV 3: Objective = 7.67

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.49800099593994673), '26': np.float64(0.442500995224691), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:5.310kWh*$0.498=$2.6446 + t12:4.108kWh*$0.498=$2.0458 + t13:3.600kWh*$0.498=$1.7928 + t14:3.600kWh*$0.498=$1.7928 + t15:1.503kWh*$0.498=$0.7483
  Station 26: t14:9.101kWh*$0.443=$4.0271 + t15:13.200kWh*$0.443=$5.8410 + t16:11.753kWh*$0.443=$5.2009 + t17:0.399kWh*$0.443=$0.1767

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:4.108kWh*$0.017=$0.0713
  t13: s15:3.600kWh*$0.017=$0.0612
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:9.101kWh*$0.018=$0.1610
  t15: s15:1.503kWh*$0.015=$0.0226 + s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.5073
  Station 15: $8.7053
  Station 26: $14.7260
  Station 37: $0.0000

Total Revenue: $29.9874
Total Cost: $1.0488
Profit: $28.9386
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.507296273740254), '15': np.float64(8.705322403716016), '26': np.float64(14.725965439408041), '37': np.float64(0.0)}
Real profit: $23.4313

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $24.1174
 Real profit: $23.4313
 Improvement over base: $9.7035 (70.7%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.87
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.634/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.405/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.87
Solution prices: 11:0.600, 14:0.600, 15:0.634, 26:0.405, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.6335388646219311, 26: 0.4053226783427281, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.177983389464394

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.24141330048815

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.79011454736993

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.18
EV 2: Objective = 11.24
EV 3: Objective = 7.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.6335388646219311), '26': np.float64(0.4053226783427281), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:1.887kWh*$0.600=$1.1323
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.634=$2.2561 + t12:0.508kWh*$0.634=$0.3219
  Station 26: t11:0.874kWh*$0.405=$0.3545 + t12:6.600kWh*$0.405=$2.6751 + t13:6.600kWh*$0.405=$2.6751 + t14:12.253kWh*$0.405=$4.9664 + t15:13.200kWh*$0.405=$5.3503 + t16:11.753kWh*$0.405=$4.7639 + t17:0.399kWh*$0.405=$0.1618

Cost breakdown by time period:
  t11: s11:1.887kWh*$0.019=$0.0356 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:0.874kWh*$0.019=$0.0165
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:12.253kWh*$0.018=$0.2168
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $1.0968
  Station 14: $4.5838
  Station 15: $2.5021
  Station 26: $20.1283
  Station 37: $0.0000

Total Revenue: $29.3849
Total Cost: $1.0739
Profit: $28.3110
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.0967517815168537), '14': np.float64(4.58381404373814), '15': np.float64(2.502058209624373), '26': np.float64(20.128344587442257), '37': np.float64(0.0)}
Real profit: $22.6304

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $25.8668
 Real profit: $22.6304
 Improvement over base: $8.9027 (64.9%)
✓ Completed combination 13/31

PROGRESS: Combination 14/31 - [15, 37]
Remaining: 17 combinations


============================================================
EXPERIMENT: Controlled stations [15, 37]
============================================================

Creating synthetic aggregator data for stations [15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [15, 37]
Competitor stations: [11, 14, 26]
Base case profit: $23.6763


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_15     linear  ...  continuous         1
1  profit_37     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.20
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.20
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 3.93746946058661

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.386279237546283

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.491655414293287

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 3.94
EV 2: Objective = 6.39
EV 3: Objective = 4.49

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t16:1.650kWh*$0.600=$0.9900
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:7.161kWh*$0.200=$1.4322 + t12:6.146kWh*$0.200=$1.2293 + t13:3.600kWh*$0.200=$0.7200 + t14:2.338kWh*$0.200=$0.4676 + t15:3.600kWh*$0.200=$0.7200 + t16:3.600kWh*$0.200=$0.7200 + t17:3.600kWh*$0.200=$0.7200 + t18:2.977kWh*$0.200=$0.5955
  Station 37: t10:1.768kWh*$0.200=$0.3536 + t11:3.600kWh*$0.200=$0.7200 + t12:3.600kWh*$0.200=$0.7200 + t13:0.193kWh*$0.200=$0.0385 + t14:3.600kWh*$0.200=$0.7200 + t15:3.600kWh*$0.200=$0.7200 + t16:3.600kWh*$0.200=$0.7200 + t17:6.584kWh*$0.200=$1.3168 + t18:3.600kWh*$0.200=$0.7200 + t19:3.600kWh*$0.200=$0.7200 + t20:3.600kWh*$0.200=$0.7200 + t21:0.449kWh*$0.200=$0.0898

Cost breakdown by time period:
  t16: s14:1.650kWh*$0.013=$0.0217 + s15:3.600kWh*$0.013=$0.0474 + s37:3.600kWh*$0.013=$0.0474
  t10: s15:1.396kWh*$0.040=$0.0563 + s37:1.768kWh*$0.040=$0.0713
  t11: s15:7.161kWh*$0.019=$0.1350 + s37:3.600kWh*$0.019=$0.0679
  t12: s15:6.146kWh*$0.017=$0.1067 + s37:3.600kWh*$0.017=$0.0625
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:0.193kWh*$0.017=$0.0033
  t14: s15:2.338kWh*$0.018=$0.0414 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:3.600kWh*$0.015=$0.0541 + s37:3.600kWh*$0.015=$0.0541
  t17: s15:3.600kWh*$0.014=$0.0508 + s37:6.584kWh*$0.014=$0.0928
  t18: s15:2.977kWh*$0.012=$0.0347 + s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.449kWh*$0.062=$0.0279

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.9683
  Station 15: $6.2963
  Station 26: $0.0000
  Station 37: $6.9026

Total Revenue: $15.4327
Total Cost: $1.2655
Profit: $14.1672
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.9682803899999999), '15': np.float64(6.296317338661073), '26': np.float64(0.0), '37': np.float64(6.902616672322498)}
Real profit: $13.1989

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $13.2014
 Real profit: $13.1989
 Improvement over base: $-10.4773 (-44.3%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_15         rf  ...  continuous         1
1  profit_37         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 152 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.16
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.337/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.497/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.16
Solution prices: 11:0.600, 14:0.600, 15:0.337, 26:0.600, 37:0.497

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.33650000393390656, 26: 0.6, 37: 0.4970009939133888}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.565865491599608

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.368295192204489

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.401011788265503

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.57
EV 2: Objective = 12.37
EV 3: Objective = 8.40

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.33650000393390656), '26': np.float64(0.6), '37': np.float64(0.4970009939133888)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.204kWh*$0.600=$0.7225 + t16:6.256kWh*$0.600=$3.7534
  Station 14: t16:1.650kWh*$0.600=$0.9900
  Station 15: t10:4.474kWh*$0.337=$1.5056 + t11:10.761kWh*$0.337=$3.6211 + t12:10.800kWh*$0.337=$3.6342 + t13:9.627kWh*$0.337=$3.2394 + t14:5.804kWh*$0.337=$1.9529 + t15:0.039kWh*$0.337=$0.0131
  Station 37: t16:2.674kWh*$0.497=$1.3292 + t17:5.887kWh*$0.497=$2.9259 + t18:3.600kWh*$0.497=$1.7892 + t19:3.600kWh*$0.497=$1.7892 + t20:3.600kWh*$0.497=$1.7892 + t21:0.927kWh*$0.497=$0.4609

Cost breakdown by time period:
  t15: s11:1.204kWh*$0.015=$0.0181 + s15:0.039kWh*$0.015=$0.0006
  t16: s11:6.256kWh*$0.013=$0.0823 + s14:1.650kWh*$0.013=$0.0217 + s37:2.674kWh*$0.013=$0.0352
  t10: s15:4.474kWh*$0.040=$0.1804
  t11: s15:10.761kWh*$0.019=$0.2029
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:9.627kWh*$0.017=$0.1636
  t14: s15:5.804kWh*$0.018=$0.1027
  t17: s37:5.887kWh*$0.014=$0.0830
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.927kWh*$0.062=$0.0577

Profit breakdown by station:
  Station 11: $4.3755
  Station 14: $0.9683
  Station 15: $13.1285
  Station 26: $0.0000
  Station 37: $9.7424

Total Revenue: $29.5158
Total Cost: $1.3011
Profit: $28.2147
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.375529223736416), '14': np.float64(0.9682803899999999), '15': np.float64(13.128523198510717), '26': np.float64(0.0), '37': np.float64(9.742351011644088)}
Real profit: $22.8709

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $16.1558
 Real profit: $22.8709
 Improvement over base: $-0.8054 (-3.4%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_15        svm  ...  continuous         1
1  profit_37        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.78
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.78
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 3.93746946058661

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.386279237546283

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.491655414293287

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 3.94
EV 2: Objective = 6.39
EV 3: Objective = 4.49

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t16:1.650kWh*$0.600=$0.9900
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:7.161kWh*$0.200=$1.4322 + t12:6.146kWh*$0.200=$1.2293 + t13:3.600kWh*$0.200=$0.7200 + t14:2.338kWh*$0.200=$0.4676 + t15:3.600kWh*$0.200=$0.7200 + t16:3.600kWh*$0.200=$0.7200 + t17:3.600kWh*$0.200=$0.7200 + t18:2.977kWh*$0.200=$0.5955
  Station 37: t10:1.768kWh*$0.200=$0.3536 + t11:3.600kWh*$0.200=$0.7200 + t12:3.600kWh*$0.200=$0.7200 + t13:0.193kWh*$0.200=$0.0385 + t14:3.600kWh*$0.200=$0.7200 + t15:3.600kWh*$0.200=$0.7200 + t16:3.600kWh*$0.200=$0.7200 + t17:6.584kWh*$0.200=$1.3168 + t18:3.600kWh*$0.200=$0.7200 + t19:3.600kWh*$0.200=$0.7200 + t20:3.600kWh*$0.200=$0.7200 + t21:0.449kWh*$0.200=$0.0898

Cost breakdown by time period:
  t16: s14:1.650kWh*$0.013=$0.0217 + s15:3.600kWh*$0.013=$0.0474 + s37:3.600kWh*$0.013=$0.0474
  t10: s15:1.396kWh*$0.040=$0.0563 + s37:1.768kWh*$0.040=$0.0713
  t11: s15:7.161kWh*$0.019=$0.1350 + s37:3.600kWh*$0.019=$0.0679
  t12: s15:6.146kWh*$0.017=$0.1067 + s37:3.600kWh*$0.017=$0.0625
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:0.193kWh*$0.017=$0.0033
  t14: s15:2.338kWh*$0.018=$0.0414 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:3.600kWh*$0.015=$0.0541 + s37:3.600kWh*$0.015=$0.0541
  t17: s15:3.600kWh*$0.014=$0.0508 + s37:6.584kWh*$0.014=$0.0928
  t18: s15:2.977kWh*$0.012=$0.0347 + s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.449kWh*$0.062=$0.0279

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.9683
  Station 15: $6.2963
  Station 26: $0.0000
  Station 37: $6.9026

Total Revenue: $15.4327
Total Cost: $1.2655
Profit: $14.1672
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.9682803899999999), '15': np.float64(6.296317338661073), '26': np.float64(0.0), '37': np.float64(6.902616672322498)}
Real profit: $13.1989

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $16.7823
 Real profit: $13.1989
 Improvement over base: $-10.4773 (-44.3%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_15       cart  ...  continuous         1
1  profit_37       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.75
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.514/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.400/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.75
Solution prices: 11:0.600, 14:0.600, 15:0.514, 26:0.600, 37:0.400

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5139999985694885, 26: 0.6, 37: 0.3995000123977661}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.536448676706419

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.072283183386704

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.8840784931964984

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.54
EV 2: Objective = 11.07
EV 3: Objective = 7.88

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5139999985694885), '26': np.float64(0.6), '37': np.float64(0.3995000123977661)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.514=$2.7295 + t12:6.146kWh*$0.514=$3.1593 + t13:3.600kWh*$0.514=$1.8504 + t14:3.600kWh*$0.514=$1.8504 + t15:1.503kWh*$0.514=$0.7723
  Station 37: t13:2.161kWh*$0.400=$0.8635 + t14:7.200kWh*$0.400=$2.8764 + t15:7.200kWh*$0.400=$2.8764 + t16:7.200kWh*$0.400=$2.8764 + t17:5.039kWh*$0.400=$2.0129

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:2.161kWh*$0.017=$0.0367
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $10.0076
  Station 26: $0.0000
  Station 37: $11.0675

Total Revenue: $28.6383
Total Cost: $1.0331
Profit: $27.6052
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534996241), '15': np.float64(10.007572047543391), '26': np.float64(0.0), '37': np.float64(11.06747739092835)}
Real profit: $21.0750

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $26.7501
 Real profit: $21.0750
 Improvement over base: $-2.6012 (-11.0%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_15        gbm  ...  continuous         1
1  profit_37        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.08
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.498/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.08
Solution prices: 11:0.600, 14:0.600, 15:0.498, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.49800099593994673, 26: 0.6, 37: 0.44050100607273635}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.606619633118676

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.63908091994941

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.668257596788568

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.61
EV 2: Objective = 11.64
EV 3: Objective = 7.67

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.49800099593994673), '26': np.float64(0.6), '37': np.float64(0.44050100607273635)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.498=$2.6446 + t12:7.200kWh*$0.498=$3.5856 + t13:3.796kWh*$0.498=$1.8902 + t14:3.600kWh*$0.498=$1.7928 + t15:1.503kWh*$0.498=$0.7483
  Station 37: t13:1.995kWh*$0.441=$0.8787 + t14:6.249kWh*$0.441=$2.7527 + t15:7.200kWh*$0.441=$3.1716 + t16:7.200kWh*$0.441=$3.1716 + t17:5.205kWh*$0.441=$2.2930 + t18:0.951kWh*$0.441=$0.4190

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:3.796kWh*$0.017=$0.0645 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:6.249kWh*$0.018=$0.1106
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.205kWh*$0.014=$0.0734
  t18: s37:0.951kWh*$0.012=$0.0111

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $10.2855
  Station 26: $0.0000
  Station 37: $12.2545

Total Revenue: $30.1187
Total Cost: $1.0485
Profit: $29.0702
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534996181), '15': np.float64(10.285484952350933), '26': np.float64(0.0), '37': np.float64(12.254528803848629)}
Real profit: $22.5400

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $22.0847
 Real profit: $22.5400
 Improvement over base: $-1.1362 (-4.8%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.29
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.495/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.29
Solution prices: 11:0.600, 14:0.600, 15:0.495, 26:0.600, 37:0.460

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.4950589154768439, 26: 0.6, 37: 0.460497699417163}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.26862255359689

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.915515208742221

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.628569970155631

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.27
EV 2: Objective = 11.92
EV 3: Objective = 7.63

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.4950589154768439), '26': np.float64(0.6), '37': np.float64(0.460497699417163)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.495=$2.6289 + t12:6.146kWh*$0.495=$3.0429 + t13:3.600kWh*$0.495=$1.7822 + t14:3.600kWh*$0.495=$1.7822 + t15:1.503kWh*$0.495=$0.7438
  Station 37: t13:2.161kWh*$0.460=$0.9953 + t14:7.200kWh*$0.460=$3.3156 + t15:7.200kWh*$0.460=$3.3156 + t16:7.200kWh*$0.460=$3.3156 + t17:5.039kWh*$0.460=$2.3203

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:2.161kWh*$0.017=$0.0367
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $9.6257
  Station 26: $0.0000
  Station 37: $12.8242

Total Revenue: $30.0132
Total Cost: $1.0331
Profit: $28.9801
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534995611), '15': np.float64(9.625731764724103), '26': np.float64(0.0), '37': np.float64(12.824210777086863)}
Real profit: $22.4499

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $22.2869
 Real profit: $22.4499
 Improvement over base: $-1.2263 (-5.2%)
✓ Completed combination 14/31

PROGRESS: Combination 15/31 - [26, 37]
Remaining: 16 combinations


============================================================
EXPERIMENT: Controlled stations [26, 37]
============================================================

Creating synthetic aggregator data for stations [26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [26, 37]
Competitor stations: [11, 14, 15]
Base case profit: $9.9485


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_26     linear  ...  continuous         1
1  profit_37     linear  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $12.97
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $12.97
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.260768605199619

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.593320602985711

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506305

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.26
EV 2: Objective = 8.59
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.037kWh*$0.600=$2.4224
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:11.575kWh*$0.200=$2.3149 + t13:13.200kWh*$0.200=$2.6400 + t14:14.675kWh*$0.200=$2.9351 + t15:10.196kWh*$0.200=$2.0392 + t16:5.153kWh*$0.200=$1.0307
  Station 37: t16:2.719kWh*$0.800=$2.1748

Cost breakdown by time period:
  t11: s11:4.037kWh*$0.019=$0.0761 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:11.575kWh*$0.017=$0.2010
  t13: s26:13.200kWh*$0.017=$0.2244
  t14: s26:14.675kWh*$0.018=$0.2597
  t15: s26:10.196kWh*$0.015=$0.1532
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $2.3463
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $10.2980
  Station 37: $2.1390

Total Revenue: $17.8613
Total Cost: $1.1194
Profit: $16.7419
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.346270111646251), '14': np.float64(0.0), '15': np.float64(1.9586532510815569), '26': np.float64(10.29798623219696), '37': np.float64(2.139019512358212)}
Real profit: $12.4370

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $12.9743
 Real profit: $12.4370
 Improvement over base: $2.4885 (25.0%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_26         rf  ...  continuous         1
1  profit_37         rf  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 152 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.12
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.459/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.500/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.12
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.459, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.45850099784729537, 37: 0.49950000643730164}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.53575684586378

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.120855517090998

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.548651201026668

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.54
EV 2: Objective = 12.12
EV 3: Objective = 7.55

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.45850099784729537), '37': np.float64(0.49950000643730164)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.459=$0.6179 + t12:6.600kWh*$0.459=$3.0261 + t13:6.600kWh*$0.459=$3.0261 + t14:11.703kWh*$0.459=$5.3657 + t15:13.200kWh*$0.459=$6.0522 + t16:11.753kWh*$0.459=$5.3889 + t17:0.399kWh*$0.459=$0.1831

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $22.8421
  Station 37: $0.0000

Total Revenue: $30.4221
Total Cost: $1.0375
Profit: $29.3846
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740272), '15': np.float64(1.9586532510813672), '26': np.float64(22.842142112519287), '37': np.float64(0.0)}
Real profit: $22.8421

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $19.1176
 Real profit: $22.8421
 Improvement over base: $12.8936 (129.6%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_26        svm  ...  continuous         1
1  profit_37        svm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 2 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $15.04
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $15.04
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.260768605199619

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.593320602985711

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506305

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.26
EV 2: Objective = 8.59
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.037kWh*$0.600=$2.4224
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:11.575kWh*$0.200=$2.3149 + t13:13.200kWh*$0.200=$2.6400 + t14:14.675kWh*$0.200=$2.9351 + t15:10.196kWh*$0.200=$2.0392 + t16:5.153kWh*$0.200=$1.0307
  Station 37: t16:2.719kWh*$0.800=$2.1748

Cost breakdown by time period:
  t11: s11:4.037kWh*$0.019=$0.0761 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:11.575kWh*$0.017=$0.2010
  t13: s26:13.200kWh*$0.017=$0.2244
  t14: s26:14.675kWh*$0.018=$0.2597
  t15: s26:10.196kWh*$0.015=$0.1532
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $2.3463
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $10.2980
  Station 37: $2.1390

Total Revenue: $17.8613
Total Cost: $1.1194
Profit: $16.7419
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.346270111646251), '14': np.float64(0.0), '15': np.float64(1.9586532510815569), '26': np.float64(10.29798623219696), '37': np.float64(2.139019512358212)}
Real profit: $12.4370

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $15.0429
 Real profit: $12.4370
 Improvement over base: $2.4885 (25.0%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_26       cart  ...  continuous         1
1  profit_37       cart  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 6 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $29.10
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $29.10
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.439, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.4385010020196205, 37: 0.442500995224691}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.048807409452786

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.666728769984942

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.219376034267679

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 11.67
EV 3: Objective = 7.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4385010020196205), '37': np.float64(0.442500995224691)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t11:1.348kWh*$0.439=$0.5909 + t12:6.600kWh*$0.439=$2.8941 + t13:6.600kWh*$0.439=$2.8941 + t14:2.602kWh*$0.439=$1.1410
  Station 37: t13:2.161kWh*$0.443=$0.9564 + t14:7.200kWh*$0.443=$3.1860 + t15:7.200kWh*$0.443=$3.1860 + t16:7.200kWh*$0.443=$3.1860 + t17:5.039kWh*$0.443=$2.2296

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:2.161kWh*$0.017=$0.0367
  t14: s26:2.602kWh*$0.018=$0.0460 + s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.6067
  Station 15: $2.9424
  Station 26: $7.2219
  Station 37: $12.3059

Total Revenue: $29.0989
Total Cost: $1.0219
Profit: $28.0770
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.6067093049951096), '15': np.float64(2.9424478455032568), '26': np.float64(7.221928008268725), '37': np.float64(12.305905696343661)}
Real profit: $19.5278

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $29.1040
 Real profit: $19.5278
 Improvement over base: $9.5793 (96.3%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_26        gbm  ...  continuous         1
1  profit_37        gbm  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 122 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.48
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.48
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.443, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.442500995224691, 37: 0.4425009952246906}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.048807409452628

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.66672876998599

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.347115188225864

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 11.67
EV 3: Objective = 8.35

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.442500995224691), '37': np.float64(0.4425009952246906)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.787kWh*$0.600=$1.0721 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t12:5.006kWh*$0.443=$2.2150 + t13:6.600kWh*$0.443=$2.9205 + t14:5.621kWh*$0.443=$2.4873
  Station 37: t13:2.161kWh*$0.443=$0.9564 + t14:7.200kWh*$0.443=$3.1860 + t15:7.200kWh*$0.443=$3.1860 + t16:7.200kWh*$0.443=$3.1860 + t17:5.039kWh*$0.443=$2.2296

Cost breakdown by time period:
  t10: s14:1.787kWh*$0.040=$0.0720
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s26:5.006kWh*$0.017=$0.0869
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:2.161kWh*$0.017=$0.0367
  t14: s26:5.621kWh*$0.018=$0.0995 + s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.6068
  Station 15: $2.9424
  Station 26: $7.3243
  Station 37: $12.3059

Total Revenue: $30.2736
Total Cost: $1.0942
Profit: $29.1794
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.606766584961678), '15': np.float64(2.9424478455031746), '26': np.float64(7.324253105113583), '37': np.float64(12.305905696343562)}
Real profit: $19.6302

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $25.4753
 Real profit: $19.6302
 Improvement over base: $9.6817 (97.3%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_26        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 602 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.46
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.387/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.352/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.46
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.387, 37:0.352

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.386945328949101, 37: 0.35211887486168736}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.799364977554543

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.508243455995547

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.370575714812328

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.80
EV 2: Objective = 10.51
EV 3: Objective = 6.37

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.386945328949101), '37': np.float64(0.35211887486168736)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.180kWh*$0.600=$2.5080
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t11:1.348kWh*$0.387=$0.5215 + t12:6.600kWh*$0.387=$2.5538 + t13:6.600kWh*$0.387=$2.5538 + t14:2.602kWh*$0.387=$1.0069 + t18:4.221kWh*$0.387=$1.6332 + t19:4.482kWh*$0.387=$1.7344
  Station 37: t13:3.214kWh*$0.352=$1.1318 + t14:7.200kWh*$0.352=$2.5353 + t15:7.200kWh*$0.352=$2.5353 + t16:7.200kWh*$0.352=$2.5353 + t17:3.986kWh*$0.352=$1.4034

Cost breakdown by time period:
  t11: s14:4.180kWh*$0.019=$0.0788 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:2.546kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.214kWh*$0.017=$0.0546
  t14: s26:2.602kWh*$0.018=$0.0460 + s37:7.200kWh*$0.018=$0.1274
  t18: s26:4.221kWh*$0.012=$0.0492
  t19: s26:4.482kWh*$0.015=$0.0659
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.986kWh*$0.014=$0.0562

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.4292
  Station 15: $2.9424
  Station 26: $9.5902
  Station 37: $9.6999

Total Revenue: $25.7064
Total Cost: $1.0448
Profit: $24.6617
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.429161502510736), '15': np.float64(2.9424478455031755), '26': np.float64(9.590204578883212), '37': np.float64(9.699850393365205)}
Real profit: $19.2901

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $21.4555
 Real profit: $19.2901
 Improvement over base: $9.3416 (93.9%)
✓ Completed combination 15/31

PROGRESS: Combination 16/31 - [11, 14, 15]
Remaining: 15 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 15]
============================================================

Creating synthetic aggregator data for stations [11, 14, 15]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 15]
Competitor stations: [26, 37]
Base case profit: $20.2579


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_15     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.89
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.89
Solution prices: 11:0.200, 14:0.200, 15:0.200, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.2, 15: 0.2, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.438573688693212

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 7.003439081386441

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.014729382293056

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.44
EV 2: Objective = 7.00
EV 3: Objective = 3.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.2), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:2.185kWh*$0.200=$0.4370 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:6.001kWh*$0.200=$1.2002
  Station 14: t10:7.345kWh*$0.200=$1.4690 + t11:6.600kWh*$0.200=$1.3200 + t12:2.992kWh*$0.200=$0.5984 + t17:5.086kWh*$0.200=$1.0172 + t18:6.600kWh*$0.200=$1.3200 + t19:3.404kWh*$0.200=$0.6809
  Station 15: t11:1.749kWh*$0.200=$0.3498 + t12:3.600kWh*$0.200=$0.7200 + t13:4.333kWh*$0.200=$0.8666 + t14:7.200kWh*$0.200=$1.4400 + t15:2.227kWh*$0.200=$0.4454
  Station 37: t16:1.989kWh*$0.500=$0.9944 + t17:1.204kWh*$0.500=$0.6019

Cost breakdown by time period:
  t11: s11:2.185kWh*$0.019=$0.0412 + s14:6.600kWh*$0.019=$0.1245 + s15:1.749kWh*$0.019=$0.0330
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:2.992kWh*$0.017=$0.0520 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:6.600kWh*$0.017=$0.1122 + s15:4.333kWh*$0.017=$0.0736
  t14: s11:6.001kWh*$0.018=$0.1062 + s15:7.200kWh*$0.018=$0.1274
  t10: s14:7.345kWh*$0.040=$0.2961
  t17: s14:5.086kWh*$0.014=$0.0717 + s37:1.204kWh*$0.014=$0.0170
  t18: s14:6.600kWh*$0.012=$0.0769
  t19: s14:3.404kWh*$0.015=$0.0501
  t15: s15:2.227kWh*$0.015=$0.0335
  t16: s37:1.989kWh*$0.013=$0.0262

Profit breakdown by station:
  Station 11: $3.9030
  Station 14: $5.7342
  Station 15: $3.4918
  Station 26: $0.0000
  Station 37: $1.5531

Total Revenue: $16.1008
Total Cost: $1.4186
Profit: $14.6822
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.903000076493675), '14': np.float64(5.734240147730496), '15': np.float64(3.491808794840375), '26': np.float64(0.0), '37': np.float64(1.5531113227745919)}
Real profit: $13.1290

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $14.8918
 Real profit: $13.1290
 Improvement over base: $-7.1289 (-35.2%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_15         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.00
Charging prices:
  Station 11 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.796/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.00
Solution prices: 11:0.797, 14:0.800, 15:0.796, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7965009973704584, 14: 0.7995010183512936, 15: 0.7955010102450617, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.576298702899342

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.810575470084697

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.208138930869621

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.58
EV 2: Objective = 15.81
EV 3: Objective = 9.21

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7965009973704584), '14': np.float64(0.7995010183512936), '15': np.float64(0.7955010102450617), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.037kWh*$0.797=$3.2157
  Station 14: t10:2.992kWh*$0.800=$2.3918
  Station 15: t11:3.561kWh*$0.796=$2.8329 + t12:2.546kWh*$0.796=$2.0257
  Station 26: t12:4.975kWh*$0.600=$2.9848 + t13:5.115kWh*$0.600=$3.0688
  Station 37: t12:3.313kWh*$0.500=$1.6565 + t13:3.767kWh*$0.500=$1.8834 + t14:9.499kWh*$0.500=$4.7494 + t15:10.800kWh*$0.500=$5.4000 + t16:7.487kWh*$0.500=$3.7435 + t17:7.033kWh*$0.500=$3.5166 + t18:1.301kWh*$0.500=$0.6506

Cost breakdown by time period:
  t11: s11:4.037kWh*$0.019=$0.0761 + s15:3.561kWh*$0.019=$0.0672
  t10: s14:2.992kWh*$0.040=$0.1206
  t12: s15:2.546kWh*$0.017=$0.0442 + s26:4.975kWh*$0.017=$0.0864 + s37:3.313kWh*$0.017=$0.0575
  t13: s26:5.115kWh*$0.017=$0.0869 + s37:3.767kWh*$0.017=$0.0640
  t14: s37:9.499kWh*$0.018=$0.1681
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:1.301kWh*$0.012=$0.0152

Profit breakdown by station:
  Station 11: $3.1396
  Station 14: $2.2712
  Station 15: $4.7473
  Station 26: $5.8803
  Station 37: $20.9352

Total Revenue: $38.1198
Total Cost: $1.1462
Profit: $36.9736
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.1396116696524055), '14': np.float64(2.271207405023327), '15': np.float64(4.747265607412357), '26': np.float64(5.880274017393494), '37': np.float64(20.935223399613605)}
Real profit: $10.1581

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $19.0046
 Real profit: $10.1581
 Improvement over base: $-10.0999 (-49.9%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_15        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $14.91
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $14.91
Solution prices: 11:0.800, 14:0.800, 15:0.200, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.2, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.6964736514667695

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.709698093866585

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.9651293822933242

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.70
EV 2: Objective = 10.71
EV 3: Objective = 3.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t16:1.650kWh*$0.800=$1.3200
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:8.910kWh*$0.200=$1.7821 + t12:10.800kWh*$0.200=$2.1600 + t13:10.800kWh*$0.200=$2.1600 + t14:9.404kWh*$0.200=$1.8807 + t15:1.541kWh*$0.200=$0.3083
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:6.096kWh*$0.500=$3.0480 + t18:3.600kWh*$0.500=$1.8000 + t19:3.600kWh*$0.500=$1.8000 + t20:3.600kWh*$0.500=$1.8000 + t21:0.449kWh*$0.500=$0.2245

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665 + s15:1.396kWh*$0.040=$0.0563
  t16: s14:1.650kWh*$0.013=$0.0217 + s37:2.674kWh*$0.013=$0.0352
  t11: s15:8.910kWh*$0.019=$0.1680
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:9.404kWh*$0.018=$0.1664
  t15: s15:1.541kWh*$0.015=$0.0232
  t17: s37:6.096kWh*$0.014=$0.0860
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.449kWh*$0.062=$0.0279

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.5518
  Station 15: $7.7854
  Station 26: $0.0000
  Station 37: $9.6954

Total Revenue: $21.2201
Total Cost: $1.1876
Profit: $20.0325
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.5517626200000003), '15': np.float64(7.785351181297622), '26': np.float64(0.0), '37': np.float64(9.695381654683292)}
Real profit: $10.3371

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $14.9131
 Real profit: $10.3371
 Improvement over base: $-9.9208 (-49.0%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_15       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $28.40
Charging prices:
  Station 11 (AGGREGATOR): $0.508/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.547/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.487/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $28.40
Solution prices: 11:0.508, 14:0.547, 15:0.487, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.5075010226428276, 14: 0.5474999845027924, 15: 0.48650099498627236, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.657063406156784

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.97600530511114

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.612066580711969

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.66
EV 2: Objective = 11.98
EV 3: Objective = 7.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.5075010226428276), '14': np.float64(0.5474999845027924), '15': np.float64(0.48650099498627236), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.508=$2.6506 + t12:6.600kWh*$0.508=$3.3495 + t13:3.801kWh*$0.508=$1.9291
  Station 14: t11:4.558kWh*$0.547=$2.4957 + t12:5.076kWh*$0.547=$2.7793
  Station 15: t11:3.561kWh*$0.487=$1.7325 + t12:3.600kWh*$0.487=$1.7514 + t13:3.600kWh*$0.487=$1.7514 + t14:3.600kWh*$0.487=$1.7514 + t15:0.039kWh*$0.487=$0.0189
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:3.600kWh*$0.017=$0.0612 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $7.6515
  Station 14: $5.1009
  Station 15: $6.7505
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $30.4637
Total Cost: $1.0123
Profit: $29.4514
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(7.651515109519025), '14': np.float64(5.100886693653728), '15': np.float64(6.750469932144077), '26': np.float64(0.0), '37': np.float64(9.948502531172352)}
Real profit: $19.5029

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $28.4027
 Real profit: $19.5029
 Improvement over base: $-0.7551 (-3.7%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_15        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.61
Charging prices:
  Station 11 (AGGREGATOR): $0.367/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.458/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.524/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.61
Solution prices: 11:0.367, 14:0.458, 15:0.524, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.36650000512599945, 14: 0.4580009893834358, 15: 0.5235009954631096, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.981468149830745

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.743658686911594

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.497175998429295

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.98
EV 2: Objective = 10.74
EV 3: Objective = 5.50

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.36650000512599945), '14': np.float64(0.4580009893834358), '15': np.float64(0.5235009954631096), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.367=$1.9142 + t12:6.600kWh*$0.367=$2.4189 + t13:3.801kWh*$0.367=$1.3932
  Station 14: t11:4.558kWh*$0.458=$2.0878 + t12:6.600kWh*$0.458=$3.0228 + t13:6.600kWh*$0.458=$3.0228 + t14:1.910kWh*$0.458=$0.8747
  Station 15: t11:3.561kWh*$0.524=$1.8643 + t12:2.546kWh*$0.524=$1.3331
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.722kWh*$0.500=$1.8609 + t15:7.200kWh*$0.500=$3.6000 + t16:4.245kWh*$0.500=$2.1223 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:6.600kWh*$0.017=$0.1122 + s37:0.167kWh*$0.017=$0.0028
  t14: s14:1.910kWh*$0.018=$0.0338 + s37:3.722kWh*$0.018=$0.0659
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:4.245kWh*$0.013=$0.0559
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $5.4485
  Station 14: $8.6615
  Station 15: $3.0860
  Station 26: $0.0000
  Station 37: $9.1021

Total Revenue: $27.3149
Total Cost: $1.0168
Profit: $26.2981
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.4485040863078975), '14': np.float64(8.661509096879564), '15': np.float64(3.085983781299206), '26': np.float64(0.0), '37': np.float64(9.102107792414534)}
Real profit: $17.1960

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $26.6069
 Real profit: $17.1960
 Improvement over base: $-3.0619 (-15.1%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_15        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 333 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.34
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.416/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.466/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.34
Solution prices: 11:0.800, 14:0.416, 15:0.466, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.4160759859568138, 15: 0.4658571199658726, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.900400322213757

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.952052229705433

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.400357189676637

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.90
EV 2: Objective = 9.95
EV 3: Objective = 6.40

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.4160759859568138), '15': np.float64(0.4658571199658726), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:11.593kWh*$0.416=$4.8238 + t11:17.758kWh*$0.416=$7.3889 + t12:10.105kWh*$0.416=$4.2045 + t13:6.600kWh*$0.416=$2.7461 + t14:1.910kWh*$0.416=$0.7946
  Station 15: t13:3.423kWh*$0.466=$1.5948 + t14:3.600kWh*$0.466=$1.6771 + t15:0.724kWh*$0.466=$0.3375
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:2.633kWh*$0.500=$1.3167 + t17:1.204kWh*$0.500=$0.6019

Cost breakdown by time period:
  t10: s14:11.593kWh*$0.040=$0.4674
  t11: s14:17.758kWh*$0.019=$0.3349
  t12: s14:10.105kWh*$0.017=$0.1755
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:3.423kWh*$0.017=$0.0582
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.724kWh*$0.015=$0.0109 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:2.633kWh*$0.013=$0.0347
  t17: s37:1.204kWh*$0.014=$0.0170

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.8341
  Station 15: $3.4766
  Station 26: $0.0000
  Station 37: $3.6716

Total Revenue: $27.3467
Total Cost: $1.3644
Profit: $25.9823
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.834096768469347), '15': np.float64(3.4765782897673834), '26': np.float64(0.0), '37': np.float64(3.6716330236093753)}
Real profit: $22.3107

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $23.3419
 Real profit: $22.3107
 Improvement over base: $2.0527 (10.1%)
✓ Completed combination 16/31

PROGRESS: Combination 17/31 - [11, 14, 26]
Remaining: 14 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 26]
============================================================

Creating synthetic aggregator data for stations [11, 14, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 26]
Competitor stations: [15, 37]
Base case profit: $6.5302


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_26     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.28
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.28
Solution prices: 11:0.200, 14:0.800, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.8, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.260768605199915

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.151786645759119

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506465

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.26
EV 2: Objective = 6.15
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.615kWh*$0.200=$1.1229 + t12:6.600kWh*$0.200=$1.3200 + t13:2.599kWh*$0.200=$0.5199
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:6.600kWh*$0.200=$1.3200 + t16:7.288kWh*$0.200=$1.4575 + t17:6.600kWh*$0.200=$1.3200 + t18:6.600kWh*$0.200=$1.3200 + t19:1.892kWh*$0.200=$0.3785

Cost breakdown by time period:
  t11: s11:5.615kWh*$0.019=$0.1059 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s11:2.599kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1122
  t14: s26:8.075kWh*$0.018=$0.1429
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:7.288kWh*$0.013=$0.0959
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $2.6981
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $9.5326
  Station 37: $0.0000

Total Revenue: $15.3180
Total Cost: $1.1287
Profit: $14.1893
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.698097744945277), '14': np.float64(0.0), '15': np.float64(1.9586532510818522), '26': np.float64(9.532591286950261), '37': np.float64(0.0)}
Real profit: $12.2307

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $17.2846
 Real profit: $12.2307
 Improvement over base: $5.7005 (87.3%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_26         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.25
Charging prices:
  Station 11 (AGGREGATOR): $0.470/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.25
Solution prices: 11:0.470, 14:0.800, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4695009903371101, 14: 0.7995010183512936, 15: 0.5, 26: 0.42149999737739563, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.92384879437151

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.865237819458212

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.939475543944551

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.87
EV 3: Objective = 6.94

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4695009903371101), '14': np.float64(0.7995010183512936), '15': np.float64(0.5), '26': np.float64(0.42149999737739563), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2021
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5680 + t12:6.600kWh*$0.421=$2.7819 + t13:6.600kWh*$0.421=$2.7819 + t14:8.075kWh*$0.421=$3.4038 + t15:8.697kWh*$0.421=$3.6656 + t16:11.753kWh*$0.421=$4.9540 + t17:6.600kWh*$0.421=$2.7819 + t18:1.930kWh*$0.421=$0.8135
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1266
  Station 15: $1.9587
  Station 26: $20.9547
  Station 37: $2.8372

Total Revenue: $29.9256
Total Cost: $1.0485
Profit: $28.8771
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1265516425243733), '15': np.float64(1.958653251081725), '26': np.float64(20.95467792225055), '37': np.float64(2.837179967205053)}
Real profit: $24.0812

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $23.2504
 Real profit: $24.0812
 Improvement over base: $17.5510 (268.8%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_26        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.73
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.73
Solution prices: 11:0.800, 14:0.800, 15:0.500, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.5, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 5.260768605199902

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.204076160799904

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545061916

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 5.26
EV 2: Objective = 9.20
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2041
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:8.697kWh*$0.200=$1.7393 + t16:11.753kWh*$0.200=$2.3507 + t17:6.600kWh*$0.200=$1.3200 + t18:1.930kWh*$0.200=$0.3860
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1286
  Station 15: $1.9587
  Station 26: $9.5246
  Station 37: $2.8372

Total Revenue: $18.4975
Total Cost: $1.0485
Profit: $17.4490
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1285501118093255), '15': np.float64(1.9586532510818433), '26': np.float64(9.524590872477889), '37': np.float64(2.837179967204906)}
Real profit: $12.6531

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $17.7314
 Real profit: $12.6531
 Improvement over base: $6.1229 (93.8%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_26       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $34.94
Charging prices:
  Station 11 (AGGREGATOR): $0.532/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.440/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.490/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $34.94
Solution prices: 11:0.532, 14:0.440, 15:0.500, 26:0.490, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.5324999988079071, 14: 0.43950000405311584, 15: 0.5, 26: 0.4895000010728836, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.8436736514662

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.394332550832125

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.781127239175618

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 10.39
EV 3: Objective = 6.78

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.5324999988079071), '14': np.float64(0.43950000405311584), '15': np.float64(0.5), '26': np.float64(0.4895000010728836), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.440=$2.5923 + t11:11.158kWh*$0.440=$4.9041 + t12:7.113kWh*$0.440=$3.1262 + t13:6.600kWh*$0.440=$2.9007 + t14:1.910kWh*$0.440=$0.8394
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732 + t13:2.690kWh*$0.500=$1.3452
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.722kWh*$0.500=$1.8609 + t15:7.200kWh*$0.500=$3.6000 + t16:4.245kWh*$0.500=$2.1223 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:2.546kWh*$0.017=$0.0442
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:2.690kWh*$0.017=$0.0457 + s37:0.167kWh*$0.017=$0.0028
  t14: s14:1.910kWh*$0.018=$0.0338 + s37:3.722kWh*$0.018=$0.0659
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:4.245kWh*$0.013=$0.0559
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $13.6449
  Station 15: $4.2419
  Station 26: $0.0000
  Station 37: $9.1021

Total Revenue: $28.1449
Total Cost: $1.1560
Profit: $26.9890
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(13.64494270334933), '15': np.float64(4.24192584908437), '26': np.float64(0.0), '37': np.float64(9.102107792414305)}
Real profit: $13.6449

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $34.9391
 Real profit: $13.6449
 Improvement over base: $7.1148 (109.0%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_26        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $30.55
Charging prices:
  Station 11 (AGGREGATOR): $0.484/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.548/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $30.55
Solution prices: 11:0.484, 14:0.548, 15:0.500, 26:0.460, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4840000122785568, 14: 0.5475009844958549, 15: 0.5, 26: 0.4595009998738533, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.55229448765196

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.207629333330967

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.565114996163123

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.55
EV 2: Objective = 12.21
EV 3: Objective = 7.57

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4840000122785568), '14': np.float64(0.5475009844958549), '15': np.float64(0.5), '26': np.float64(0.4595009998738533), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.548=$2.4957 + t12:5.517kWh*$0.548=$3.0205
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.460=$0.6192 + t12:6.600kWh*$0.460=$3.0327 + t13:6.600kWh*$0.460=$3.0327 + t14:8.075kWh*$0.460=$3.7107 + t15:6.600kWh*$0.460=$3.0327 + t16:5.153kWh*$0.460=$2.3680
  Station 37: t14:1.692kWh*$0.500=$0.8460 + t15:3.600kWh*$0.500=$1.8000 + t16:3.600kWh*$0.500=$1.8000 + t17:3.600kWh*$0.500=$1.8000 + t18:1.908kWh*$0.500=$0.9540

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:5.517kWh*$0.017=$0.0958 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:1.692kWh*$0.018=$0.0299
  t15: s26:6.600kWh*$0.015=$0.0992 + s37:3.600kWh*$0.015=$0.0541
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:3.600kWh*$0.013=$0.0474
  t17: s37:3.600kWh*$0.014=$0.0508
  t18: s37:1.908kWh*$0.012=$0.0222

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.3345
  Station 15: $1.9587
  Station 26: $15.2339
  Station 37: $6.9956

Total Revenue: $30.5469
Total Cost: $1.0243
Profit: $29.5227
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.3345088425558345), '15': np.float64(1.9586532510817993), '26': np.float64(15.233915309589962), '37': np.float64(6.995584087714146)}
Real profit: $20.5684

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $30.5526
 Real profit: $20.5684
 Improvement over base: $14.0382 (215.0%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.94
Charging prices:
  Station 11 (AGGREGATOR): $0.616/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.94
Solution prices: 11:0.616, 14:0.800, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6158918157708406, 14: 0.8, 15: 0.5, 26: 0.4212065212088545, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.91899540045803

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.862302956058123

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.934643822220097

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.86
EV 3: Objective = 6.93

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6158918157708406), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.4212065212088545), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2041
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5676 + t12:6.600kWh*$0.421=$2.7800 + t13:6.600kWh*$0.421=$2.7800 + t14:8.075kWh*$0.421=$3.4014 + t15:8.697kWh*$0.421=$3.6631 + t16:11.753kWh*$0.421=$4.9506 + t17:6.600kWh*$0.421=$2.7800 + t18:1.930kWh*$0.421=$0.8129
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1286
  Station 15: $1.9587
  Station 26: $20.9395
  Station 37: $2.8372

Total Revenue: $29.9124
Total Cost: $1.0485
Profit: $28.8639
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1285501118089134), '15': np.float64(1.958653251081134), '26': np.float64(20.939533641468984), '37': np.float64(2.8371799672046953)}
Real profit: $24.0681

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $26.9351
 Real profit: $24.0681
 Improvement over base: $17.5379 (268.6%)
✓ Completed combination 17/31

PROGRESS: Combination 18/31 - [11, 14, 37]
Remaining: 13 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 37]
============================================================

Creating synthetic aggregator data for stations [11, 14, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 37]
Competitor stations: [15, 26]
Base case profit: $16.4787


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_37     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.09
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.09
Solution prices: 11:0.200, 14:0.200, 15:0.500, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.424185229546581

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.614665003999992

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.9998231495461063

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.42
EV 2: Objective = 4.61
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603
  Station 14: t11:8.677kWh*$0.200=$1.7354 + t12:9.600kWh*$0.200=$1.9201
  Station 37: t13:3.391kWh*$0.200=$0.6781 + t14:7.200kWh*$0.200=$1.4400 + t15:7.200kWh*$0.200=$1.4400 + t16:7.200kWh*$0.200=$1.4400 + t17:3.809kWh*$0.200=$0.7619

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:8.677kWh*$0.019=$0.1636
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:9.600kWh*$0.017=$0.1667
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:3.391kWh*$0.017=$0.0576
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.809kWh*$0.014=$0.0537

Profit breakdown by station:
  Station 11: $2.8471
  Station 14: $3.3251
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $5.3183

Total Revenue: $12.5403
Total Cost: $1.0498
Profit: $11.4905
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.847094868721288), '14': np.float64(3.3251163323900825), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(5.31831653696858)}
Real profit: $11.4905

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $18.0948
 Real profit: $11.4905
 Improvement over base: $-4.9882 (-30.3%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_37         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.93
Charging prices:
  Station 11 (AGGREGATOR): $0.339/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.93
Solution prices: 11:0.339, 14:0.800, 15:0.500, 26:0.600, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3385009930789238, 14: 0.8, 15: 0.5, 26: 0.6, 37: 0.7985010014235743}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.884061304639372

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.662422710056498

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.077215575913433

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.88
EV 2: Objective = 13.66
EV 3: Objective = 5.08

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3385009930789238), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.7985010014235743)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.339=$3.6684 + t12:13.200kWh*$0.339=$4.4682 + t13:10.401kWh*$0.339=$3.5208 + t14:0.278kWh*$0.339=$0.0941
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t17:10.789kWh*$0.600=$6.4736 + t18:7.162kWh*$0.600=$4.2974 + t19:1.892kWh*$0.600=$1.1354

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:0.278kWh*$0.018=$0.0049 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006
  t17: s26:10.789kWh*$0.014=$0.1521
  t18: s26:7.162kWh*$0.012=$0.0835
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $11.1362
  Station 14: $0.0000
  Station 15: $6.9449
  Station 26: $11.6430
  Station 37: $0.0000

Total Revenue: $30.8580
Total Cost: $1.1339
Profit: $29.7241
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(11.136245467903992), '14': np.float64(0.0), '15': np.float64(6.9448556043418), '26': np.float64(11.64298275079405), '37': np.float64(0.0)}
Real profit: $11.1362

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $22.9325
 Real profit: $11.1362
 Improvement over base: $-5.3424 (-32.4%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_37        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.35
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.35
Solution prices: 11:0.200, 14:0.200, 15:0.500, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.2, 15: 0.5, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.424185229546581

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.614665003999992

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.9998231495461063

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.42
EV 2: Objective = 4.61
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.2), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603
  Station 14: t11:8.677kWh*$0.200=$1.7354 + t12:9.600kWh*$0.200=$1.9201
  Station 37: t13:3.391kWh*$0.200=$0.6781 + t14:7.200kWh*$0.200=$1.4400 + t15:7.200kWh*$0.200=$1.4400 + t16:7.200kWh*$0.200=$1.4400 + t17:3.809kWh*$0.200=$0.7619

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:8.677kWh*$0.019=$0.1636
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:9.600kWh*$0.017=$0.1667
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:3.391kWh*$0.017=$0.0576
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.809kWh*$0.014=$0.0537

Profit breakdown by station:
  Station 11: $2.8471
  Station 14: $3.3251
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $5.3183

Total Revenue: $12.5403
Total Cost: $1.0498
Profit: $11.4905
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.847094868721288), '14': np.float64(3.3251163323900825), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(5.31831653696858)}
Real profit: $11.4905

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $18.3513
 Real profit: $11.4905
 Improvement over base: $-4.9882 (-30.3%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_37       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $29.13
Charging prices:
  Station 11 (AGGREGATOR): $0.434/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.542/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $29.13
Solution prices: 11:0.434, 14:0.542, 15:0.500, 26:0.600, 37:0.415

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.43400100035069045, 14: 0.5420009957015282, 15: 0.5, 26: 0.6, 37: 0.41450101298687514}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.661735654996669

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.615815448714477

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.811391306110294

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.66
EV 2: Objective = 11.62
EV 3: Objective = 7.81

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.43400100035069045), '14': np.float64(0.5420009957015282), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.41450101298687514)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.434=$2.1150 + t12:6.600kWh*$0.434=$2.8644 + t13:2.654kWh*$0.434=$1.1516
  Station 14: t10:3.229kWh*$0.542=$1.7500 + t11:0.771kWh*$0.542=$0.4180
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.415=$1.0033 + t13:3.767kWh*$0.415=$1.5613 + t14:9.499kWh*$0.415=$3.9373 + t15:10.800kWh*$0.415=$4.4766 + t16:8.379kWh*$0.415=$3.4733 + t17:7.033kWh*$0.415=$2.9153 + t18:1.301kWh*$0.415=$0.5393

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s14:0.771kWh*$0.019=$0.0145 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s11:2.654kWh*$0.017=$0.0451 + s37:3.767kWh*$0.017=$0.0640
  t10: s14:3.229kWh*$0.040=$0.1302
  t14: s37:9.499kWh*$0.018=$0.1681
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:1.301kWh*$0.012=$0.0152

Profit breakdown by station:
  Station 11: $5.8794
  Station 14: $2.0233
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $17.2454

Total Revenue: $29.2593
Total Cost: $1.1687
Profit: $28.0906
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(5.879374577750595), '14': np.float64(2.0233413835553464), '15': np.float64(2.94244784550271), '26': np.float64(0.0), '37': np.float64(17.245418208511865)}
Real profit: $25.1481

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $29.1295
 Real profit: $25.1481
 Improvement over base: $8.6694 (52.6%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_37        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $28.48
Charging prices:
  Station 11 (AGGREGATOR): $0.365/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.457/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $28.48
Solution prices: 11:0.365, 14:0.457, 15:0.500, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.36500099462864455, 14: 0.4565009937941795, 15: 0.5, 26: 0.6, 37: 0.44050100607273635}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.02115955941586

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.850199063264629

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.474692166472818

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.02
EV 2: Objective = 14.85
EV 3: Objective = 5.47

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.36500099462864455), '14': np.float64(0.4565009937941795), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.44050100607273635)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.365=$1.9063 + t12:6.600kWh*$0.365=$2.4090 + t13:3.801kWh*$0.365=$1.3875 + t14:0.966kWh*$0.365=$0.3527 + t15:6.600kWh*$0.365=$2.4090 + t16:6.600kWh*$0.365=$2.4090 + t17:6.600kWh*$0.365=$2.4090 + t18:1.005kWh*$0.365=$0.3666
  Station 15: t10:0.610kWh*$0.500=$0.3052 + t11:7.161kWh*$0.500=$3.5806 + t12:5.858kWh*$0.500=$2.9288
  Station 37: t13:0.167kWh*$0.441=$0.0735 + t14:3.600kWh*$0.441=$1.5858 + t15:3.600kWh*$0.441=$1.5858 + t16:3.600kWh*$0.441=$1.5858 + t17:3.433kWh*$0.441=$1.5124 + t19:3.198kWh*$0.441=$1.4089 + t20:3.600kWh*$0.441=$1.5858 + t21:1.742kWh*$0.441=$0.7672

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s15:7.161kWh*$0.019=$0.1350
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:5.858kWh*$0.017=$0.1017
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:0.167kWh*$0.017=$0.0028
  t14: s11:0.966kWh*$0.018=$0.0171 + s37:3.600kWh*$0.018=$0.0637
  t15: s11:6.600kWh*$0.015=$0.0992 + s37:3.600kWh*$0.015=$0.0541
  t16: s11:6.600kWh*$0.013=$0.0869 + s37:3.600kWh*$0.013=$0.0474
  t17: s11:6.600kWh*$0.014=$0.0931 + s37:3.433kWh*$0.014=$0.0484
  t18: s11:1.005kWh*$0.012=$0.0117
  t10: s15:0.610kWh*$0.040=$0.0246
  t19: s37:3.198kWh*$0.015=$0.0471
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:1.742kWh*$0.062=$0.1084

Profit breakdown by station:
  Station 11: $13.0636
  Station 14: $0.0000
  Station 15: $6.5532
  Station 26: $0.0000
  Station 37: $9.6628

Total Revenue: $30.5688
Total Cost: $1.2892
Profit: $29.2796
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(13.063552954038856), '14': np.float64(0.0), '15': np.float64(6.553204536544921), '26': np.float64(0.0), '37': np.float64(9.662841186543675)}
Real profit: $22.7264

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $28.4752
 Real profit: $22.7264
 Improvement over base: $6.2477 (37.9%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.14
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.481/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.605/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.14
Solution prices: 11:0.800, 14:0.481, 15:0.500, 26:0.600, 37:0.605

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.48075281938597986, 15: 0.5, 26: 0.6, 37: 0.604514317208188}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.557966515305477

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.712843184188337

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.296409859967544

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.56
EV 2: Objective = 11.71
EV 3: Objective = 7.30

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.48075281938597986), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.604514317208188)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.481=$2.8356 + t11:11.158kWh*$0.481=$5.3644 + t12:7.113kWh*$0.481=$3.4196 + t13:6.600kWh*$0.481=$3.1730 + t14:1.910kWh*$0.481=$0.9181
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:6.290kWh*$0.500=$3.1452 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t15:1.800kWh*$0.605=$1.0878 + t16:4.394kWh*$0.605=$2.6562 + t17:3.600kWh*$0.605=$2.1763 + t18:1.030kWh*$0.605=$0.6229

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:1.800kWh*$0.015=$0.0270
  t16: s37:4.394kWh*$0.013=$0.0578
  t17: s37:3.600kWh*$0.014=$0.0508
  t18: s37:1.030kWh*$0.012=$0.0120

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $14.9931
  Station 15: $8.2443
  Station 26: $0.0000
  Station 37: $6.3956

Total Revenue: $30.7992
Total Cost: $1.1662
Profit: $29.6330
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(14.993064751725434), '15': np.float64(8.244333607923444), '26': np.float64(0.0), '37': np.float64(6.395559620453599)}
Real profit: $21.3886

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $27.1426
 Real profit: $21.3886
 Improvement over base: $4.9099 (29.8%)
✓ Completed combination 18/31

PROGRESS: Combination 19/31 - [11, 15, 26]
Remaining: 12 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15, 26]
============================================================

Creating synthetic aggregator data for stations [11, 15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15, 26]
Competitor stations: [14, 37]
Base case profit: $13.7277


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1
2  profit_26     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.83
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.83
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.088820434879994

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.958317762133266

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546638

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 5.96
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:7.161kWh*$0.200=$1.4322 + t12:7.200kWh*$0.200=$1.4400 + t13:4.743kWh*$0.200=$0.9486 + t14:2.204kWh*$0.200=$0.4407
  Station 26: t15:4.309kWh*$0.200=$0.8618 + t16:6.600kWh*$0.200=$1.3200 + t17:2.083kWh*$0.200=$0.4165 + t18:4.747kWh*$0.200=$0.9493 + t19:6.600kWh*$0.200=$1.3200 + t20:5.286kWh*$0.200=$1.0572

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s15:7.161kWh*$0.019=$0.1350
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:4.743kWh*$0.017=$0.0806
  t10: s15:1.396kWh*$0.040=$0.0563
  t14: s15:2.204kWh*$0.018=$0.0390
  t15: s26:4.309kWh*$0.015=$0.0647
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:2.083kWh*$0.014=$0.0294
  t18: s26:4.747kWh*$0.012=$0.0553
  t19: s26:6.600kWh*$0.015=$0.0971
  t20: s26:5.286kWh*$0.020=$0.1033

Profit breakdown by station:
  Station 11: $2.8471
  Station 14: $0.0000
  Station 15: $4.1049
  Station 26: $5.4882
  Station 37: $0.0000

Total Revenue: $13.5906
Total Cost: $1.1504
Profit: $12.4402
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.847094868721758), '14': np.float64(0.0), '15': np.float64(4.104879935891035), '26': np.float64(5.488199440156468), '37': np.float64(0.0)}
Real profit: $12.4402

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $17.8275
 Real profit: $12.4402
 Improvement over base: $-1.2876 (-9.4%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1
2  profit_26         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.88
Charging prices:
  Station 11 (AGGREGATOR): $0.425/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.472/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.432/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.88
Solution prices: 11:0.425, 14:0.600, 15:0.472, 26:0.432, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4245000034570694, 14: 0.6, 15: 0.47200098795292433, 26: 0.4324999898672104, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.996384391379273

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.690861032404495

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.120576799796813

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.00
EV 2: Objective = 11.69
EV 3: Objective = 7.12

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4245000034570694), '14': np.float64(0.6), '15': np.float64(0.47200098795292433), '26': np.float64(0.4324999898672104), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.472=$1.6809 + t12:0.508kWh*$0.472=$0.2398
  Station 26: t11:1.348kWh*$0.432=$0.5829 + t12:6.600kWh*$0.432=$2.8545 + t13:6.600kWh*$0.432=$2.8545 + t14:11.703kWh*$0.432=$5.0615 + t15:13.200kWh*$0.432=$5.7090 + t16:11.753kWh*$0.432=$5.0833 + t17:0.399kWh*$0.432=$0.1727

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.8447
  Station 26: $21.5004
  Station 37: $0.0000

Total Revenue: $28.9665
Total Cost: $1.0375
Profit: $27.9289
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.5838140437402215), '15': np.float64(1.844717865875079), '26': np.float64(21.500409434808095), '37': np.float64(0.0)}
Real profit: $23.3451

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $22.8808
 Real profit: $23.3451
 Improvement over base: $9.6174 (70.1%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1
2  profit_26        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.66
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.66
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.088820434879994

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.958317762133266

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546638

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 5.96
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:7.161kWh*$0.200=$1.4322 + t12:7.200kWh*$0.200=$1.4400 + t13:4.743kWh*$0.200=$0.9486 + t14:2.204kWh*$0.200=$0.4407
  Station 26: t15:4.309kWh*$0.200=$0.8618 + t16:6.600kWh*$0.200=$1.3200 + t17:2.083kWh*$0.200=$0.4165 + t18:4.747kWh*$0.200=$0.9493 + t19:6.600kWh*$0.200=$1.3200 + t20:5.286kWh*$0.200=$1.0572

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s15:7.161kWh*$0.019=$0.1350
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:4.743kWh*$0.017=$0.0806
  t10: s15:1.396kWh*$0.040=$0.0563
  t14: s15:2.204kWh*$0.018=$0.0390
  t15: s26:4.309kWh*$0.015=$0.0647
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:2.083kWh*$0.014=$0.0294
  t18: s26:4.747kWh*$0.012=$0.0553
  t19: s26:6.600kWh*$0.015=$0.0971
  t20: s26:5.286kWh*$0.020=$0.1033

Profit breakdown by station:
  Station 11: $2.8471
  Station 14: $0.0000
  Station 15: $4.1049
  Station 26: $5.4882
  Station 37: $0.0000

Total Revenue: $13.5906
Total Cost: $1.1504
Profit: $12.4402
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.847094868721758), '14': np.float64(0.0), '15': np.float64(4.104879935891035), '26': np.float64(5.488199440156468), '37': np.float64(0.0)}
Real profit: $12.4402

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $18.6589
 Real profit: $12.4402
 Improvement over base: $-1.2876 (-9.4%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1
2  profit_26       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $31.00
Charging prices:
  Station 11 (AGGREGATOR): $0.433/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.446/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.392/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $31.00
Solution prices: 11:0.433, 14:0.600, 15:0.446, 26:0.392, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4330009983241325, 14: 0.6, 15: 0.4460009948670631, 26: 0.39200100464222487, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.225059223843765

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.021104679286156

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.4946320927477155

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.23
EV 2: Objective = 11.02
EV 3: Objective = 6.49

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4330009983241325), '14': np.float64(0.6), '15': np.float64(0.4460009948670631), '26': np.float64(0.39200100464222487), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.433=$2.2615 + t12:6.600kWh*$0.433=$2.8578 + t13:3.801kWh*$0.433=$1.6460
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.446=$1.5883 + t12:0.508kWh*$0.446=$0.2266
  Station 26: t14:9.101kWh*$0.392=$3.5675 + t15:13.200kWh*$0.392=$5.1744 + t16:11.753kWh*$0.392=$4.6073 + t17:0.399kWh*$0.392=$0.1565

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s26:9.101kWh*$0.018=$0.1610
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $6.4875
  Station 14: $4.5838
  Station 15: $1.7389
  Station 26: $12.9861
  Station 37: $0.0000

Total Revenue: $26.8133
Total Cost: $1.0170
Profit: $25.7963
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.487520851222876), '14': np.float64(4.583814043740201), '15': np.float64(1.7389170175238247), '26': np.float64(12.986071560116729), '37': np.float64(0.0)}
Real profit: $21.2125

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $31.0032
 Real profit: $21.2125
 Improvement over base: $7.4848 (54.5%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1
2  profit_26        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $28.36
Charging prices:
  Station 11 (AGGREGATOR): $0.484/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.561/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.422/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $28.36
Solution prices: 11:0.484, 14:0.600, 15:0.561, 26:0.422, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4840010122716194, 14: 0.6, 15: 0.5605009959399467, 26: 0.4215009973704582, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.160212103512881

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.508964003091862

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.259587205081816

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.16
EV 2: Objective = 11.51
EV 3: Objective = 7.26

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4840010122716194), '14': np.float64(0.6), '15': np.float64(0.5605009959399467), '26': np.float64(0.4215009973704582), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.484=$2.5278 + t12:6.600kWh*$0.484=$3.1944 + t13:3.801kWh*$0.484=$1.8398
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.561=$1.9960 + t12:0.508kWh*$0.561=$0.2848
  Station 26: t14:9.101kWh*$0.422=$3.8360 + t15:13.200kWh*$0.422=$5.5638 + t16:11.753kWh*$0.422=$4.9541 + t17:0.399kWh*$0.422=$0.1683

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s26:9.101kWh*$0.018=$0.1610
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $7.2843
  Station 14: $4.5838
  Station 15: $2.2048
  Station 26: $14.0024
  Station 37: $0.0000

Total Revenue: $29.0925
Total Cost: $1.0170
Profit: $28.0755
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(7.2843490932376005), '14': np.float64(4.583814043740202), '15': np.float64(2.2048478048815467), '26': np.float64(14.002445151378566), '37': np.float64(0.0)}
Real profit: $23.4916

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $28.3637
 Real profit: $23.4916
 Improvement over base: $9.7639 (71.1%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.22
Charging prices:
  Station 11 (AGGREGATOR): $0.456/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.756/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.401/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.22
Solution prices: 11:0.456, 14:0.600, 15:0.756, 26:0.401, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4558870306880227, 14: 0.6, 15: 0.755999490969625, 26: 0.401045352071334, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.585638333078998

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.170676554156131

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.661538001036213

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.59
EV 2: Objective = 11.17
EV 3: Objective = 7.66

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4558870306880227), '14': np.float64(0.6), '15': np.float64(0.755999490969625), '26': np.float64(0.401045352071334), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.787kWh*$0.600=$1.0721 + t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.756=$2.6922 + t12:0.508kWh*$0.756=$0.3841
  Station 26: t12:5.006kWh*$0.401=$2.0075 + t13:6.600kWh*$0.401=$2.6469 + t14:14.722kWh*$0.401=$5.9040 + t15:13.200kWh*$0.401=$5.2938 + t16:11.753kWh*$0.401=$4.7136 + t17:0.399kWh*$0.401=$0.1601

Cost breakdown by time period:
  t10: s14:1.787kWh*$0.040=$0.0720
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:5.006kWh*$0.017=$0.0869
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:14.722kWh*$0.018=$0.2605
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.5839
  Station 15: $3.0004
  Station 26: $19.9078
  Station 37: $0.0000

Total Revenue: $29.6019
Total Cost: $1.1099
Profit: $28.4920
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.583871323704836), '15': np.float64(3.0003828866537123), '26': np.float64(19.90778983455501), '37': np.float64(0.0)}
Real profit: $22.9082

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $27.2247
 Real profit: $22.9082
 Improvement over base: $9.1804 (66.9%)
✓ Completed combination 19/31

PROGRESS: Combination 20/31 - [11, 15, 37]
Remaining: 11 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15, 37]
============================================================

Creating synthetic aggregator data for stations [11, 15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15, 37]
Competitor stations: [14, 26]
Base case profit: $23.6763


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1
2  profit_37     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.36
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.36
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 3.9374694605865708

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.477122524799929

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546433

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 3.94
EV 2: Objective = 5.48
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.200=$2.0192 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:1.914kWh*$0.200=$0.3827
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t15:2.702kWh*$0.200=$0.5405 + t16:6.274kWh*$0.200=$1.2549 + t17:5.671kWh*$0.200=$1.1341

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:1.914kWh*$0.018=$0.0339 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:2.702kWh*$0.015=$0.0406
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $6.4919
  Station 14: $0.0000
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $2.7264

Total Revenue: $12.9317
Total Cost: $1.0886
Profit: $11.8431
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.491897757561133), '14': np.float64(0.0), '15': np.float64(2.624855604341777), '26': np.float64(0.0), '37': np.float64(2.726353888120727)}
Real profit: $11.8431

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $17.3648
 Real profit: $11.8431
 Improvement over base: $-11.8331 (-50.0%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1
2  profit_37         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.89
Charging prices:
  Station 11 (AGGREGATOR): $0.405/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.477/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.524/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.89
Solution prices: 11:0.405, 14:0.600, 15:0.477, 26:0.600, 37:0.524

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4045010076224571, 14: 0.6, 15: 0.47699999809265137, 26: 0.6, 37: 0.5240009890258079}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.66644775937167

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.89411592029183

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.340091093184521

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.67
EV 2: Objective = 12.89
EV 3: Objective = 6.34

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4045010076224571), '14': np.float64(0.6), '15': np.float64(0.47699999809265137), '26': np.float64(0.6), '37': np.float64(0.5240009890258079)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.220kWh*$0.405=$1.7070 + t12:6.600kWh*$0.405=$2.6697 + t13:5.507kWh*$0.405=$2.2276
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.251kWh*$0.600=$3.1507
  Station 15: t11:3.561kWh*$0.477=$1.6987 + t12:3.600kWh*$0.477=$1.7172 + t13:3.600kWh*$0.477=$1.7172 + t14:3.600kWh*$0.477=$1.7172 + t15:0.039kWh*$0.477=$0.0185
  Station 37: t14:3.577kWh*$0.524=$1.8743 + t15:3.600kWh*$0.524=$1.8864 + t16:6.274kWh*$0.524=$3.2878 + t17:7.033kWh*$0.524=$3.6854 + t18:0.023kWh*$0.524=$0.0121

Cost breakdown by time period:
  t11: s11:4.220kWh*$0.019=$0.0796 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.251kWh*$0.017=$0.0912 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:5.507kWh*$0.017=$0.0936 + s15:3.600kWh*$0.017=$0.0612
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:3.577kWh*$0.018=$0.0633
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:0.023kWh*$0.012=$0.0003

Profit breakdown by station:
  Station 11: $6.3165
  Station 14: $5.7086
  Station 15: $6.6137
  Station 26: $0.0000
  Station 37: $10.4466

Total Revenue: $30.1048
Total Cost: $1.0195
Profit: $29.0853
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.3164594466175386), '14': np.float64(5.708600594087157), '15': np.float64(6.61365557687594), '26': np.float64(0.0), '37': np.float64(10.446623822652864)}
Real profit: $23.3767

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $20.8936
 Real profit: $23.3767
 Improvement over base: $-0.2995 (-1.3%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1
2  profit_37        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.52
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.52
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 3.9374694605865708

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.477122524799929

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546433

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 3.94
EV 2: Objective = 5.48
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.200=$2.0192 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:1.914kWh*$0.200=$0.3827
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t15:2.702kWh*$0.200=$0.5405 + t16:6.274kWh*$0.200=$1.2549 + t17:5.671kWh*$0.200=$1.1341

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:1.914kWh*$0.018=$0.0339 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:2.702kWh*$0.015=$0.0406
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $6.4919
  Station 14: $0.0000
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $2.7264

Total Revenue: $12.9317
Total Cost: $1.0886
Profit: $11.8431
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.491897757561133), '14': np.float64(0.0), '15': np.float64(2.624855604341777), '26': np.float64(0.0), '37': np.float64(2.726353888120727)}
Real profit: $11.8431

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $19.5206
 Real profit: $11.8431
 Improvement over base: $-11.8331 (-50.0%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1
2  profit_37       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $33.62
Charging prices:
  Station 11 (AGGREGATOR): $0.508/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.561/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.601/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $33.62
Solution prices: 11:0.508, 14:0.600, 15:0.561, 26:0.600, 37:0.601

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.5075010226428276, 14: 0.6, 15: 0.5605009959399467, 26: 0.6, 37: 0.6014999747276306}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.275169022407635

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.850282661301819

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.6120665807127805

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.28
EV 2: Objective = 13.85
EV 3: Objective = 7.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.5075010226428276), '14': np.float64(0.6), '15': np.float64(0.5605009959399467), '26': np.float64(0.6), '37': np.float64(0.6014999747276306)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.508=$2.6506 + t12:6.600kWh*$0.508=$3.3495 + t13:3.801kWh*$0.508=$1.9291
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.910kWh*$0.600=$1.1459
  Station 15: t11:3.561kWh*$0.561=$1.9960 + t12:3.600kWh*$0.561=$2.0178 + t13:3.600kWh*$0.561=$2.0178 + t14:3.600kWh*$0.561=$2.0178 + t15:0.039kWh*$0.561=$0.0218
  Station 37: t14:0.122kWh*$0.601=$0.0733 + t15:3.600kWh*$0.601=$2.1654 + t16:3.319kWh*$0.601=$1.9964 + t17:3.433kWh*$0.601=$2.0651

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:6.600kWh*$0.017=$0.1146 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:6.600kWh*$0.017=$0.1122 + s15:3.600kWh*$0.017=$0.0612
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $7.6515
  Station 14: $11.4544
  Station 15: $7.8161
  Station 26: $0.0000
  Station 37: $6.1519

Total Revenue: $34.1016
Total Cost: $1.0278
Profit: $33.0738
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(7.651515109519824), '14': np.float64(11.454376432735426), '15': np.float64(7.816069945877014), '26': np.float64(0.0), '37': np.float64(6.151859263709773)}
Real profit: $21.6194

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $33.6174
 Real profit: $21.6194
 Improvement over base: $-2.0568 (-8.7%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1
2  profit_37        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.40
Charging prices:
  Station 11 (AGGREGATOR): $0.429/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.560/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.40
Solution prices: 11:0.429, 14:0.600, 15:0.560, 26:0.600, 37:0.442

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.42900100511906203, 14: 0.6, 15: 0.5604999959468842, 26: 0.6, 37: 0.4424999952316284}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.403526073609882

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.666714946081981

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.506890162832205

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.40
EV 2: Objective = 11.67
EV 3: Objective = 7.51

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.42900100511906203), '14': np.float64(0.6), '15': np.float64(0.5604999959468842), '26': np.float64(0.6), '37': np.float64(0.4424999952316284)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:3.683kWh*$0.429=$1.5799
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.560=$1.9960 + t12:2.546kWh*$0.560=$1.4273
  Station 37: t12:2.492kWh*$0.442=$1.1027 + t13:5.761kWh*$0.442=$2.5494 + t14:10.800kWh*$0.442=$4.7790 + t15:10.800kWh*$0.442=$4.7790 + t16:8.009kWh*$0.442=$3.5441 + t17:5.039kWh*$0.442=$2.2296

Cost breakdown by time period:
  t9: s11:3.683kWh*$0.075=$0.2777
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.492kWh*$0.017=$0.0433
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.009kWh*$0.013=$0.1054
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $1.3022
  Station 14: $5.6067
  Station 15: $3.3120
  Station 26: $0.0000
  Station 37: $18.3127

Total Revenue: $29.7678
Total Cost: $1.2342
Profit: $28.5336
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.3022383575007956), '14': np.float64(5.606709304996233), '15': np.float64(3.311960853900377), '26': np.float64(0.0), '37': np.float64(18.312725216924544)}
Real profit: $22.9269

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $26.4010
 Real profit: $22.9269
 Improvement over base: $-0.7493 (-3.2%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.49
Charging prices:
  Station 11 (AGGREGATOR): $0.447/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.672/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.452/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.49
Solution prices: 11:0.447, 14:0.600, 15:0.672, 26:0.600, 37:0.452

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.44684539161098374, 14: 0.6, 15: 0.6722379799649438, 26: 0.6, 37: 0.4515842612189429}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.184265573847707

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.275985404243382

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.692953400036014

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.18
EV 2: Objective = 12.28
EV 3: Objective = 7.69

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.44684539161098374), '14': np.float64(0.6), '15': np.float64(0.6722379799649438), '26': np.float64(0.6), '37': np.float64(0.4515842612189429)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:3.683kWh*$0.447=$1.6456 + t11:4.873kWh*$0.447=$2.1775 + t12:6.600kWh*$0.447=$2.9492 + t13:6.600kWh*$0.447=$2.9492 + t14:1.914kWh*$0.447=$0.8551
  Station 15: t11:3.561kWh*$0.672=$2.3940 + t12:2.546kWh*$0.672=$1.7118
  Station 37: t12:2.492kWh*$0.452=$1.1253 + t13:3.767kWh*$0.452=$1.7010 + t14:7.200kWh*$0.452=$3.2514 + t15:9.902kWh*$0.452=$4.4718 + t16:8.009kWh*$0.452=$3.6168 + t17:5.671kWh*$0.452=$2.5608

Cost breakdown by time period:
  t9: s11:3.683kWh*$0.075=$0.2777
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:2.492kWh*$0.017=$0.0433
  t13: s11:6.600kWh*$0.017=$0.1122 + s37:3.767kWh*$0.017=$0.0640
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:7.200kWh*$0.018=$0.1274
  t15: s37:9.902kWh*$0.015=$0.1488
  t16: s37:8.009kWh*$0.013=$0.1054
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $9.9464
  Station 14: $0.0000
  Station 15: $3.9944
  Station 26: $0.0000
  Station 37: $16.1583

Total Revenue: $31.4096
Total Cost: $1.3105
Profit: $30.0991
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.946407957727207), '14': np.float64(0.0), '15': np.float64(3.9944177364307407), '26': np.float64(0.0), '37': np.float64(16.158284098375432)}
Real profit: $30.0991

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $25.4899
 Real profit: $30.0991
 Improvement over base: $6.4229 (27.1%)
✓ Completed combination 20/31

PROGRESS: Combination 21/31 - [11, 26, 37]
Remaining: 10 combinations


============================================================
EXPERIMENT: Controlled stations [11, 26, 37]
============================================================

Creating synthetic aggregator data for stations [11, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 26, 37]
Competitor stations: [14, 15]
Base case profit: $9.9485


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_26     linear  ...  continuous         1
2  profit_37     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.76
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.76
Solution prices: 11:0.200, 14:0.600, 15:0.500, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.440859213306377

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.151786645759655

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506525

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.44
EV 2: Objective = 6.15
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:2.146kWh*$0.200=$0.4292 + t11:5.615kWh*$0.200=$1.1229 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:0.278kWh*$0.200=$0.0556
  Station 15: t11:1.083kWh*$0.500=$0.5416 + t12:3.600kWh*$0.500=$1.8000 + t13:0.986kWh*$0.500=$0.4931
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:2.602kWh*$0.200=$0.5204 + t15:3.784kWh*$0.200=$0.7568 + t16:6.600kWh*$0.200=$1.3200 + t17:11.056kWh*$0.200=$2.2112 + t18:6.843kWh*$0.200=$1.3685 + t19:1.892kWh*$0.200=$0.3785

Cost breakdown by time period:
  t9: s11:2.146kWh*$0.075=$0.1618
  t11: s11:5.615kWh*$0.019=$0.1059 + s15:1.083kWh*$0.019=$0.0204 + s26:1.348kWh*$0.019=$0.0254
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s11:6.600kWh*$0.017=$0.1122 + s15:0.986kWh*$0.017=$0.0168 + s26:6.600kWh*$0.017=$0.1122
  t14: s11:0.278kWh*$0.018=$0.0049 + s26:2.602kWh*$0.018=$0.0460
  t15: s26:3.784kWh*$0.015=$0.0569
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:11.056kWh*$0.014=$0.1559
  t18: s26:6.843kWh*$0.012=$0.0798
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $3.7483
  Station 14: $0.0000
  Station 15: $2.7350
  Station 26: $8.7594
  Station 37: $0.0000

Total Revenue: $16.5473
Total Cost: $1.3046
Profit: $15.2427
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.7482671912151058), '14': np.float64(0.0), '15': np.float64(2.7349908880958287), '26': np.float64(8.759428196245434), '37': np.float64(0.0)}
Real profit: $12.5077

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $16.7572
 Real profit: $12.5077
 Improvement over base: $2.5592 (25.7%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_26         rf  ...  continuous         1
2  profit_37         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.58
Charging prices:
  Station 11 (AGGREGATOR): $0.425/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.461/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.493/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.58
Solution prices: 11:0.425, 14:0.600, 15:0.500, 26:0.461, 37:0.493

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4245000034570694, 14: 0.6, 15: 0.5, 26: 0.4610000103712082, 37: 0.4925000071525574}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.739993750343125

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.16218320728131

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.367124686765596

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.74
EV 2: Objective = 12.16
EV 3: Objective = 6.37

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4245000034570694), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4610000103712082), '37': np.float64(0.4925000071525574)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.425=$2.2171 + t12:6.600kWh*$0.425=$2.8017 + t13:3.801kWh*$0.425=$1.6136
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t14:3.627kWh*$0.461=$1.6722 + t15:6.600kWh*$0.461=$3.0426 + t16:6.600kWh*$0.461=$3.0426 + t17:0.399kWh*$0.461=$0.1841
  Station 37: t13:0.167kWh*$0.493=$0.0821 + t14:3.600kWh*$0.493=$1.7730 + t15:3.600kWh*$0.493=$1.7730 + t16:3.600kWh*$0.493=$1.7730 + t17:3.433kWh*$0.493=$1.6909

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:0.167kWh*$0.017=$0.0028
  t14: s26:3.627kWh*$0.018=$0.0642 + s37:3.600kWh*$0.018=$0.0637
  t15: s26:6.600kWh*$0.015=$0.0992 + s37:3.600kWh*$0.015=$0.0541
  t16: s26:6.600kWh*$0.013=$0.0869 + s37:3.600kWh*$0.013=$0.0474
  t17: s26:0.399kWh*$0.014=$0.0056 + s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $6.3547
  Station 14: $4.5838
  Station 15: $2.9424
  Station 26: $7.6857
  Station 37: $6.8756

Total Revenue: $29.4472
Total Cost: $1.0050
Profit: $28.4422
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.354700636658185), '14': np.float64(4.583814043739962), '15': np.float64(2.942447845502774), '26': np.float64(7.6856529770073285), '37': np.float64(6.875586194576119)}
Real profit: $20.9159

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $23.5842
 Real profit: $20.9159
 Improvement over base: $10.9674 (110.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_26        svm  ...  continuous         1
2  profit_37        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.65
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.65
Solution prices: 11:0.200, 14:0.600, 15:0.500, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.5, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.440859213306377

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.151786645759655

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506525

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.44
EV 2: Objective = 6.15
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:2.146kWh*$0.200=$0.4292 + t11:5.615kWh*$0.200=$1.1229 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:0.278kWh*$0.200=$0.0556
  Station 15: t11:1.083kWh*$0.500=$0.5416 + t12:3.600kWh*$0.500=$1.8000 + t13:0.986kWh*$0.500=$0.4931
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:2.602kWh*$0.200=$0.5204 + t15:3.784kWh*$0.200=$0.7568 + t16:6.600kWh*$0.200=$1.3200 + t17:11.056kWh*$0.200=$2.2112 + t18:6.843kWh*$0.200=$1.3685 + t19:1.892kWh*$0.200=$0.3785

Cost breakdown by time period:
  t9: s11:2.146kWh*$0.075=$0.1618
  t11: s11:5.615kWh*$0.019=$0.1059 + s15:1.083kWh*$0.019=$0.0204 + s26:1.348kWh*$0.019=$0.0254
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s11:6.600kWh*$0.017=$0.1122 + s15:0.986kWh*$0.017=$0.0168 + s26:6.600kWh*$0.017=$0.1122
  t14: s11:0.278kWh*$0.018=$0.0049 + s26:2.602kWh*$0.018=$0.0460
  t15: s26:3.784kWh*$0.015=$0.0569
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:11.056kWh*$0.014=$0.1559
  t18: s26:6.843kWh*$0.012=$0.0798
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $3.7483
  Station 14: $0.0000
  Station 15: $2.7350
  Station 26: $8.7594
  Station 37: $0.0000

Total Revenue: $16.5473
Total Cost: $1.3046
Profit: $15.2427
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.7482671912151058), '14': np.float64(0.0), '15': np.float64(2.7349908880958287), '26': np.float64(8.759428196245434), '37': np.float64(0.0)}
Real profit: $12.5077

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $17.6480
 Real profit: $12.5077
 Improvement over base: $2.5592 (25.7%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_26       cart  ...  continuous         1
2  profit_37       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $35.97
Charging prices:
  Station 11 (AGGREGATOR): $0.433/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $35.97
Solution prices: 11:0.433, 14:0.600, 15:0.500, 26:0.439, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4330009983241325, 14: 0.6, 15: 0.5, 26: 0.4385010020196205, 37: 0.442500995224691}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.048807409452673

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.666728769986046

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.521045670597721

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 11.67
EV 3: Objective = 7.52

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4330009983241325), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4385010020196205), '37': np.float64(0.442500995224691)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:3.683kWh*$0.433=$1.5947
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.492kWh*$0.443=$1.1027 + t13:5.761kWh*$0.443=$2.5494 + t14:10.800kWh*$0.443=$4.7790 + t15:10.800kWh*$0.443=$4.7790 + t16:8.009kWh*$0.443=$3.5441 + t17:5.039kWh*$0.443=$2.2296

Cost breakdown by time period:
  t9: s11:3.683kWh*$0.075=$0.2777
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.492kWh*$0.017=$0.0433
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.009kWh*$0.013=$0.1054
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $1.3170
  Station 14: $5.6067
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $18.3128

Total Revenue: $29.4131
Total Cost: $1.2342
Profit: $28.1789
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.3169695770624326), '14': np.float64(5.6067093049962065), '15': np.float64(2.942447845503143), '26': np.float64(0.0), '37': np.float64(18.312768117752256)}
Real profit: $19.6297

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $35.9713
 Real profit: $19.6297
 Improvement over base: $9.6812 (97.3%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_26        gbm  ...  continuous         1
2  profit_37        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $29.80
Charging prices:
  Station 11 (AGGREGATOR): $0.425/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $29.80
Solution prices: 11:0.425, 14:0.600, 15:0.500, 26:0.443, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.424501003450132, 14: 0.6, 15: 0.5, 26: 0.442500995224691, 37: 0.442500995224691}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.04880740945266

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.666728769984127

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.285230969488177

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 11.67
EV 3: Objective = 7.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.424501003450132), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.442500995224691), '37': np.float64(0.442500995224691)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t11:1.348kWh*$0.443=$0.5963 + t12:6.600kWh*$0.443=$2.9205 + t13:6.600kWh*$0.443=$2.9205 + t14:2.602kWh*$0.443=$1.1514
  Station 37: t13:2.161kWh*$0.443=$0.9564 + t14:7.200kWh*$0.443=$3.1860 + t15:7.200kWh*$0.443=$3.1860 + t16:7.200kWh*$0.443=$3.1860 + t17:5.039kWh*$0.443=$2.2296

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:2.161kWh*$0.017=$0.0367
  t14: s26:2.602kWh*$0.018=$0.0460 + s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.6067
  Station 15: $2.9424
  Station 26: $7.2905
  Station 37: $12.3059

Total Revenue: $29.1675
Total Cost: $1.0219
Profit: $28.1456
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.606709304994293), '15': np.float64(2.942447845503131), '26': np.float64(7.290526899123377), '37': np.float64(12.305905696343684)}
Real profit: $19.5964

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $29.7998
 Real profit: $19.5964
 Improvement over base: $9.6479 (97.0%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 633 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.46
Charging prices:
  Station 11 (AGGREGATOR): $0.385/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.373/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.346/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.46
Solution prices: 11:0.385, 14:0.600, 15:0.500, 26:0.373, 37:0.346

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.38512846400261436, 14: 0.6, 15: 0.5, 26: 0.37281318558249826, 37: 0.3457491768086618}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.7952529683362535

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.728205102474686

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.083686965962905

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.80
EV 2: Objective = 11.73
EV 3: Objective = 7.08

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.38512846400261436), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.37281318558249826), '37': np.float64(0.3457491768086618)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t17:0.223kWh*$0.385=$0.0858 + t18:6.600kWh*$0.385=$2.5418 + t19:6.600kWh*$0.385=$2.5418 + t20:5.371kWh*$0.385=$2.0686
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:0.771kWh*$0.600=$0.4628
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.721kWh*$0.500=$1.3607
  Station 37: t11:0.375kWh*$0.346=$0.1296 + t12:6.021kWh*$0.346=$2.0816 + t13:7.200kWh*$0.346=$2.4894 + t14:9.770kWh*$0.346=$3.3778 + t15:10.425kWh*$0.346=$3.6045 + t16:4.779kWh*$0.346=$1.6525 + t17:3.600kWh*$0.346=$1.2447 + t18:1.030kWh*$0.346=$0.3563

Cost breakdown by time period:
  t17: s11:0.223kWh*$0.014=$0.0031 + s37:3.600kWh*$0.014=$0.0508
  t18: s11:6.600kWh*$0.012=$0.0769 + s37:1.030kWh*$0.012=$0.0120
  t19: s11:6.600kWh*$0.015=$0.0971
  t20: s11:5.371kWh*$0.020=$0.1049
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:0.771kWh*$0.019=$0.0145 + s15:3.561kWh*$0.019=$0.0672 + s37:0.375kWh*$0.019=$0.0071
  t12: s15:2.721kWh*$0.017=$0.0473 + s37:6.021kWh*$0.017=$0.1046
  t13: s37:7.200kWh*$0.017=$0.1224
  t14: s37:9.770kWh*$0.018=$0.1729
  t15: s37:10.425kWh*$0.015=$0.1566
  t16: s37:4.779kWh*$0.013=$0.0629

Profit breakdown by station:
  Station 11: $6.9560
  Station 14: $2.2553
  Station 15: $3.0269
  Station 26: $0.0000
  Station 37: $14.2472

Total Revenue: $27.7158
Total Cost: $1.2304
Profit: $26.4853
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.95596390252363), '14': np.float64(2.255342470201394), '15': np.float64(3.026851072789496), '26': np.float64(0.0), '37': np.float64(14.247191455773306)}
Real profit: $21.2032

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $23.4569
 Real profit: $21.2032
 Improvement over base: $11.2547 (113.1%)
✓ Completed combination 21/31

PROGRESS: Combination 22/31 - [14, 15, 26]
Remaining: 9 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15, 26]
============================================================

Creating synthetic aggregator data for stations [14, 15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15, 26]
Competitor stations: [11, 37]
Base case profit: $20.2579


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1
2  profit_26     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.74
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.74
Solution prices: 11:0.600, 14:0.800, 15:0.200, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.2, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.088820434879705

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.958317762133332

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506489

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 5.96
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:7.161kWh*$0.200=$1.4322 + t12:4.108kWh*$0.200=$0.8216 + t13:3.600kWh*$0.200=$0.7200 + t14:1.610kWh*$0.200=$0.3219
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:6.600kWh*$0.200=$1.3200 + t16:5.153kWh*$0.200=$1.0307 + t18:5.835kWh*$0.200=$1.1671 + t19:6.600kWh*$0.200=$1.3200 + t20:4.791kWh*$0.200=$0.9583

Cost breakdown by time period:
  t10: s15:1.396kWh*$0.040=$0.0563
  t11: s15:7.161kWh*$0.019=$0.1350 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:4.108kWh*$0.017=$0.0713 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:1.610kWh*$0.018=$0.0285 + s26:8.075kWh*$0.018=$0.1429
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:5.153kWh*$0.013=$0.0678
  t18: s26:5.835kWh*$0.012=$0.0680
  t19: s26:6.600kWh*$0.015=$0.0971
  t20: s26:4.791kWh*$0.020=$0.0936

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.0000
  Station 15: $3.2227
  Station 26: $9.4998
  Station 37: $0.0000

Total Revenue: $13.8957
Total Cost: $1.1732
Profit: $12.7225
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.0), '15': np.float64(3.222742720017927), '26': np.float64(9.499790542330782), '37': np.float64(0.0)}
Real profit: $12.7225

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $18.7382
 Real profit: $12.7225
 Improvement over base: $-7.5354 (-37.2%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1
2  profit_26         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 228 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.59
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.793/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.59
Solution prices: 11:0.600, 14:0.800, 15:0.793, 26:0.460, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.7930009828269253, 26: 0.4595009998738533, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.723584334110821

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.49560204325184

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.565114996163249

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.72
EV 2: Objective = 13.50
EV 3: Objective = 7.57

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.7930009828269253), '26': np.float64(0.4595009998738533), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2041
  Station 15: t11:1.292kWh*$0.793=$1.0249
  Station 26: t11:1.348kWh*$0.460=$0.6192 + t12:6.600kWh*$0.460=$3.0327 + t13:6.600kWh*$0.460=$3.0327 + t14:4.639kWh*$0.460=$2.1315 + t15:8.697kWh*$0.460=$3.9961 + t16:13.200kWh*$0.460=$6.0654 + t17:8.590kWh*$0.460=$3.9471 + t18:1.930kWh*$0.460=$0.8868
  Station 37: t12:2.847kWh*$0.500=$1.4237 + t13:6.678kWh*$0.500=$3.3389 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:1.292kWh*$0.019=$0.0244 + s26:1.348kWh*$0.019=$0.0254
  t12: s26:6.600kWh*$0.017=$0.1146 + s37:2.847kWh*$0.017=$0.0494
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:6.678kWh*$0.017=$0.1135
  t14: s26:4.639kWh*$0.018=$0.0821 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:13.200kWh*$0.013=$0.1738
  t17: s26:8.590kWh*$0.014=$0.1211
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1286
  Station 15: $1.0005
  Station 26: $22.9293
  Station 37: $4.9907

Total Revenue: $33.1086
Total Cost: $1.0595
Profit: $32.0491
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1285501118092154), '15': np.float64(1.000494041442588), '26': np.float64(22.929349827481794), '37': np.float64(4.990726511689414)}
Real profit: $27.0584

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $24.5899
 Real profit: $27.0584
 Improvement over base: $6.8005 (33.6%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1
2  profit_26        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.73
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.73
Solution prices: 11:0.600, 14:0.800, 15:0.800, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.8, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.4327167755199435

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.204076160797191

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066677

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.43
EV 2: Objective = 9.20
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2041
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:0.508kWh*$0.800=$0.4065
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:8.697kWh*$0.200=$1.7393 + t16:11.753kWh*$0.200=$2.3507 + t17:6.600kWh*$0.200=$1.3200 + t18:1.930kWh*$0.200=$0.3860
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1286
  Station 15: $3.1794
  Station 26: $9.5246
  Station 37: $2.8372

Total Revenue: $19.7183
Total Cost: $1.0485
Profit: $18.6698
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.128550111806642), '15': np.float64(3.179432595165203), '26': np.float64(9.524590872478404), '37': np.float64(2.837179967204821)}
Real profit: $15.8326

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $21.7251
 Real profit: $15.8326
 Improvement over base: $-4.4254 (-21.8%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1
2  profit_26       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $37.45
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.440/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.531/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.490/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $37.45
Solution prices: 11:0.600, 14:0.440, 15:0.531, 26:0.490, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.43950000405311584, 15: 0.5309999883174896, 26: 0.4895000010728836, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.012398325336457

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.394332550831766

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.979830512562219

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.01
EV 2: Objective = 10.39
EV 3: Objective = 7.98

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.43950000405311584), '15': np.float64(0.5309999883174896), '26': np.float64(0.4895000010728836), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.440=$1.4191 + t11:15.277kWh*$0.440=$6.7142 + t12:18.044kWh*$0.440=$7.9305 + t13:13.200kWh*$0.440=$5.8014 + t14:4.082kWh*$0.440=$1.7939
  Station 37: t13:0.199kWh*$0.500=$0.0994 + t14:3.650kWh*$0.500=$1.8250 + t15:5.257kWh*$0.500=$2.6283 + t16:2.715kWh*$0.500=$1.3576

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:18.044kWh*$0.017=$0.3134
  t13: s14:13.200kWh*$0.017=$0.2244 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:3.650kWh*$0.018=$0.0646
  t15: s37:5.257kWh*$0.015=$0.0790
  t16: s37:2.715kWh*$0.013=$0.0357

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $22.6309
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $5.7276

Total Revenue: $29.5693
Total Cost: $1.2109
Profit: $28.3585
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(22.63085759735058), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(5.7275997636669205)}
Real profit: $22.6309

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $37.4528
 Real profit: $22.6309
 Improvement over base: $2.3729 (11.7%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1
2  profit_26        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $31.77
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.527/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.560/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.459/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $31.77
Solution prices: 11:0.600, 14:0.527, 15:0.560, 26:0.459, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.5270010100066429, 15: 0.5604999959468842, 26: 0.4594999998807907, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.198406139529247

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.585218877001415

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.03034831163239

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.20
EV 2: Objective = 11.59
EV 3: Objective = 8.03

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.5270010100066429), '15': np.float64(0.5604999959468842), '26': np.float64(0.4594999998807907), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.527=$3.1084 + t11:11.158kWh*$0.527=$5.8805 + t12:3.834kWh*$0.527=$2.0204
  Station 15: t11:3.561kWh*$0.560=$1.9960 + t12:2.546kWh*$0.560=$1.4273 + t13:2.690kWh*$0.560=$1.5080
  Station 26: t14:3.627kWh*$0.459=$1.6668 + t15:6.600kWh*$0.459=$3.0327 + t16:6.600kWh*$0.459=$3.0327 + t17:0.399kWh*$0.459=$0.1835
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:3.600kWh*$0.500=$1.8000 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:3.834kWh*$0.017=$0.0666 + s15:2.546kWh*$0.017=$0.0442
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:0.167kWh*$0.017=$0.0028
  t14: s26:3.627kWh*$0.018=$0.0642 + s37:3.600kWh*$0.018=$0.0637
  t15: s26:6.600kWh*$0.015=$0.0992 + s37:3.600kWh*$0.015=$0.0541
  t16: s26:6.600kWh*$0.013=$0.0869 + s37:3.600kWh*$0.013=$0.0474
  t17: s26:0.399kWh*$0.014=$0.0056 + s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $10.4945
  Station 15: $4.7742
  Station 26: $7.6598
  Station 37: $6.9836

Total Revenue: $31.0562
Total Cost: $1.1441
Profit: $29.9121
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(10.494466508190776), '15': np.float64(4.774209024661577), '26': np.float64(7.659812783365302), '37': np.float64(6.9835860915792916)}
Real profit: $22.9285

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $31.7741
 Real profit: $22.9285
 Improvement over base: $2.6705 (13.2%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 603 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.92
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.652/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.92
Solution prices: 11:0.600, 14:0.797, 15:0.652, 26:0.415, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7974562648758801, 15: 0.6517675499878688, 26: 0.4146088109318735, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.80594756668943

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.743412221354786

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.826020691975669

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.81
EV 2: Objective = 12.74
EV 3: Objective = 6.83

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7974562648758801), '15': np.float64(0.6517675499878688), '26': np.float64(0.4146088109318735), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.797=$3.1939
  Station 15: t11:1.292kWh*$0.652=$0.8423
  Station 26: t11:1.348kWh*$0.415=$0.5588 + t12:6.600kWh*$0.415=$2.7364 + t13:6.600kWh*$0.415=$2.7364 + t14:4.639kWh*$0.415=$1.9233 + t15:8.697kWh*$0.415=$3.6057 + t16:13.200kWh*$0.415=$5.4728 + t17:8.590kWh*$0.415=$3.5615 + t18:1.930kWh*$0.415=$0.8002
  Station 37: t12:2.847kWh*$0.500=$1.4237 + t13:6.678kWh*$0.500=$3.3389 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:1.292kWh*$0.019=$0.0244 + s26:1.348kWh*$0.019=$0.0254
  t12: s26:6.600kWh*$0.017=$0.1146 + s37:2.847kWh*$0.017=$0.0494
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:6.678kWh*$0.017=$0.1135
  t14: s26:4.639kWh*$0.018=$0.0821 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:13.200kWh*$0.013=$0.1738
  t17: s26:8.590kWh*$0.014=$0.1211
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1184
  Station 15: $0.8180
  Station 26: $20.6128
  Station 37: $4.9907

Total Revenue: $30.5994
Total Cost: $1.0595
Profit: $29.5398
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.118362209056986), '15': np.float64(0.8179655704357787), '26': np.float64(20.6127736038386), '37': np.float64(4.990726511689482)}
Real profit: $24.5491

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $32.9232
 Real profit: $24.5491
 Improvement over base: $4.2912 (21.2%)
✓ Completed combination 22/31

PROGRESS: Combination 23/31 - [14, 15, 37]
Remaining: 8 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15, 37]
============================================================

Creating synthetic aggregator data for stations [14, 15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15, 37]
Competitor stations: [11, 26]
Base case profit: $30.2064


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1
2  profit_37     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.70
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.70
Solution prices: 11:0.600, 14:0.200, 15:0.200, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.2, 15: 0.2, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 3.937469460585999

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 4.614664844398248

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.5328167819198777

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 3.94
EV 2: Objective = 4.61
EV 3: Objective = 3.53

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.2), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.200=$0.6458 + t11:5.330kWh*$0.200=$1.0659 + t12:5.076kWh*$0.200=$1.0153
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 37: t12:2.421kWh*$0.200=$0.4841 + t13:5.595kWh*$0.200=$1.1189 + t14:7.200kWh*$0.200=$1.4400 + t15:7.200kWh*$0.200=$1.4400 + t16:7.454kWh*$0.200=$1.4908 + t17:5.039kWh*$0.200=$1.0077

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:3.600kWh*$0.017=$0.0625 + s37:2.421kWh*$0.017=$0.0420
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:5.595kWh*$0.017=$0.0951
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.454kWh*$0.013=$0.0981
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.4081
  Station 15: $2.6249
  Station 26: $0.0000
  Station 37: $6.4397

Total Revenue: $12.5885
Total Cost: $1.1158
Profit: $11.4727
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.408131236048492), '15': np.float64(2.6248556043417715), '26': np.float64(0.0), '37': np.float64(6.439673220207452)}
Real profit: $11.4727

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $18.7035
 Real profit: $11.4727
 Improvement over base: $-18.7338 (-62.0%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1
2  profit_37         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 228 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.62
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.796/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.62
Solution prices: 11:0.600, 14:0.800, 15:0.796, 26:0.600, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7995010183512936, 15: 0.7955010102450617, 26: 0.6, 37: 0.7985010014235743}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.030184808814342

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.969918207711956

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.87825706351991

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.03
EV 2: Objective = 15.97
EV 3: Objective = 9.88

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7995010183512936), '15': np.float64(0.7955010102450617), '26': np.float64(0.6), '37': np.float64(0.7985010014235743)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.800=$3.6445 + t12:3.321kWh*$0.800=$2.6549
  Station 15: t11:3.561kWh*$0.796=$2.8329 + t12:0.508kWh*$0.796=$0.4042
  Station 26: t11:1.348kWh*$0.600=$0.8086 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:11.703kWh*$0.600=$7.0217 + t15:13.200kWh*$0.600=$7.9200 + t16:11.753kWh*$0.600=$7.0520 + t17:0.399kWh*$0.600=$0.2396

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.1557
  Station 15: $3.1611
  Station 26: $30.1439
  Station 37: $0.0000

Total Revenue: $40.4983
Total Cost: $1.0375
Profit: $39.4608
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.155696983273584), '15': np.float64(3.1611250159580107), '26': np.float64(30.14392961234345), '37': np.float64(0.0)}
Real profit: $9.3168

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $26.6223
 Real profit: $9.3168
 Improvement over base: $-20.8896 (-69.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1
2  profit_37        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.14
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.14
Solution prices: 11:0.600, 14:0.800, 15:0.800, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.8, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.455477842346311

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.16426001599963

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.367158653759956

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.46
EV 2: Objective = 10.16
EV 3: Objective = 6.37

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.800=$3.6467 + t12:5.076kWh*$0.800=$4.0610
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372
  Station 26: t16:1.436kWh*$0.600=$0.8617 + t17:4.818kWh*$0.600=$2.8907
  Station 37: t11:0.629kWh*$0.200=$0.1258 + t12:3.600kWh*$0.200=$0.7200 + t13:5.761kWh*$0.200=$1.1523 + t14:10.800kWh*$0.200=$2.1600 + t15:10.171kWh*$0.200=$2.0342 + t16:7.200kWh*$0.200=$1.4400 + t17:5.039kWh*$0.200=$1.0077

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s37:0.629kWh*$0.019=$0.0119
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:3.600kWh*$0.017=$0.0625
  t16: s26:1.436kWh*$0.013=$0.0189 + s37:7.200kWh*$0.013=$0.0948
  t17: s26:4.818kWh*$0.014=$0.0679 + s37:5.039kWh*$0.014=$0.0710
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.171kWh*$0.015=$0.1528

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.5337
  Station 15: $4.7747
  Station 26: $3.6656
  Station 37: $7.9580

Total Revenue: $24.9864
Total Cost: $1.0544
Profit: $23.9320
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.533652017495903), '15': np.float64(4.774743877669569), '26': np.float64(3.6656164488540304), '37': np.float64(7.957975365344545)}
Real profit: $20.2664

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $21.1449
 Real profit: $20.2664
 Improvement over base: $-9.9401 (-32.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1
2  profit_37       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $38.22
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.514/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $38.22
Solution prices: 11:0.600, 14:0.442, 15:0.514, 26:0.600, 37:0.415

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.44150100809929427, 15: 0.514000998562552, 26: 0.6, 37: 0.41450101298687514}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.743828372156727

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.813648324098274

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.8422832477133895

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.74
EV 2: Objective = 9.81
EV 3: Objective = 6.84

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.44150100809929427), '15': np.float64(0.514000998562552), '26': np.float64(0.6), '37': np.float64(0.41450101298687514)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.442=$2.6041 + t11:11.158kWh*$0.442=$4.9265 + t12:5.589kWh*$0.442=$2.4677
  Station 15: t11:3.561kWh*$0.514=$1.8304 + t12:2.546kWh*$0.514=$1.3089 + t13:2.690kWh*$0.514=$1.3829
  Station 37: t13:2.161kWh*$0.415=$0.8959 + t14:7.200kWh*$0.415=$2.9844 + t15:7.200kWh*$0.415=$2.9844 + t16:7.200kWh*$0.415=$2.9844 + t17:5.039kWh*$0.415=$2.0885

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.589kWh*$0.017=$0.0971 + s15:2.546kWh*$0.017=$0.0442
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $9.4530
  Station 15: $4.3651
  Station 26: $0.0000
  Station 37: $11.4995

Total Revenue: $26.4581
Total Cost: $1.1405
Profit: $25.3176
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(9.45296757898478), '15': np.float64(4.365107609008176), '26': np.float64(0.0), '37': np.float64(11.499506207894573)}
Real profit: $25.3176

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $38.2225
 Real profit: $25.3176
 Improvement over base: $-4.8889 (-16.2%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1
2  profit_37        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $34.23
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.458/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.502/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.441/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $34.23
Solution prices: 11:0.600, 14:0.458, 15:0.502, 26:0.600, 37:0.441

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4580009893834358, 15: 0.5024999976158142, 26: 0.6, 37: 0.44050100607273635}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.035817913694054

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.325685918238435

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.018677216171046

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.04
EV 2: Objective = 10.33
EV 3: Objective = 7.02

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4580009893834358), '15': np.float64(0.5024999976158142), '26': np.float64(0.6), '37': np.float64(0.44050100607273635)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.458=$2.7014 + t11:11.158kWh*$0.458=$5.1106 + t12:5.589kWh*$0.458=$2.5599
  Station 15: t11:3.561kWh*$0.502=$1.7895 + t12:2.546kWh*$0.502=$1.2796 + t13:2.690kWh*$0.502=$1.3519
  Station 37: t13:2.161kWh*$0.441=$0.9521 + t14:7.200kWh*$0.441=$3.1716 + t15:7.200kWh*$0.441=$3.1716 + t16:7.200kWh*$0.441=$3.1716 + t17:5.039kWh*$0.441=$2.2195

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.589kWh*$0.017=$0.0971 + s15:2.546kWh*$0.017=$0.0442
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $9.8266
  Station 15: $4.2639
  Station 26: $0.0000
  Station 37: $12.2483

Total Revenue: $27.4794
Total Cost: $1.1405
Profit: $26.3389
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(9.82662636846738), '15': np.float64(4.263921002126965), '26': np.float64(0.0), '37': np.float64(12.248306008767335)}
Real profit: $26.3389

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $34.2303
 Real profit: $26.3389
 Improvement over base: $-3.8676 (-12.8%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 603 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.66
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.615/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.66
Solution prices: 11:0.600, 14:0.460, 15:0.800, 26:0.600, 37:0.615

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.46001379223220434, 15: 0.8, 26: 0.6, 37: 0.6150460866523222}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.704600245631127

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.263917822928978

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.740567591996395

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.70
EV 2: Objective = 11.26
EV 3: Objective = 8.74

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.46001379223220434), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.6150460866523222)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:4.659kWh*$0.460=$2.1432 + t11:15.277kWh*$0.460=$7.0276 + t12:17.174kWh*$0.460=$7.9003 + t13:13.200kWh*$0.460=$6.0722 + t14:4.082kWh*$0.460=$1.8777
  Station 15: t13:0.917kWh*$0.800=$0.7338 + t14:1.704kWh*$0.800=$1.3636
  Station 37: t14:0.122kWh*$0.615=$0.0749 + t15:6.279kWh*$0.615=$3.8618 + t16:1.518kWh*$0.615=$0.9336

Cost breakdown by time period:
  t10: s14:4.659kWh*$0.040=$0.1878
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:17.174kWh*$0.017=$0.2983
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:0.917kWh*$0.017=$0.0156
  t14: s14:4.082kWh*$0.018=$0.0722 + s15:1.704kWh*$0.018=$0.0302 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $23.9502
  Station 15: $2.0516
  Station 26: $0.0000
  Station 37: $4.7539

Total Revenue: $31.9886
Total Cost: $1.2330
Profit: $30.7557
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(23.950162555079224), '15': np.float64(2.0516465672906503), '26': np.float64(0.0), '37': np.float64(4.753860710346706)}
Real profit: $30.7557

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $32.6650
 Real profit: $30.7557
 Improvement over base: $0.5492 (1.8%)
✓ Completed combination 23/31

PROGRESS: Combination 24/31 - [14, 26, 37]
Remaining: 7 combinations


============================================================
EXPERIMENT: Controlled stations [14, 26, 37]
============================================================

Creating synthetic aggregator data for stations [14, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 26, 37]
Competitor stations: [11, 15]
Base case profit: $16.4787


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_26     linear  ...  continuous         1
2  profit_37     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.71
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.71
Solution prices: 11:0.600, 14:0.800, 15:0.500, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.5, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346445

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 18.458660015999765

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455733104

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 18.46
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t11:4.558kWh*$0.800=$3.6467 + t12:6.600kWh*$0.800=$5.2800 + t13:6.600kWh*$0.800=$5.2800 + t14:1.910kWh*$0.800=$1.5278
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:3.600kWh*$0.800=$2.8800 + t16:3.319kWh*$0.800=$2.6552 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $16.6415
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $8.2310

Total Revenue: $39.6598
Total Cost: $1.0595
Profit: $38.6002
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(16.64150203634651), '15': np.float64(13.72774866959393), '26': np.float64(0.0), '37': np.float64(8.230978330213857)}
Real profit: $24.8725

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $18.7146
 Real profit: $24.8725
 Improvement over base: $8.3938 (50.9%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_26         rf  ...  continuous         1
2  profit_37         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 228 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $31.75
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.621/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $31.75
Solution prices: 11:0.600, 14:0.800, 15:0.500, 26:0.621, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7995010183512936, 15: 0.5, 26: 0.6205009983241325, 37: 0.7985010014235743}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.019780008222943

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 16.30895568720876

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.966498187998994

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.02
EV 2: Objective = 16.31
EV 3: Objective = 8.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7995010183512936), '15': np.float64(0.5), '26': np.float64(0.6205009983241325), '37': np.float64(0.7985010014235743)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.496kWh*$0.600=$0.8974 + t16:2.071kWh*$0.600=$1.2427
  Station 14: t11:4.558kWh*$0.800=$3.6445 + t12:3.321kWh*$0.800=$2.6549
  Station 15: t11:6.498kWh*$0.500=$3.2490 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:0.702kWh*$0.500=$0.3510
  Station 26: t14:3.627kWh*$0.621=$2.2508 + t15:6.600kWh*$0.621=$4.0953 + t16:6.600kWh*$0.621=$4.0953 + t17:6.733kWh*$0.621=$4.1778 + t18:0.562kWh*$0.621=$0.3489

Cost breakdown by time period:
  t15: s11:1.496kWh*$0.015=$0.0225 + s15:0.702kWh*$0.015=$0.0105 + s26:6.600kWh*$0.015=$0.0992
  t16: s11:2.071kWh*$0.013=$0.0273 + s26:6.600kWh*$0.013=$0.0869
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:6.498kWh*$0.019=$0.1225
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224
  t14: s15:7.200kWh*$0.018=$0.1274 + s26:3.627kWh*$0.018=$0.0642
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $2.0904
  Station 14: $6.1557
  Station 15: $13.8921
  Station 26: $14.6164
  Station 37: $0.0000

Total Revenue: $37.8075
Total Cost: $1.0530
Profit: $36.7546
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.090368370853408), '14': np.float64(6.155696983273622), '15': np.float64(13.892104818437796), '26': np.float64(14.61639869717973), '37': np.float64(0.0)}
Real profit: $20.7721

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $31.7544
 Real profit: $20.7721
 Improvement over base: $4.2934 (26.1%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_26        svm  ...  continuous         1
2  profit_37        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.94
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.94
Solution prices: 11:0.600, 14:0.800, 15:0.500, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.5, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346445

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 18.458660015999765

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455733104

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 18.46
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t11:4.558kWh*$0.800=$3.6467 + t12:6.600kWh*$0.800=$5.2800 + t13:6.600kWh*$0.800=$5.2800 + t14:1.910kWh*$0.800=$1.5278
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:3.600kWh*$0.800=$2.8800 + t16:3.319kWh*$0.800=$2.6552 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $16.6415
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $8.2310

Total Revenue: $39.6598
Total Cost: $1.0595
Profit: $38.6002
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(16.64150203634651), '15': np.float64(13.72774866959393), '26': np.float64(0.0), '37': np.float64(8.230978330213857)}
Real profit: $24.8725

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $22.9439
 Real profit: $24.8725
 Improvement over base: $8.3938 (50.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_26       cart  ...  continuous         1
2  profit_37       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $40.36
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.385/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.490/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $40.36
Solution prices: 11:0.600, 14:0.385, 15:0.500, 26:0.490, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.38450099689362105, 15: 0.5, 26: 0.4895000010728836, 37: 0.442500995224691}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.703301516147476

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.114843000791263

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.9993785851207555

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.70
EV 2: Objective = 9.11
EV 3: Objective = 7.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.38450099689362105), '15': np.float64(0.5), '26': np.float64(0.4895000010728836), '37': np.float64(0.442500995224691)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.385=$1.2415 + t11:15.277kWh*$0.385=$5.8740 + t12:18.044kWh*$0.385=$6.9380 + t13:13.200kWh*$0.385=$5.0754 + t14:4.082kWh*$0.385=$1.5694
  Station 37: t13:0.199kWh*$0.443=$0.0880 + t14:3.650kWh*$0.443=$1.6151 + t15:6.279kWh*$0.443=$2.7784 + t16:1.518kWh*$0.443=$0.6717

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:18.044kWh*$0.017=$0.3134
  t13: s14:13.200kWh*$0.017=$0.2244 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:3.650kWh*$0.018=$0.0646
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $19.6702
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $4.9709

Total Revenue: $25.8516
Total Cost: $1.2105
Profit: $24.6411
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(19.670163831530964), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(4.970945574167446)}
Real profit: $24.6411

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $40.3574
 Real profit: $24.6411
 Improvement over base: $8.1624 (49.5%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_26        gbm  ...  continuous         1
2  profit_37        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $33.20
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.545/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $33.20
Solution prices: 11:0.600, 14:0.545, 15:0.500, 26:0.460, 37:0.442

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.5445009933173424, 15: 0.5, 26: 0.4595009998738533, 37: 0.4424999952316284}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.048793585548573

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.153386594986493

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.607313029147537

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 11.15
EV 3: Objective = 7.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.5445009933173424), '15': np.float64(0.5), '26': np.float64(0.4595009998738533), '37': np.float64(0.4424999952316284)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.545=$0.8984 + t11:4.558kWh*$0.545=$2.4821 + t12:5.076kWh*$0.545=$2.7640
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:6.146kWh*$0.500=$3.0732 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:1.503kWh*$0.500=$0.7513
  Station 37: t13:2.161kWh*$0.442=$0.9564 + t14:7.200kWh*$0.442=$3.1860 + t15:7.200kWh*$0.442=$3.1860 + t16:7.200kWh*$0.442=$3.1860 + t17:5.039kWh*$0.442=$2.2296

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:2.161kWh*$0.017=$0.0367
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.9039
  Station 15: $9.7253
  Station 26: $0.0000
  Station 37: $12.3059

Total Revenue: $28.9682
Total Cost: $1.0331
Profit: $27.9351
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.903901141578722), '15': np.float64(9.725340910755065), '26': np.float64(0.0), '37': np.float64(12.305876896543712)}
Real profit: $18.2098

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $33.1998
 Real profit: $18.2098
 Improvement over base: $1.7311 (10.5%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 753 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $34.06
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.658/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.642/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $34.06
Solution prices: 11:0.600, 14:0.658, 15:0.500, 26:0.642, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6575280451358231, 15: 0.5, 26: 0.6416432826676809, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.159744090777071

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.584727801351306

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 10.56386214878641

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.16
EV 2: Objective = 15.58
EV 3: Objective = 10.56

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6575280451358231), '15': np.float64(0.5), '26': np.float64(0.6416432826676809), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.658=$2.9973 + t12:3.321kWh*$0.658=$2.1834
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t11:1.348kWh*$0.642=$0.8647 + t12:6.600kWh*$0.642=$4.2348 + t13:6.600kWh*$0.642=$4.2348 + t14:6.229kWh*$0.642=$3.9971 + t15:6.600kWh*$0.642=$4.2348 + t16:6.600kWh*$0.642=$4.2348 + t17:6.733kWh*$0.642=$4.3201 + t18:0.562kWh*$0.642=$0.3608

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:6.229kWh*$0.018=$0.1102
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.0371
  Station 15: $6.9449
  Station 26: $25.8322
  Station 37: $0.0000

Total Revenue: $38.8628
Total Cost: $1.0487
Profit: $37.8141
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.037081668341874), '15': np.float64(6.944855604342065), '26': np.float64(25.832173594562985), '37': np.float64(0.0)}
Real profit: $30.8693

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $34.0586
 Real profit: $30.8693
 Improvement over base: $14.3906 (87.3%)
✓ Completed combination 24/31

PROGRESS: Combination 25/31 - [15, 26, 37]
Remaining: 6 combinations


============================================================
EXPERIMENT: Controlled stations [15, 26, 37]
============================================================

Creating synthetic aggregator data for stations [15, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [15, 26, 37]
Competitor stations: [11, 14]
Base case profit: $23.6763


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_15     linear  ...  continuous         1
1  profit_26     linear  ...  continuous         1
2  profit_37     linear  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.45
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.45
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.0888204348799855

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 7.614704229226533

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066633

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 7.61
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 15: t11:5.768kWh*$0.200=$1.1536 + t12:4.108kWh*$0.200=$0.8216 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:1.393kWh*$0.200=$0.2786
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:6.600kWh*$0.200=$1.3200 + t16:9.450kWh*$0.200=$1.8900 + t17:6.600kWh*$0.200=$1.3200 + t18:3.489kWh*$0.200=$0.6979
  Station 37: t19:2.719kWh*$0.800=$2.1748

Cost breakdown by time period:
  t11: s15:5.768kWh*$0.019=$0.1088 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:4.108kWh*$0.017=$0.0713 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:8.075kWh*$0.018=$0.1429
  t15: s15:1.393kWh*$0.015=$0.0209 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:9.450kWh*$0.013=$0.1244
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:3.489kWh*$0.012=$0.0407
  t19: s37:2.719kWh*$0.015=$0.0400

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.0000
  Station 15: $3.3679
  Station 26: $9.0001
  Station 37: $2.1348

Total Revenue: $15.6211
Total Cost: $1.1183
Profit: $14.5028
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.0), '15': np.float64(3.3679211218454754), '26': np.float64(9.000076607667713), '37': np.float64(2.134811809766495)}
Real profit: $14.5028

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $17.4517
 Real profit: $14.5028
 Improvement over base: $-9.1734 (-38.7%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_15         rf  ...  continuous         1
1  profit_26         rf  ...  continuous         1
2  profit_37         rf  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 228 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.94
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.478/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.461/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.497/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.94
Solution prices: 11:0.600, 14:0.600, 15:0.478, 26:0.461, 37:0.497

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.4775009916484123, 26: 0.4610000103712082, 37: 0.4970009939133888}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.515063145764636

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.162183207281103

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.391719777211597

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.52
EV 2: Objective = 12.16
EV 3: Objective = 7.39

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.4775009916484123), '26': np.float64(0.4610000103712082), '37': np.float64(0.4970009939133888)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:5.310kWh*$0.478=$2.5357 + t12:7.200kWh*$0.478=$3.4380 + t13:7.200kWh*$0.478=$3.4380 + t14:7.200kWh*$0.478=$3.4380 + t15:1.541kWh*$0.478=$0.7360
  Station 26: t14:3.627kWh*$0.461=$1.6722 + t15:6.600kWh*$0.461=$3.0426 + t16:6.600kWh*$0.461=$3.0426 + t17:0.399kWh*$0.461=$0.1841
  Station 37: t16:2.674kWh*$0.497=$1.3292 + t17:3.433kWh*$0.497=$1.7063

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224
  t14: s15:7.200kWh*$0.018=$0.1274 + s26:3.627kWh*$0.018=$0.0642
  t15: s15:1.541kWh*$0.015=$0.0232 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869 + s37:2.674kWh*$0.013=$0.0352
  t17: s26:0.399kWh*$0.014=$0.0056 + s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.5073
  Station 15: $13.0876
  Station 26: $7.6857
  Station 37: $2.9519

Total Revenue: $30.2802
Total Cost: $1.0477
Profit: $29.2325
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.507296273739742), '15': np.float64(13.087613284204547), '26': np.float64(7.685652977007275), '37': np.float64(2.951894699035784)}
Real profit: $23.7252

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $24.9418
 Real profit: $23.7252
 Improvement over base: $0.0489 (0.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_15        svm  ...  continuous         1
1  profit_26        svm  ...  continuous         1
2  profit_37        svm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 3 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $19.38
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $19.38
Solution prices: 11:0.600, 14:0.600, 15:0.200, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.0888204348799855

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 7.614704229226533

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.2927523545066633

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 7.61
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 15: t11:5.768kWh*$0.200=$1.1536 + t12:4.108kWh*$0.200=$0.8216 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:1.393kWh*$0.200=$0.2786
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:6.600kWh*$0.200=$1.3200 + t13:6.600kWh*$0.200=$1.3200 + t14:8.075kWh*$0.200=$1.6151 + t15:6.600kWh*$0.200=$1.3200 + t16:9.450kWh*$0.200=$1.8900 + t17:6.600kWh*$0.200=$1.3200 + t18:3.489kWh*$0.200=$0.6979
  Station 37: t19:2.719kWh*$0.800=$2.1748

Cost breakdown by time period:
  t11: s15:5.768kWh*$0.019=$0.1088 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:4.108kWh*$0.017=$0.0713 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:8.075kWh*$0.018=$0.1429
  t15: s15:1.393kWh*$0.015=$0.0209 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:9.450kWh*$0.013=$0.1244
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:3.489kWh*$0.012=$0.0407
  t19: s37:2.719kWh*$0.015=$0.0400

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $0.0000
  Station 15: $3.3679
  Station 26: $9.0001
  Station 37: $2.1348

Total Revenue: $15.6211
Total Cost: $1.1183
Profit: $14.5028
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(0.0), '15': np.float64(3.3679211218454754), '26': np.float64(9.000076607667713), '37': np.float64(2.134811809766495)}
Real profit: $14.5028

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $19.3776
 Real profit: $14.5028
 Improvement over base: $-9.1734 (-38.7%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_15       cart  ...  continuous         1
1  profit_26       cart  ...  continuous         1
2  profit_37       cart  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 9 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $36.27
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.461/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.601/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $36.27
Solution prices: 11:0.600, 14:0.600, 15:0.461, 26:0.439, 37:0.601

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.46050000190734863, 26: 0.4385010020196205, 37: 0.6014999747276306}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.050698247756838

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.059953098369425

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.338804667504547

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 13.06
EV 3: Objective = 8.34

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.46050000190734863), '26': np.float64(0.4385010020196205), '37': np.float64(0.6014999747276306)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.925kWh*$0.600=$3.5547
  Station 15: t11:3.561kWh*$0.461=$1.6399 + t12:0.508kWh*$0.461=$0.2340
  Station 26: t11:0.874kWh*$0.439=$0.3835 + t12:11.575kWh*$0.439=$5.0755 + t13:13.200kWh*$0.439=$5.7882 + t14:15.225kWh*$0.439=$6.6764 + t15:10.196kWh*$0.439=$4.4710 + t16:5.153kWh*$0.439=$2.2598
  Station 37: t16:2.719kWh*$0.601=$1.6352

Cost breakdown by time period:
  t11: s11:5.925kWh*$0.019=$0.1117 + s15:3.561kWh*$0.019=$0.0672 + s26:0.874kWh*$0.019=$0.0165
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:11.575kWh*$0.017=$0.2010
  t13: s26:13.200kWh*$0.017=$0.2244
  t14: s26:15.225kWh*$0.018=$0.2694
  t15: s26:10.196kWh*$0.015=$0.1532
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $3.4430
  Station 14: $0.0000
  Station 15: $1.7979
  Station 26: $23.7221
  Station 37: $1.5994

Total Revenue: $31.7182
Total Cost: $1.1558
Profit: $30.5624
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.443021893164065), '14': np.float64(0.0), '15': np.float64(1.7979173118724385), '26': np.float64(23.72208504697819), '37': np.float64(1.5993961302467572)}
Real profit: $27.1194

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $36.2716
 Real profit: $27.1194
 Improvement over base: $3.4431 (14.5%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_15        gbm  ...  continuous         1
1  profit_26        gbm  ...  continuous         1
2  profit_37        gbm  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 183 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.26
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.541/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.26
Solution prices: 11:0.600, 14:0.600, 15:0.541, 26:0.443, 37:0.442

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5410010085761314, 26: 0.442500995224691, 37: 0.44249999523162864}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.289196738601099

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.66671494608197

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.840298925601363

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.29
EV 2: Objective = 11.67
EV 3: Objective = 7.84

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5410010085761314), '26': np.float64(0.442500995224691), '37': np.float64(0.44249999523162864)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.992kWh*$0.600=$1.7950 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.541=$1.9266 + t12:2.546kWh*$0.541=$1.3777
  Station 37: t12:3.313kWh*$0.442=$1.4660 + t13:5.761kWh*$0.442=$2.5494 + t14:10.800kWh*$0.442=$4.7790 + t15:10.800kWh*$0.442=$4.7790 + t16:7.487kWh*$0.442=$3.3130 + t17:5.039kWh*$0.442=$2.2296

Cost breakdown by time period:
  t10: s14:2.992kWh*$0.040=$0.1206
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.2811
  Station 15: $3.1929
  Station 26: $0.0000
  Station 37: $18.4376

Total Revenue: $29.9961
Total Cost: $1.0845
Profit: $28.9115
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.281083439863041), '15': np.float64(3.1928677965995145), '26': np.float64(0.0), '37': np.float64(18.437592502529952)}
Real profit: $21.6305

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $32.2573
 Real profit: $21.6305
 Improvement over base: $-2.0458 (-8.6%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 753 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.88
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.683/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.427/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.397/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.88
Solution prices: 11:0.600, 14:0.600, 15:0.683, 26:0.427, 37:0.397

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.6828330667712267, 26: 0.42678351839716056, 37: 0.39706187583399016}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.321494822917927

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.038578383528893

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.793033717288962

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.32
EV 2: Objective = 11.04
EV 3: Objective = 7.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.6828330667712267), '26': np.float64(0.42678351839716056), '37': np.float64(0.39706187583399016)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:1.292kWh*$0.683=$0.8825
  Station 26: t17:3.613kWh*$0.427=$1.5419 + t18:3.674kWh*$0.427=$1.5678
  Station 37: t12:3.803kWh*$0.397=$1.5098 + t13:9.195kWh*$0.397=$3.6509 + t14:10.800kWh*$0.397=$4.2883 + t15:10.800kWh*$0.397=$4.2883 + t16:6.997kWh*$0.397=$2.7784 + t17:1.605kWh*$0.397=$0.6374

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:1.292kWh*$0.019=$0.0244
  t12: s14:5.076kWh*$0.017=$0.0882 + s37:3.803kWh*$0.017=$0.0660
  t17: s26:3.613kWh*$0.014=$0.0509 + s37:1.605kWh*$0.014=$0.0226
  t18: s26:3.674kWh*$0.012=$0.0428
  t13: s37:9.195kWh*$0.017=$0.1563
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:6.997kWh*$0.013=$0.0921

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $0.8581
  Station 26: $3.0159
  Station 37: $16.4627

Total Revenue: $29.3262
Total Cost: $1.1274
Profit: $28.1988
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775197403), '15': np.float64(0.8581142885227907), '26': np.float64(3.0159435602548874), '37': np.float64(16.46266247466804)}
Real profit: $20.3367

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $27.8792
 Real profit: $20.3367
 Improvement over base: $-3.3395 (-14.1%)
✓ Completed combination 25/31

PROGRESS: Combination 26/31 - [11, 14, 15, 26]
Remaining: 5 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 15, 26]
============================================================

Creating synthetic aggregator data for stations [11, 14, 15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 15, 26]
Competitor stations: [37]
Base case profit: $20.2579


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26]
Competitor stations: [37] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_15     linear  ...  continuous         1
3  profit_26     linear  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.62
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.62
Solution prices: 11:0.200, 14:0.800, 15:0.200, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.8, 15: 0.2, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.088820434879997

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 6.2600520676795615

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546101

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 6.26
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.8), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.200=$2.0192 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:1.914kWh*$0.200=$0.3827
  Station 15: t11:3.561kWh*$0.200=$0.7122 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:0.039kWh*$0.200=$0.0078
  Station 26: t14:2.225kWh*$0.200=$0.4451 + t15:3.596kWh*$0.200=$0.7192 + t17:6.334kWh*$0.200=$1.2667 + t18:0.562kWh*$0.200=$0.1125
  Station 37: t16:2.719kWh*$0.500=$1.3593

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:1.914kWh*$0.018=$0.0339 + s15:3.600kWh*$0.018=$0.0637 + s26:2.225kWh*$0.018=$0.0394
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:3.596kWh*$0.015=$0.0540
  t17: s26:6.334kWh*$0.014=$0.0893
  t18: s26:0.562kWh*$0.012=$0.0066
  t16: s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $6.4919
  Station 14: $0.0000
  Station 15: $2.6249
  Station 26: $2.3542
  Station 37: $1.3235

Total Revenue: $13.9049
Total Cost: $1.1105
Profit: $12.7944
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.4918977575608166), '14': np.float64(0.0), '15': np.float64(2.624855604341761), '26': np.float64(2.354200933188001), '37': np.float64(1.3234679051914193)}
Real profit: $11.4710

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $21.6184
 Real profit: $11.4710
 Improvement over base: $-8.7870 (-43.4%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26]
Competitor stations: [37] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_15         rf  ...  continuous         1
3  profit_26         rf  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 259 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $29.02
Charging prices:
  Station 11 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.793/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $29.02
Solution prices: 11:0.797, 14:0.800, 15:0.793, 26:0.460, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7965009973704584, 14: 0.7995010183512936, 15: 0.7930009828269253, 26: 0.4595009998738533, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.696901040071936

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.627908055674094

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.56511499616396

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.70
EV 2: Objective = 13.63
EV 3: Objective = 7.57

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7965009973704584), '14': np.float64(0.7995010183512936), '15': np.float64(0.7930009828269253), '26': np.float64(0.4595009998738533), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.180kWh*$0.800=$3.3419
  Station 15: t11:3.561kWh*$0.793=$2.8240 + t12:0.508kWh*$0.793=$0.4029
  Station 26: t11:1.348kWh*$0.460=$0.6192 + t12:6.600kWh*$0.460=$3.0327 + t13:6.600kWh*$0.460=$3.0327 + t14:8.075kWh*$0.460=$3.7107 + t15:6.647kWh*$0.460=$3.0545 + t16:11.753kWh*$0.460=$5.4007 + t17:6.600kWh*$0.460=$3.0327 + t18:3.979kWh*$0.460=$1.8284
  Station 37: t13:3.048kWh*$0.500=$1.5238 + t14:2.829kWh*$0.500=$1.4143

Cost breakdown by time period:
  t11: s14:4.180kWh*$0.019=$0.0788 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.048kWh*$0.017=$0.0518
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:2.829kWh*$0.018=$0.0500
  t15: s26:6.647kWh*$0.015=$0.0999
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:3.979kWh*$0.012=$0.0464

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.2631
  Station 15: $3.1510
  Station 26: $22.9225
  Station 37: $2.8363

Total Revenue: $33.2187
Total Cost: $1.0458
Profit: $32.1729
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.263071046006071), '15': np.float64(3.150951743185932), '26': np.float64(22.922543846989516), '37': np.float64(2.836317045646883)}
Real profit: $29.3366

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $29.0224
 Real profit: $29.3366
 Improvement over base: $9.0786 (44.8%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26]
Competitor stations: [37] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_15        svm  ...  continuous         1
3  profit_26        svm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.88
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.88
Solution prices: 11:0.800, 14:0.800, 15:0.800, 26:0.200, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.8, 26: 0.2, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.432716775519529

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 8.585560556319725

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.292752354506598

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.43
EV 2: Objective = 8.59
EV 3: Objective = 3.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.2), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.037kWh*$0.800=$3.2299
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:0.508kWh*$0.800=$0.4065
  Station 26: t11:1.348kWh*$0.200=$0.2695 + t12:11.575kWh*$0.200=$2.3149 + t13:13.200kWh*$0.200=$2.6400 + t14:14.675kWh*$0.200=$2.9351 + t15:10.196kWh*$0.200=$2.0392 + t16:5.153kWh*$0.200=$1.0307
  Station 37: t16:2.719kWh*$0.500=$1.3593

Cost breakdown by time period:
  t11: s11:4.037kWh*$0.019=$0.0761 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:11.575kWh*$0.017=$0.2010
  t13: s26:13.200kWh*$0.017=$0.2244
  t14: s26:14.675kWh*$0.018=$0.2597
  t15: s26:10.196kWh*$0.015=$0.1532
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $3.1537
  Station 14: $0.0000
  Station 15: $3.1794
  Station 26: $10.2980
  Station 37: $1.3235

Total Revenue: $19.0740
Total Cost: $1.1194
Profit: $17.9546
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.1537383368689507), '14': np.float64(0.0), '15': np.float64(3.179432595164793), '26': np.float64(10.297986232197221), '37': np.float64(1.3234679051917557)}
Real profit: $16.6312

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $24.8819
 Real profit: $16.6312
 Improvement over base: $-3.6268 (-17.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26]
Competitor stations: [37] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_15       cart  ...  continuous         1
3  profit_26       cart  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 12 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $38.71
Charging prices:
  Station 11 (AGGREGATOR): $0.532/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.400/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.531/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.414/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $38.71
Solution prices: 11:0.532, 14:0.400, 15:0.531, 26:0.414, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.5324999988079071, 14: 0.40000099105236586, 15: 0.5309999883174896, 26: 0.413500996059156, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.189394805690064

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.648532403210007

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.367817850616465

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.19
EV 2: Objective = 9.65
EV 3: Objective = 6.37

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.5324999988079071), '14': np.float64(0.40000099105236586), '15': np.float64(0.5309999883174896), '26': np.float64(0.413500996059156), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.400=$2.3593 + t11:15.277kWh*$0.400=$6.1108 + t12:13.713kWh*$0.400=$5.4852 + t13:13.200kWh*$0.400=$5.2800 + t14:4.082kWh*$0.400=$1.6327
  Station 15: t13:2.690kWh*$0.531=$1.4286
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $19.8075
  Station 15: $1.3829
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $26.2560
Total Cost: $1.2228
Profit: $25.0332
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(19.807451576867702), '15': np.float64(1.3828808733178697), '26': np.float64(0.0), '37': np.float64(3.842852111835886)}
Real profit: $21.1903

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $38.7133
 Real profit: $21.1903
 Improvement over base: $0.9324 (4.6%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26]
Competitor stations: [37] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_15        gbm  ...  continuous         1
3  profit_26        gbm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 244 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $37.32
Charging prices:
  Station 11 (AGGREGATOR): $0.484/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.547/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.560/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $37.32
Solution prices: 11:0.484, 14:0.547, 15:0.560, 26:0.460, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4840000122785568, 14: 0.5474999845027924, 15: 0.5604999959468842, 26: 0.4595009998738533, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.788637352832547

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.125816797835832

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.259572206070187

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.79
EV 2: Objective = 13.13
EV 3: Objective = 7.26

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4840000122785568), '14': np.float64(0.5474999845027924), '15': np.float64(0.5604999959468842), '26': np.float64(0.4595009998738533), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.484=$2.5278 + t12:6.600kWh*$0.484=$3.1944 + t13:3.801kWh*$0.484=$1.8398 + t14:0.998kWh*$0.484=$0.4833 + t15:6.600kWh*$0.484=$3.1944 + t16:6.600kWh*$0.484=$3.1944 + t17:5.360kWh*$0.484=$2.5941
  Station 15: t10:0.611kWh*$0.560=$0.3427 + t11:7.161kWh*$0.560=$4.0138 + t12:3.802kWh*$0.560=$2.1308
  Station 26: t14:5.473kWh*$0.460=$2.5150 + t15:6.600kWh*$0.460=$3.0327 + t16:5.153kWh*$0.460=$2.3680

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s15:7.161kWh*$0.019=$0.1350
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:3.802kWh*$0.017=$0.0660
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s11:0.998kWh*$0.018=$0.0177 + s26:5.473kWh*$0.018=$0.0968
  t15: s11:6.600kWh*$0.015=$0.0992 + s26:6.600kWh*$0.015=$0.0992
  t16: s11:6.600kWh*$0.013=$0.0869 + s26:5.153kWh*$0.013=$0.0678
  t17: s11:5.360kWh*$0.014=$0.0756
  t10: s15:0.611kWh*$0.040=$0.0247

Profit breakdown by station:
  Station 11: $16.4712
  Station 14: $0.0000
  Station 15: $6.2617
  Station 26: $7.6518
  Station 37: $0.0000

Total Revenue: $31.4313
Total Cost: $1.0465
Profit: $30.3847
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(16.471236291704486), '14': np.float64(0.0), '15': np.float64(6.261655571217484), '26': np.float64(7.6518425493468065), '37': np.float64(0.0)}
Real profit: $30.3847

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $37.3153
 Real profit: $30.3847
 Improvement over base: $10.1268 (50.0%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26]
Competitor stations: [37] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_15        mlp  ...  continuous         1
3  profit_26        mlp  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 634 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $35.88
Charging prices:
  Station 11 (AGGREGATOR): $0.664/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.662/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.414/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $35.88
Solution prices: 11:0.664, 14:0.800, 15:0.662, 26:0.414, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6639804309286186, 14: 0.8, 15: 0.6618021526719549, 26: 0.4137220710201503, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.427299617689082

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.73852805069675

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.811421617314875

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.43
EV 2: Objective = 12.74
EV 3: Objective = 6.81

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6639804309286186), '14': np.float64(0.8), '15': np.float64(0.6618021526719549), '26': np.float64(0.4137220710201503), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2041
  Station 15: t11:3.561kWh*$0.662=$2.3568 + t12:0.508kWh*$0.662=$0.3363
  Station 26: t11:1.348kWh*$0.414=$0.5576 + t12:6.600kWh*$0.414=$2.7306 + t13:6.600kWh*$0.414=$2.7306 + t14:8.075kWh*$0.414=$3.3410 + t15:8.697kWh*$0.414=$3.5980 + t16:11.753kWh*$0.414=$4.8626 + t17:6.600kWh*$0.414=$2.7306 + t18:1.930kWh*$0.414=$0.7985
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1286
  Station 15: $2.6171
  Station 26: $20.5533
  Station 37: $2.8372

Total Revenue: $30.1846
Total Cost: $1.0485
Profit: $29.1361
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1285501118094077), '15': np.float64(2.6170690037822713), '26': np.float64(20.553312791855117), '37': np.float64(2.837179967204906)}
Real profit: $26.2989

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $35.8847
 Real profit: $26.2989
 Improvement over base: $6.0410 (29.8%)
✓ Completed combination 26/31

PROGRESS: Combination 27/31 - [11, 14, 15, 37]
Remaining: 4 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 15, 37]
============================================================

Creating synthetic aggregator data for stations [11, 14, 15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 15, 37]
Competitor stations: [26]
Base case profit: $30.2064


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 37]
Competitor stations: [26] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_15     linear  ...  continuous         1
3  profit_37     linear  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.67
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.67
Solution prices: 11:0.200, 14:0.800, 15:0.200, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.8, 15: 0.2, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 3.937469460586541

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 5.946148121170507

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.9047784365866476

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 3.94
EV 2: Objective = 5.95
EV 3: Objective = 3.90

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.8), '15': np.float64(0.2), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.615kWh*$0.200=$1.1229 + t12:6.600kWh*$0.200=$1.3200 + t13:4.530kWh*$0.200=$0.9060
  Station 15: t9:0.822kWh*$0.200=$0.1644 + t10:3.600kWh*$0.200=$0.7200 + t11:7.161kWh*$0.200=$1.4322 + t12:6.146kWh*$0.200=$1.2293 + t13:0.788kWh*$0.200=$0.1576
  Station 37: t13:0.167kWh*$0.200=$0.0333 + t14:3.600kWh*$0.200=$0.7200 + t15:6.170kWh*$0.200=$1.2340 + t16:10.800kWh*$0.200=$2.1600 + t17:9.875kWh*$0.200=$1.9751 + t18:3.600kWh*$0.200=$0.7200 + t19:2.340kWh*$0.200=$0.4681

Cost breakdown by time period:
  t11: s11:5.615kWh*$0.019=$0.1059 + s15:7.161kWh*$0.019=$0.1350
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:6.146kWh*$0.017=$0.1067
  t13: s11:4.530kWh*$0.017=$0.0770 + s15:0.788kWh*$0.017=$0.0134 + s37:0.167kWh*$0.017=$0.0028
  t9: s15:0.822kWh*$0.075=$0.0620
  t10: s15:3.600kWh*$0.040=$0.1451
  t14: s37:3.600kWh*$0.018=$0.0637
  t15: s37:6.170kWh*$0.015=$0.0927
  t16: s37:10.800kWh*$0.013=$0.1422
  t17: s37:9.875kWh*$0.014=$0.1392
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:2.340kWh*$0.015=$0.0344

Profit breakdown by station:
  Station 11: $3.0514
  Station 14: $0.0000
  Station 15: $3.2413
  Station 26: $0.0000
  Station 37: $6.7934

Total Revenue: $14.3629
Total Cost: $1.2768
Profit: $13.0861
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.0513882757619033), '14': np.float64(0.0), '15': np.float64(3.241262797551475), '26': np.float64(0.0), '37': np.float64(6.793427930175628)}
Real profit: $13.0861

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $21.6701
 Real profit: $13.0861
 Improvement over base: $-17.1204 (-56.7%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 37]
Competitor stations: [26] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_15         rf  ...  continuous         1
3  profit_37         rf  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 259 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.49
Charging prices:
  Station 11 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.796/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.49
Solution prices: 11:0.797, 14:0.800, 15:0.796, 26:0.600, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7965009973704583, 14: 0.7995010183512936, 15: 0.7955010102450617, 26: 0.6, 37: 0.7985010014235743}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.030184808813797

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.969918207712032

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.878257063519959

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.03
EV 2: Objective = 15.97
EV 3: Objective = 9.88

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7965009973704583), '14': np.float64(0.7995010183512936), '15': np.float64(0.7955010102450617), '26': np.float64(0.6), '37': np.float64(0.7985010014235743)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.800=$3.6445 + t12:3.321kWh*$0.800=$2.6549
  Station 15: t11:3.561kWh*$0.796=$2.8329 + t12:0.508kWh*$0.796=$0.4042
  Station 26: t11:1.348kWh*$0.600=$0.8086 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:11.703kWh*$0.600=$7.0217 + t15:13.200kWh*$0.600=$7.9200 + t16:11.753kWh*$0.600=$7.0520 + t17:0.399kWh*$0.600=$0.2396

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.1557
  Station 15: $3.1611
  Station 26: $30.1439
  Station 37: $0.0000

Total Revenue: $40.4983
Total Cost: $1.0375
Profit: $39.4608
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.155696983273668), '15': np.float64(3.161125015957457), '26': np.float64(30.14392961234351), '37': np.float64(0.0)}
Real profit: $9.3168

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $32.4930
 Real profit: $9.3168
 Improvement over base: $-20.8896 (-69.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 37]
Competitor stations: [26] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_15        svm  ...  continuous         1
3  profit_37        svm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.24
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.24
Solution prices: 11:0.800, 14:0.800, 15:0.800, 26:0.600, 37:0.200

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.8, 26: 0.6, 37: 0.2}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.455477842344957

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.16426001599999

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.062371988693285

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.46
EV 2: Objective = 10.16
EV 3: Objective = 5.06

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.2)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.992kWh*$0.800=$2.3933 + t11:4.558kWh*$0.800=$3.6467 + t12:5.076kWh*$0.800=$4.0610
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372
  Station 37: t12:3.313kWh*$0.200=$0.6626 + t13:5.761kWh*$0.200=$1.1523 + t14:10.800kWh*$0.200=$2.1600 + t15:10.800kWh*$0.200=$2.1600 + t16:7.487kWh*$0.200=$1.4974 + t17:5.039kWh*$0.200=$1.0077

Cost breakdown by time period:
  t10: s14:2.992kWh*$0.040=$0.1206
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $9.8064
  Station 15: $4.7747
  Station 26: $0.0000
  Station 37: $7.9616

Total Revenue: $23.6272
Total Cost: $1.0845
Profit: $22.5427
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(9.806352191085908), '15': np.float64(4.774743877668189), '26': np.float64(0.0), '37': np.float64(7.961592708523833)}
Real profit: $22.5427

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $25.2366
 Real profit: $22.5427
 Improvement over base: $-7.6638 (-25.4%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 37]
Competitor stations: [26] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_15       cart  ...  continuous         1
3  profit_37       cart  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 12 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $45.09
Charging prices:
  Station 11 (AGGREGATOR): $0.508/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.542/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.514/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $45.09
Solution prices: 11:0.508, 14:0.542, 15:0.514, 26:0.600, 37:0.415

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.5075010226428276, 14: 0.5420009957015282, 15: 0.5140009985625511, 26: 0.6, 37: 0.41450101298687514}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.743828372157212

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.743205373937496

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.6120665807126535

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.74
EV 2: Objective = 10.74
EV 3: Objective = 7.61

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.5075010226428276), '14': np.float64(0.5420009957015282), '15': np.float64(0.5140009985625511), '26': np.float64(0.6), '37': np.float64(0.41450101298687514)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.508=$2.6506 + t12:6.600kWh*$0.508=$3.3495 + t13:3.801kWh*$0.508=$1.9291
  Station 14: t11:4.558kWh*$0.542=$2.4707 + t12:5.076kWh*$0.542=$2.7514
  Station 15: t11:3.561kWh*$0.514=$1.8304 + t12:2.546kWh*$0.514=$1.3089
  Station 37: t13:2.161kWh*$0.415=$0.8959 + t14:7.200kWh*$0.415=$2.9844 + t15:7.200kWh*$0.415=$2.9844 + t16:7.200kWh*$0.415=$2.9844 + t17:5.039kWh*$0.415=$2.0885

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $7.6515
  Station 14: $5.0479
  Station 15: $3.0280
  Station 26: $0.0000
  Station 37: $11.4995

Total Revenue: $28.2282
Total Cost: $1.0013
Profit: $27.2269
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(7.6515151095197), '14': np.float64(5.047905511670529), '15': np.float64(3.0279610925449187), '26': np.float64(0.0), '37': np.float64(11.499506207894289)}
Real profit: $27.2269

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $45.0899
 Real profit: $27.2269
 Improvement over base: $-2.9796 (-9.9%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 37]
Competitor stations: [26] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_15        gbm  ...  continuous         1
3  profit_37        gbm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 244 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $39.17
Charging prices:
  Station 11 (AGGREGATOR): $0.791/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.792/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.736/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $39.17
Solution prices: 11:0.791, 14:0.792, 15:0.736, 26:0.600, 37:0.442

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7910009787738095, 14: 0.7924999892711639, 15: 0.7355000078678131, 26: 0.6, 37: 0.4424999952316284}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.429611921521172

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.44720991319682

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.160386391240204

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.43
EV 2: Objective = 13.45
EV 3: Objective = 9.16

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7910009787738095), '14': np.float64(0.7924999892711639), '15': np.float64(0.7355000078678131), '26': np.float64(0.6), '37': np.float64(0.4424999952316284)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.792=$2.5588 + t11:5.330kWh*$0.792=$4.2238 + t12:5.076kWh*$0.792=$4.0230
  Station 15: t11:3.561kWh*$0.736=$2.6192 + t12:2.546kWh*$0.736=$1.8729
  Station 37: t12:2.421kWh*$0.442=$1.0711 + t13:5.761kWh*$0.442=$2.5494 + t14:10.800kWh*$0.442=$4.7790 + t15:10.800kWh*$0.442=$4.7790 + t16:8.379kWh*$0.442=$3.7079 + t17:5.039kWh*$0.442=$2.2296

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $10.4868
  Station 15: $4.3808
  Station 26: $0.0000
  Station 37: $18.4413

Total Revenue: $34.4138
Total Cost: $1.1049
Profit: $33.3089
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(10.486750815315421), '15': np.float64(4.380800278807926), '26': np.float64(0.0), '37': np.float64(18.441343550394752)}
Real profit: $33.3089

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $39.1724
 Real profit: $33.3089
 Improvement over base: $3.1025 (10.3%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 37]
Competitor stations: [26] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_15        mlp  ...  continuous         1
3  profit_37        mlp  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 634 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $37.32
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.498/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.482/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.602/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $37.32
Solution prices: 11:0.800, 14:0.498, 15:0.482, 26:0.600, 37:0.602

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.49826840055314303, 15: 0.48183069748789664, 26: 0.6, 37: 0.6022118132725137}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.191804573218352

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.932422578483887

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.288983126693943

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.19
EV 2: Objective = 11.93
EV 3: Objective = 7.29

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.49826840055314303), '15': np.float64(0.48183069748789664), '26': np.float64(0.6), '37': np.float64(0.6022118132725137)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.498=$0.8221 + t11:4.558kWh*$0.498=$2.2713 + t12:6.600kWh*$0.498=$3.2886 + t13:6.600kWh*$0.498=$3.2886 + t14:1.910kWh*$0.498=$0.9516
  Station 15: t11:5.310kWh*$0.482=$2.5587 + t12:7.200kWh*$0.482=$3.4692 + t13:7.200kWh*$0.482=$3.4692 + t14:7.200kWh*$0.482=$3.4692 + t15:1.541kWh*$0.482=$0.7427
  Station 37: t14:0.122kWh*$0.602=$0.0734 + t15:3.600kWh*$0.602=$2.1680 + t16:3.319kWh*$0.602=$1.9988 + t17:3.433kWh*$0.602=$2.0675

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $10.2091
  Station 15: $13.2108
  Station 26: $0.0000
  Station 37: $6.1593

Total Revenue: $30.6388
Total Cost: $1.0595
Profit: $29.5792
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(10.209122363392314), '15': np.float64(13.210800843091258), '26': np.float64(0.0), '37': np.float64(6.159315167500605)}
Real profit: $29.5792

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $37.3168
 Real profit: $29.5792
 Improvement over base: $-0.6272 (-2.1%)
✓ Completed combination 27/31

PROGRESS: Combination 28/31 - [11, 14, 26, 37]
Remaining: 3 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 26, 37]
============================================================

Creating synthetic aggregator data for stations [11, 14, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 26, 37]
Competitor stations: [15]
Base case profit: $16.4787


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26, 37]
Competitor stations: [15] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_26     linear  ...  continuous         1
3  profit_37     linear  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.34
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.34
Solution prices: 11:0.200, 14:0.800, 15:0.500, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.8, 15: 0.5, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.545437549866309

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.787371614933077

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546242

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.55
EV 2: Objective = 12.79
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:1.763kWh*$0.200=$0.3526 + t11:10.837kWh*$0.200=$2.1675 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:0.278kWh*$0.200=$0.0556
  Station 15: t11:1.868kWh*$0.500=$0.9340 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:1.732kWh*$0.500=$0.8660
  Station 37: t16:4.385kWh*$0.800=$3.5082 + t17:7.200kWh*$0.800=$5.7600 + t18:4.611kWh*$0.800=$3.6890 + t19:1.273kWh*$0.800=$1.0184

Cost breakdown by time period:
  t9: s11:1.763kWh*$0.075=$0.1329
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:1.868kWh*$0.019=$0.0352
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:0.278kWh*$0.018=$0.0049 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:1.732kWh*$0.015=$0.0260
  t16: s37:4.385kWh*$0.013=$0.0577
  t17: s37:7.200kWh*$0.014=$0.1015
  t18: s37:4.611kWh*$0.012=$0.0538
  t19: s37:1.273kWh*$0.015=$0.0187

Profit breakdown by station:
  Station 11: $6.5476
  Station 14: $0.0000
  Station 15: $6.9513
  Station 26: $0.0000
  Station 37: $13.7439

Total Revenue: $28.4715
Total Cost: $1.2286
Profit: $27.2429
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.5476239144777635), '14': np.float64(0.0), '15': np.float64(6.951347453376001), '26': np.float64(0.0), '37': np.float64(13.743895232555301)}
Real profit: $20.2915

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $22.3386
 Real profit: $20.2915
 Improvement over base: $3.8128 (23.1%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26, 37]
Competitor stations: [15] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_26         rf  ...  continuous         1
3  profit_37         rf  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 259 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $36.62
Charging prices:
  Station 11 (AGGREGATOR): $0.472/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.621/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $36.62
Solution prices: 11:0.472, 14:0.800, 15:0.500, 26:0.621, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4724999964237213, 14: 0.7995010183512936, 15: 0.5, 26: 0.6205009983241325, 37: 0.7985010014235745}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.019780008222932

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 16.308955687208826

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.087082137162426

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.02
EV 2: Objective = 16.31
EV 3: Objective = 7.09

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4724999964237213), '14': np.float64(0.7995010183512936), '15': np.float64(0.5), '26': np.float64(0.6205009983241325), '37': np.float64(0.7985010014235745)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.472=$2.4678 + t12:6.600kWh*$0.472=$3.1185 + t13:3.801kWh*$0.472=$1.7961
  Station 14: t11:4.558kWh*$0.800=$3.6445 + t12:3.321kWh*$0.800=$2.6549
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t14:3.627kWh*$0.621=$2.2508 + t15:6.600kWh*$0.621=$4.0953 + t16:6.600kWh*$0.621=$4.0953 + t17:6.733kWh*$0.621=$4.1778 + t18:0.562kWh*$0.621=$0.3489

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:3.600kWh*$0.017=$0.0612
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:3.627kWh*$0.018=$0.0642
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $7.1047
  Station 14: $6.1557
  Station 15: $6.9449
  Station 26: $14.6164
  Station 37: $0.0000

Total Revenue: $35.8498
Total Cost: $1.0282
Profit: $34.8216
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(7.1046563141549175), '14': np.float64(6.155696983273697), '15': np.float64(6.94485560434176), '26': np.float64(14.616398697179742), '37': np.float64(0.0)}
Real profit: $27.8768

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $36.6226
 Real profit: $27.8768
 Improvement over base: $11.3981 (69.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26, 37]
Competitor stations: [15] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_26        svm  ...  continuous         1
3  profit_37        svm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $28.32
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $28.32
Solution prices: 11:0.800, 14:0.800, 15:0.500, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.5, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.60267784234339

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 19.686071048533325

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455733173

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 19.69
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t16:4.399kWh*$0.800=$3.5190 + t17:6.600kWh*$0.800=$5.2800 + t18:0.197kWh*$0.800=$0.1573
  Station 15: t10:1.396kWh*$0.500=$0.6982 + t11:8.910kWh*$0.500=$4.4552 + t12:10.800kWh*$0.500=$5.4000 + t13:10.800kWh*$0.500=$5.4000 + t14:9.404kWh*$0.500=$4.7018 + t15:1.541kWh*$0.500=$0.7707
  Station 26: t19:0.151kWh*$0.800=$0.1211 + t20:5.286kWh*$0.800=$4.2289
  Station 37: t16:2.674kWh*$0.800=$2.1395 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665 + s15:1.396kWh*$0.040=$0.0563
  t16: s14:4.399kWh*$0.013=$0.0579 + s37:2.674kWh*$0.013=$0.0352
  t17: s14:6.600kWh*$0.014=$0.0931 + s37:3.433kWh*$0.014=$0.0484
  t18: s14:0.197kWh*$0.012=$0.0023
  t11: s15:8.910kWh*$0.019=$0.1680
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:9.404kWh*$0.018=$0.1664
  t15: s15:1.541kWh*$0.015=$0.0232
  t19: s26:0.151kWh*$0.015=$0.0022
  t20: s26:5.286kWh*$0.020=$0.1033

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $10.0565
  Station 15: $20.6409
  Station 26: $4.2445
  Station 37: $4.8025

Total Revenue: $40.9383
Total Cost: $1.1939
Profit: $39.7444
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(10.05652303678337), '15': np.float64(20.64086584113134), '26': np.float64(4.2445102706739215), '37': np.float64(4.802507621042495)}
Real profit: $19.1035

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $28.3245
 Real profit: $19.1035
 Improvement over base: $2.6248 (15.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26, 37]
Competitor stations: [15] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_26       cart  ...  continuous         1
3  profit_37       cart  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 12 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $43.30
Charging prices:
  Station 11 (AGGREGATOR): $0.433/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.542/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.463/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $43.30
Solution prices: 11:0.433, 14:0.542, 15:0.500, 26:0.463, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4330009983241325, 14: 0.5420009957015282, 15: 0.5, 26: 0.46250099105236586, 37: 0.442500995224691}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.048807409452499

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.130277128393171

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.494632092746841

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.05
EV 2: Objective = 11.13
EV 3: Objective = 6.49

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4330009983241325), '14': np.float64(0.5420009957015282), '15': np.float64(0.5), '26': np.float64(0.46250099105236586), '37': np.float64(0.442500995224691)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.433=$2.2615 + t12:6.600kWh*$0.433=$2.8578 + t13:3.801kWh*$0.433=$1.6460
  Station 14: t11:4.558kWh*$0.542=$2.4707 + t12:5.076kWh*$0.542=$2.7514
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:2.161kWh*$0.443=$0.9564 + t14:7.200kWh*$0.443=$3.1860 + t15:7.200kWh*$0.443=$3.1860 + t16:7.200kWh*$0.443=$3.1860 + t17:5.039kWh*$0.443=$2.2296

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $6.4875
  Station 14: $5.0479
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $12.3059

Total Revenue: $27.7851
Total Cost: $1.0013
Profit: $26.7838
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.48752085122202), '14': np.float64(5.047905511670296), '15': np.float64(2.942447845502969), '26': np.float64(0.0), '37': np.float64(12.305905696343661)}
Real profit: $23.8413

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $43.3032
 Real profit: $23.8413
 Improvement over base: $7.3626 (44.7%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26, 37]
Competitor stations: [15] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_26        gbm  ...  continuous         1
3  profit_37        gbm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 244 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $42.21
Charging prices:
  Station 11 (AGGREGATOR): $0.764/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.771/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.576/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $42.21
Solution prices: 11:0.764, 14:0.771, 15:0.500, 26:0.576, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7635000050067902, 14: 0.770501004284597, 15: 0.5, 26: 0.5760010049998527, 37: 0.7990009949862729}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.725185505656107

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.353678751328237

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.483143327056194

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.73
EV 2: Objective = 15.35
EV 3: Objective = 9.48

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7635000050067902), '14': np.float64(0.770501004284597), '15': np.float64(0.5), '26': np.float64(0.5760010049998527), '37': np.float64(0.7990009949862729)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.771=$3.5123 + t12:3.321kWh*$0.771=$2.5586
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t11:1.348kWh*$0.576=$0.7763 + t12:6.600kWh*$0.576=$3.8016 + t13:6.600kWh*$0.576=$3.8016 + t14:6.229kWh*$0.576=$3.5882 + t15:6.600kWh*$0.576=$3.8016 + t16:6.600kWh*$0.576=$3.8016 + t17:6.733kWh*$0.576=$3.8782 + t18:0.562kWh*$0.576=$0.3239

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:6.229kWh*$0.018=$0.1102
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.9272
  Station 15: $6.9449
  Station 26: $23.1230
  Station 37: $0.0000

Total Revenue: $37.0438
Total Cost: $1.0487
Profit: $35.9950
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.927203776900994), '15': np.float64(6.944855604341759), '26': np.float64(23.122961426759833), '37': np.float64(0.0)}
Real profit: $29.0502

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $42.2109
 Real profit: $29.0502
 Improvement over base: $12.5715 (76.3%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 26, 37]
Competitor stations: [15] with fixed prices: [np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1
3  profit_37        mlp  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 784 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $40.02
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.651/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.640/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $40.02
Solution prices: 11:0.800, 14:0.651, 15:0.500, 26:0.640, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.6512338337955758, 15: 0.5, 26: 0.6395106544941005, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.145625874367642

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.501850387892308

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.776377848465364

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.15
EV 2: Objective = 15.50
EV 3: Objective = 7.78

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6512338337955758), '15': np.float64(0.5), '26': np.float64(0.6395106544941005), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.651=$1.0745 + t11:4.558kWh*$0.651=$2.9686 + t12:3.321kWh*$0.651=$2.1625
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 26: t14:3.627kWh*$0.640=$2.3198 + t15:6.600kWh*$0.640=$4.2208 + t16:6.600kWh*$0.640=$4.2208 + t17:6.733kWh*$0.640=$4.3058 + t18:0.562kWh*$0.640=$0.3596

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224
  t14: s15:7.200kWh*$0.018=$0.1274 + s26:3.627kWh*$0.018=$0.0642
  t15: s15:1.541kWh*$0.015=$0.0232 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.9955
  Station 15: $13.7277
  Station 26: $15.0750
  Station 37: $0.0000

Total Revenue: $35.8582
Total Cost: $1.0600
Profit: $34.7982
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.995507178134146), '15': np.float64(13.72774866959416), '26': np.float64(15.074961315194836), '37': np.float64(0.0)}
Real profit: $21.0705

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $40.0183
 Real profit: $21.0705
 Improvement over base: $4.5918 (27.9%)
✓ Completed combination 28/31

PROGRESS: Combination 29/31 - [11, 15, 26, 37]
Remaining: 2 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15, 26, 37]
============================================================

Creating synthetic aggregator data for stations [11, 15, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15, 26, 37]
Competitor stations: [14]
Base case profit: $23.6763


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26, 37]
Competitor stations: [14] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1
2  profit_26     linear  ...  continuous         1
3  profit_37     linear  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.04
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.04
Solution prices: 11:0.200, 14:0.600, 15:0.200, 26:0.200, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.6, 15: 0.2, 26: 0.2, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 4.0888204348797075

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 7.798172721173701

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546292

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 4.09
EV 2: Objective = 7.80
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.6), '15': np.float64(0.2), '26': np.float64(0.2), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.200=$1.0446 + t12:6.600kWh*$0.200=$1.3200 + t13:3.801kWh*$0.200=$0.7603 + t18:1.978kWh*$0.200=$0.3957 + t19:6.600kWh*$0.200=$1.3200 + t20:0.442kWh*$0.200=$0.0885
  Station 14: t9:2.193kWh*$0.600=$1.3156
  Station 15: t11:4.945kWh*$0.200=$0.9890 + t12:4.108kWh*$0.200=$0.8216 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:2.216kWh*$0.200=$0.4432
  Station 26: t14:5.473kWh*$0.200=$1.0947 + t15:6.600kWh*$0.200=$1.3200 + t16:5.153kWh*$0.200=$1.0307 + t20:3.697kWh*$0.200=$0.7393 + t21:6.600kWh*$0.200=$1.3200 + t22:0.320kWh*$0.200=$0.0640

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s15:4.945kWh*$0.019=$0.0933
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:4.108kWh*$0.017=$0.0713
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:3.600kWh*$0.017=$0.0612
  t18: s11:1.978kWh*$0.012=$0.0231
  t19: s11:6.600kWh*$0.015=$0.0971
  t20: s11:0.442kWh*$0.020=$0.0086 + s26:3.697kWh*$0.020=$0.0722
  t9: s14:2.193kWh*$0.075=$0.1653
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:5.473kWh*$0.018=$0.0968
  t15: s15:2.216kWh*$0.015=$0.0333 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:5.153kWh*$0.013=$0.0678
  t21: s26:6.600kWh*$0.062=$0.4108
  t22: s26:0.320kWh*$0.068=$0.0218

Profit breakdown by station:
  Station 11: $4.5225
  Station 14: $1.1503
  Station 15: $3.3711
  Station 26: $4.8000
  Station 37: $0.0000

Total Revenue: $15.5071
Total Cost: $1.6633
Profit: $13.8438
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.522458657994437), '14': np.float64(1.1502851446781241), '15': np.float64(3.371076690854347), '26': np.float64(4.799990395752105), '37': np.float64(0.0)}
Real profit: $12.6935

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $21.0354
 Real profit: $12.6935
 Improvement over base: $-10.9827 (-46.4%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26, 37]
Competitor stations: [14] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1
2  profit_26         rf  ...  continuous         1
3  profit_37         rf  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 259 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $28.84
Charging prices:
  Station 11 (AGGREGATOR): $0.405/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.472/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.459/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.497/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $28.84
Solution prices: 11:0.405, 14:0.600, 15:0.472, 26:0.459, 37:0.497

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4045010076224571, 14: 0.6, 15: 0.47200098795292433, 26: 0.45850099784729537, 37: 0.49699999392032623}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.42637887606547

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.120855517090941

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.067157433403314

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.43
EV 2: Objective = 12.12
EV 3: Objective = 6.07

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4045010076224571), '14': np.float64(0.6), '15': np.float64(0.47200098795292433), '26': np.float64(0.45850099784729537), '37': np.float64(0.49699999392032623)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.405=$2.1126 + t12:6.600kWh*$0.405=$2.6697 + t13:3.801kWh*$0.405=$1.5376
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.472=$1.6809 + t12:0.508kWh*$0.472=$0.2398
  Station 26: t14:9.101kWh*$0.459=$4.1727 + t15:13.200kWh*$0.459=$6.0522 + t16:11.753kWh*$0.459=$5.3889 + t17:0.399kWh*$0.459=$0.1831

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s26:9.101kWh*$0.018=$0.1610
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $6.0422
  Station 14: $4.5838
  Station 15: $1.8447
  Station 26: $15.2772
  Station 37: $0.0000

Total Revenue: $28.7650
Total Cost: $1.0170
Profit: $27.7480
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.042234747739173), '14': np.float64(4.583814043740211), '15': np.float64(1.8447178658748247), '26': np.float64(15.27721913887667), '37': np.float64(0.0)}
Real profit: $23.1642

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $28.8382
 Real profit: $23.1642
 Improvement over base: $-0.5121 (-2.2%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26, 37]
Competitor stations: [14] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1
2  profit_26        svm  ...  continuous         1
3  profit_37        svm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.52
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.52
Solution prices: 11:0.800, 14:0.600, 15:0.800, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.6, 15: 0.8, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.954567294933131

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.682362377332439

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.560748050878438

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.95
EV 2: Objective = 14.68
EV 3: Objective = 9.56

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.600=$3.5390 + t11:15.277kWh*$0.600=$9.1662 + t12:13.713kWh*$0.600=$8.2278 + t13:13.200kWh*$0.600=$7.9200 + t14:4.082kWh*$0.600=$2.4491
  Station 15: t13:2.690kWh*$0.800=$2.1523
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:6.279kWh*$0.800=$5.0231 + t16:1.518kWh*$0.800=$1.2144

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $30.2414
  Station 15: $2.1066
  Station 26: $0.0000
  Station 37: $6.2184

Total Revenue: $39.7892
Total Cost: $1.2228
Profit: $38.5664
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(30.2414006447175), '15': np.float64(2.1066028535804127), '26': np.float64(0.0), '37': np.float64(6.21844425500218)}
Real profit: $8.3250

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $22.5228
 Real profit: $8.3250
 Improvement over base: $-15.3512 (-64.8%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26, 37]
Competitor stations: [14] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1
2  profit_26       cart  ...  continuous         1
3  profit_37       cart  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 12 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $40.67
Charging prices:
  Station 11 (AGGREGATOR): $0.433/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.560/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.601/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $40.67
Solution prices: 11:0.433, 14:0.600, 15:0.560, 26:0.439, 37:0.601

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4330009983241325, 14: 0.6, 15: 0.5604999959468842, 26: 0.43850100201962056, 37: 0.6014999747276306}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.441347614578863

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.790103420623904

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.219376034267761

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.44
EV 2: Objective = 11.79
EV 3: Objective = 7.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4330009983241325), '14': np.float64(0.6), '15': np.float64(0.5604999959468842), '26': np.float64(0.43850100201962056), '37': np.float64(0.6014999747276306)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.560=$1.9960 + t12:0.508kWh*$0.560=$0.2848
  Station 26: t11:1.348kWh*$0.439=$0.5909 + t12:6.600kWh*$0.439=$2.8941 + t13:6.600kWh*$0.439=$2.8941 + t14:11.703kWh*$0.439=$5.1317 + t15:13.200kWh*$0.439=$5.7882 + t16:11.753kWh*$0.439=$5.1539 + t17:0.399kWh*$0.439=$0.1751

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $2.2048
  Station 26: $21.8101
  Station 37: $0.0000

Total Revenue: $29.6363
Total Cost: $1.0375
Profit: $28.5987
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043739568), '15': np.float64(2.2048437356453885), '26': np.float64(21.810080279507208), '37': np.float64(0.0)}
Real profit: $24.0149

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $40.6746
 Real profit: $24.0149
 Improvement over base: $0.3387 (1.4%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26, 37]
Competitor stations: [14] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1
2  profit_26        gbm  ...  continuous         1
3  profit_37        gbm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 244 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $37.76
Charging prices:
  Station 11 (AGGREGATOR): $0.795/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.670/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.556/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.693/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $37.76
Solution prices: 11:0.795, 14:0.600, 15:0.670, 26:0.556, 37:0.693

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7945000231266022, 14: 0.6, 15: 0.6695010231196648, 26: 0.5555000007152557, 37: 0.6930006056768117}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.802043071239922

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.724987029424998

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.145619676417878

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.80
EV 2: Objective = 13.72
EV 3: Objective = 9.15

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7945000231266022), '14': np.float64(0.6), '15': np.float64(0.6695010231196648), '26': np.float64(0.5555000007152557), '37': np.float64(0.6930006056768117)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.670=$2.3842 + t12:0.508kWh*$0.670=$0.3402
  Station 26: t11:1.348kWh*$0.556=$0.7486 + t12:6.600kWh*$0.556=$3.6663 + t13:6.600kWh*$0.556=$3.6663 + t14:11.703kWh*$0.556=$6.5009 + t15:13.200kWh*$0.556=$7.3326 + t16:11.753kWh*$0.556=$6.5290 + t17:0.399kWh*$0.556=$0.2218

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $2.6484
  Station 26: $27.8476
  Station 37: $0.0000

Total Revenue: $36.1173
Total Cost: $1.0375
Profit: $35.0798
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740004), '15': np.float64(2.648397743833314), '26': np.float64(27.8475915917482), '37': np.float64(0.0)}
Real profit: $30.4960

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $37.7641
 Real profit: $30.4960
 Improvement over base: $6.8197 (28.8%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 15, 26, 37]
Competitor stations: [14] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1
3  profit_37        mlp  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 784 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.67
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.442/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.552/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.685/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.67
Solution prices: 11:0.800, 14:0.600, 15:0.442, 26:0.552, 37:0.685

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.6, 15: 0.4423059088141986, 26: 0.5522321976498271, 37: 0.6850755267550885}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.770270455882752

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 13.67094538241261

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.09181934522911

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.77
EV 2: Objective = 13.67
EV 3: Objective = 9.09

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.4423059088141986), '26': np.float64(0.5522321976498271), '37': np.float64(0.6850755267550885)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.442=$1.5751 + t12:3.600kWh*$0.442=$1.5923 + t13:3.600kWh*$0.442=$1.5923 + t14:3.600kWh*$0.442=$1.5923 + t15:0.039kWh*$0.442=$0.0172
  Station 26: t11:1.348kWh*$0.552=$0.7442 + t12:6.600kWh*$0.552=$3.6447 + t13:6.600kWh*$0.552=$3.6447 + t14:6.229kWh*$0.552=$3.4401 + t15:6.600kWh*$0.552=$3.6447 + t16:6.600kWh*$0.552=$3.6447 + t17:6.733kWh*$0.552=$3.7181 + t18:0.562kWh*$0.552=$0.3105

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:6.229kWh*$0.018=$0.1102
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $6.1141
  Station 26: $22.1420
  Station 37: $0.0000

Total Revenue: $33.8886
Total Cost: $1.0487
Profit: $32.8398
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043738046), '15': np.float64(6.114060691266225), '26': np.float64(22.141966489127388), '37': np.float64(0.0)}
Real profit: $28.2560

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $32.6684
 Real profit: $28.2560
 Improvement over base: $4.5798 (19.3%)
✓ Completed combination 29/31

PROGRESS: Combination 30/31 - [14, 15, 26, 37]
Remaining: 1 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15, 26, 37]
============================================================

Creating synthetic aggregator data for stations [14, 15, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15, 26, 37]
Competitor stations: [11]
Base case profit: $30.2064


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26, 37]
Competitor stations: [11] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_14     linear  ...  continuous         1
1  profit_15     linear  ...  continuous         1
2  profit_26     linear  ...  continuous         1
3  profit_37     linear  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.11
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.11
Solution prices: 11:0.600, 14:0.800, 15:0.200, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.2, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.455477842346274

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.716316950185314

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 3.9651293822933216

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.46
EV 2: Objective = 14.72
EV 3: Objective = 3.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.2), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t16:1.650kWh*$0.800=$1.3200
  Station 15: t10:1.396kWh*$0.200=$0.2793 + t11:8.910kWh*$0.200=$1.7821 + t12:10.800kWh*$0.200=$2.1600 + t13:10.800kWh*$0.200=$2.1600 + t14:9.404kWh*$0.200=$1.8807 + t15:1.541kWh*$0.200=$0.3083
  Station 37: t16:2.674kWh*$0.800=$2.1395 + t17:6.096kWh*$0.800=$4.8769 + t18:3.600kWh*$0.800=$2.8800 + t19:3.600kWh*$0.800=$2.8800 + t20:3.600kWh*$0.800=$2.8800 + t21:0.449kWh*$0.800=$0.3592

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665 + s15:1.396kWh*$0.040=$0.0563
  t16: s14:1.650kWh*$0.013=$0.0217 + s37:2.674kWh*$0.013=$0.0352
  t11: s15:8.910kWh*$0.019=$0.1680
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:9.404kWh*$0.018=$0.1664
  t15: s15:1.541kWh*$0.015=$0.0232
  t17: s37:6.096kWh*$0.014=$0.0860
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:0.449kWh*$0.062=$0.0279

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.5518
  Station 15: $7.7854
  Station 26: $0.0000
  Station 37: $15.7012

Total Revenue: $27.2260
Total Cost: $1.1876
Profit: $26.0384
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.5517626200000003), '15': np.float64(7.785351181297734), '26': np.float64(0.0), '37': np.float64(15.701238995514581)}
Real profit: $26.0384

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $24.1069
 Real profit: $26.0384
 Improvement over base: $-4.1681 (-13.8%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26, 37]
Competitor stations: [11] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_14         rf  ...  continuous         1
1  profit_15         rf  ...  continuous         1
2  profit_26         rf  ...  continuous         1
3  profit_37         rf  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 304 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $42.91
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.796/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.621/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $42.91
Solution prices: 11:0.600, 14:0.800, 15:0.796, 26:0.621, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7995010183512936, 15: 0.7955010102450619, 26: 0.6205009983241325, 37: 0.7985010014235745}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.369222288311253

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 16.308955687208538

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 10.215780616027578

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.37
EV 2: Objective = 16.31
EV 3: Objective = 10.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7995010183512936), '15': np.float64(0.7955010102450619), '26': np.float64(0.6205009983241325), '37': np.float64(0.7985010014235745)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.800=$3.6445 + t12:3.321kWh*$0.800=$2.6549
  Station 15: t11:3.561kWh*$0.796=$2.8329 + t12:0.508kWh*$0.796=$0.4042
  Station 26: t11:1.348kWh*$0.621=$0.8362 + t12:6.600kWh*$0.621=$4.0953 + t13:6.600kWh*$0.621=$4.0953 + t14:11.703kWh*$0.621=$7.2616 + t15:13.200kWh*$0.621=$8.1906 + t16:11.753kWh*$0.621=$7.2930 + t17:0.399kWh*$0.621=$0.2478

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.1557
  Station 15: $3.1611
  Station 26: $31.2018
  Station 37: $0.0000

Total Revenue: $41.5562
Total Cost: $1.0375
Profit: $40.5187
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.155696983273399), '15': np.float64(3.1611250159581563), '26': np.float64(31.201844728490478), '37': np.float64(0.0)}
Real profit: $40.5187

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $42.9058
 Real profit: $40.5187
 Improvement over base: $10.3122 (34.1%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26, 37]
Competitor stations: [11] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_14        svm  ...  continuous         1
1  profit_15        svm  ...  continuous         1
2  profit_26        svm  ...  continuous         1
3  profit_37        svm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 4 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $33.47
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $33.47
Solution prices: 11:0.600, 14:0.800, 15:0.800, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.8, 15: 0.8, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 15.749877842345967

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 33.260270065432806

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 13.171009418025518

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 15.75
EV 2: Objective = 33.26
EV 3: Objective = 13.17

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.917kWh*$0.800=$2.3336 + t11:6.600kWh*$0.800=$5.2800 + t12:1.238kWh*$0.800=$0.9904
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:3.600kWh*$0.800=$2.8800 + t13:3.600kWh*$0.800=$2.8800 + t14:3.600kWh*$0.800=$2.8800 + t15:0.039kWh*$0.800=$0.0311
  Station 26: t11:1.348kWh*$0.800=$1.0781 + t12:6.600kWh*$0.800=$5.2800 + t13:6.600kWh*$0.800=$5.2800 + t14:2.602kWh*$0.800=$2.0817
  Station 37: t14:1.467kWh*$0.800=$1.1738 + t15:3.600kWh*$0.800=$2.8800 + t16:6.274kWh*$0.800=$5.0195 + t17:7.033kWh*$0.800=$5.6266 + t18:2.133kWh*$0.800=$1.7062

Cost breakdown by time period:
  t10: s14:2.917kWh*$0.040=$0.1176
  t11: s14:6.600kWh*$0.019=$0.1245 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:1.238kWh*$0.017=$0.0215 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:2.602kWh*$0.018=$0.0460 + s37:1.467kWh*$0.018=$0.0260
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:2.133kWh*$0.012=$0.0249

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $8.3405
  Station 15: $11.2649
  Station 26: $13.4215
  Station 37: $16.1194

Total Revenue: $50.2500
Total Cost: $1.1036
Profit: $49.1464
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(8.340506513557605), '15': np.float64(11.264855604341795), '26': np.float64(13.421546116349804), '37': np.float64(16.119448058964437)}
Real profit: $49.1464

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $33.4731
 Real profit: $49.1464
 Improvement over base: $18.9399 (62.7%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26, 37]
Competitor stations: [11] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_14       cart  ...  continuous         1
1  profit_15       cart  ...  continuous         1
2  profit_26       cart  ...  continuous         1
3  profit_37       cart  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 12 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $48.29
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.400/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.514/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.601/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $48.29
Solution prices: 11:0.600, 14:0.400, 15:0.514, 26:0.439, 37:0.601

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.40000099105236586, 15: 0.5140009985625511, 26: 0.4385010020196205, 37: 0.6014999747276306}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.259699564891164

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.174986795025905

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.461621787187235

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.26
EV 2: Objective = 10.17
EV 3: Objective = 7.46

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.40000099105236586), '15': np.float64(0.5140009985625511), '26': np.float64(0.4385010020196205), '37': np.float64(0.6014999747276306)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.400=$1.2915 + t11:11.158kWh*$0.400=$4.4634 + t12:11.444kWh*$0.400=$4.5777 + t13:6.600kWh*$0.400=$2.6400 + t14:1.910kWh*$0.400=$0.7639
  Station 15: t11:3.561kWh*$0.514=$1.8304 + t12:0.508kWh*$0.514=$0.2612
  Station 26: t14:9.814kWh*$0.439=$4.3033 + t15:6.600kWh*$0.439=$2.8941 + t16:5.153kWh*$0.439=$2.2598
  Station 37: t15:1.800kWh*$0.601=$1.0824 + t16:2.742kWh*$0.601=$1.6492

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:11.444kWh*$0.017=$0.1987 + s15:0.508kWh*$0.017=$0.0088
  t13: s14:6.600kWh*$0.017=$0.1122
  t14: s14:1.910kWh*$0.018=$0.0338 + s26:9.814kWh*$0.018=$0.1736
  t15: s26:6.600kWh*$0.015=$0.0992 + s37:1.800kWh*$0.015=$0.0270
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.742kWh*$0.013=$0.0361

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $13.0512
  Station 15: $2.0156
  Station 26: $9.1166
  Station 37: $2.6685

Total Revenue: $28.0170
Total Cost: $1.1650
Profit: $26.8519
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(13.051238403135594), '15': np.float64(2.0156270172207056), '26': np.float64(9.116569258571943), '37': np.float64(2.6685109194134604)}
Real profit: $26.8519

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $48.2883
 Real profit: $26.8519
 Improvement over base: $-3.3545 (-11.1%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26, 37]
Competitor stations: [11] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_14        gbm  ...  continuous         1
1  profit_15        gbm  ...  continuous         1
2  profit_26        gbm  ...  continuous         1
3  profit_37        gbm  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 244 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $46.87
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.798/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.723/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.576/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $46.87
Solution prices: 11:0.600, 14:0.798, 15:0.723, 26:0.576, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7975010142981773, 15: 0.7225009964167839, 26: 0.5760010049998527, 37: 0.7990009949862729}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 12.348124721750537

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 19.706243887013784

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.999469448639662

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 12.35
EV 2: Objective = 19.71
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7975010142981773), '15': np.float64(0.7225009964167839), '26': np.float64(0.5760010049998527), '37': np.float64(0.7990009949862729)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.494kWh*$0.600=$6.2967 + t12:13.200kWh*$0.600=$7.9200 + t13:9.604kWh*$0.600=$5.7625
  Station 15: t11:3.561kWh*$0.723=$2.5729 + t12:0.508kWh*$0.723=$0.3671
  Station 26: t14:5.473kWh*$0.576=$3.1526 + t15:6.600kWh*$0.576=$3.8016 + t16:5.153kWh*$0.576=$2.9683 + t17:2.218kWh*$0.576=$1.2775 + t18:6.600kWh*$0.576=$3.8016 + t19:6.600kWh*$0.576=$3.8016 + t20:1.809kWh*$0.576=$1.0419

Cost breakdown by time period:
  t11: s11:10.494kWh*$0.019=$0.1979 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:9.604kWh*$0.017=$0.1632
  t14: s26:5.473kWh*$0.018=$0.0968
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:5.153kWh*$0.013=$0.0678
  t17: s26:2.218kWh*$0.014=$0.0313
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:6.600kWh*$0.015=$0.0971
  t20: s26:1.809kWh*$0.020=$0.0353

Profit breakdown by station:
  Station 11: $19.3888
  Station 14: $0.0000
  Station 15: $2.8641
  Station 26: $19.3407
  Station 37: $0.0000

Total Revenue: $42.7644
Total Cost: $1.1709
Profit: $41.5936
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(19.388816380747553), '14': np.float64(0.0), '15': np.float64(2.864068652627081), '26': np.float64(19.340678491894863), '37': np.float64(0.0)}
Real profit: $22.2047

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $46.8730
 Real profit: $22.2047
 Improvement over base: $-8.0017 (-26.5%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [14, 15, 26, 37]
Competitor stations: [11] with fixed prices: [np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1
3  profit_37        mlp  ...  continuous         1

[4 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 904 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $45.23
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.632/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.576/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.637/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $45.23
Solution prices: 11:0.600, 14:0.632, 15:0.576, 26:0.637, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6321019024279143, 15: 0.5760948325571199, 26: 0.637030179362075, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 12.18113984082255

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.260340904229063

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.772565292161763

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 12.18
EV 2: Objective = 15.26
EV 3: Objective = 8.77

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6321019024279143), '15': np.float64(0.5760948325571199), '26': np.float64(0.637030179362075), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.632=$1.0430 + t11:4.558kWh*$0.632=$2.8814 + t12:6.600kWh*$0.632=$4.1719 + t13:6.600kWh*$0.632=$4.1719 + t14:1.910kWh*$0.632=$1.2072
  Station 15: t11:5.310kWh*$0.576=$3.0593 + t12:7.200kWh*$0.576=$4.1479 + t13:7.200kWh*$0.576=$4.1479 + t14:7.200kWh*$0.576=$4.1479 + t15:1.541kWh*$0.576=$0.8880
  Station 26: t16:5.038kWh*$0.637=$3.2095 + t17:6.733kWh*$0.637=$4.2891 + t18:0.562kWh*$0.637=$0.3582

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274
  t15: s15:1.541kWh*$0.015=$0.0232
  t16: s26:5.038kWh*$0.013=$0.0663
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $13.0622
  Station 15: $15.8928
  Station 26: $7.6890
  Station 37: $0.0000

Total Revenue: $37.7230
Total Cost: $1.0790
Profit: $36.6440
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(13.062213980570986), '15': np.float64(15.892777199023726), '26': np.float64(7.6889787730495485), '37': np.float64(0.0)}
Real profit: $36.6440

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $45.2307
 Real profit: $36.6440
 Improvement over base: $6.4375 (21.3%)
✓ Completed combination 30/31

PROGRESS: Combination 31/31 - [11, 14, 15, 26, 37]
Remaining: 0 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 15, 26, 37]
============================================================

Creating synthetic aggregator data for stations [11, 14, 15, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 15, 26, 37]
Competitor stations: []
Base case profit: $30.2064


============================================================
Testing algorithm: linear
============================================================


========================================
Solving aggregator model with linear...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26, 37]
Competitor stations: [] with fixed prices: []
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm linear (R² = 0.2526)
Station 14: Using specified algorithm linear (R² = 0.3857)
Station 15: Using specified algorithm linear (R² = 0.3398)
Station 26: Using specified algorithm linear (R² = 0.4156)
Station 37: Using specified algorithm linear (R² = 0.3700)
     outcome model_type  ...        task objective
0  profit_11     linear  ...  continuous         1
1  profit_14     linear  ...  continuous         1
2  profit_15     linear  ...  continuous         1
3  profit_26     linear  ...  continuous         1
4  profit_37     linear  ...  continuous         1

[5 rows x 5 columns]

Model master:
     outcome model_type                                                                 save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11     linear  ../regressors\linear\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14     linear  ../regressors\linear\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15     linear  ../regressors\linear\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26     linear  ../regressors\linear\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
4  profit_37     linear  ../regressors\linear\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 5 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.53
Charging prices:
  Station 11 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.200/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.53
Solution prices: 11:0.200, 14:0.800, 15:0.200, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.2, 14: 0.8, 15: 0.2, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.003641447040984

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.39609392255974

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 2.999823149546522

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.00
EV 2: Objective = 10.40
EV 3: Objective = 3.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.2), '14': np.float64(0.8), '15': np.float64(0.2), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:1.763kWh*$0.200=$0.3526 + t11:10.096kWh*$0.200=$2.0192 + t12:13.200kWh*$0.200=$2.6400 + t13:10.401kWh*$0.200=$2.0803 + t14:1.914kWh*$0.200=$0.3827
  Station 15: t11:1.868kWh*$0.200=$0.3736 + t12:3.600kWh*$0.200=$0.7200 + t13:3.600kWh*$0.200=$0.7200 + t14:3.600kWh*$0.200=$0.7200 + t15:1.732kWh*$0.200=$0.3464
  Station 26: t17:3.229kWh*$0.800=$2.5835 + t18:3.151kWh*$0.800=$2.5211
  Station 37: t15:2.702kWh*$0.800=$2.1619 + t16:3.600kWh*$0.800=$2.8800 + t17:2.237kWh*$0.800=$1.7900

Cost breakdown by time period:
  t9: s11:1.763kWh*$0.075=$0.1329
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:1.868kWh*$0.019=$0.0352
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:10.401kWh*$0.017=$0.1768 + s15:3.600kWh*$0.017=$0.0612
  t14: s11:1.914kWh*$0.018=$0.0339 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:1.732kWh*$0.015=$0.0260 + s37:2.702kWh*$0.015=$0.0406
  t17: s26:3.229kWh*$0.014=$0.0455 + s37:2.237kWh*$0.014=$0.0315
  t18: s26:3.151kWh*$0.012=$0.0367
  t16: s37:3.600kWh*$0.013=$0.0474

Profit breakdown by station:
  Station 11: $6.7115
  Station 14: $0.0000
  Station 15: $2.6313
  Station 26: $5.0223
  Station 37: $6.7124

Total Revenue: $22.2912
Total Cost: $1.2137
Profit: $21.0775
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.711542640576206), '14': np.float64(0.0), '15': np.float64(2.631347453376), '26': np.float64(5.022285922324732), '37': np.float64(6.712366870741436)}
Real profit: $21.0775

========================================
RESULTS: linear algorithm
========================================
 Predicted profit: $27.5317
 Real profit: $21.0775
 Improvement over base: $-9.1289 (-30.2%)


============================================================
Testing algorithm: rf
============================================================


========================================
Solving aggregator model with rf...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26, 37]
Competitor stations: [] with fixed prices: []
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm rf (R² = 0.3944)
Station 14: Using specified algorithm rf (R² = 0.5058)
Station 15: Using specified algorithm rf (R² = 0.5705)
Station 26: Using specified algorithm rf (R² = 0.5954)
Station 37: Using specified algorithm rf (R² = 0.5368)
     outcome model_type  ...        task objective
0  profit_11         rf  ...  continuous         1
1  profit_14         rf  ...  continuous         1
2  profit_15         rf  ...  continuous         1
3  profit_26         rf  ...  continuous         1
4  profit_37         rf  ...  continuous         1

[5 rows x 5 columns]

Model master:
     outcome model_type                                                             save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11         rf  ../regressors\rf\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14         rf  ../regressors\rf\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15         rf  ../regressors\rf\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26         rf  ../regressors\rf\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
4  profit_37         rf  ../regressors\rf\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 335 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $48.22
Charging prices:
  Station 11 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.796/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.605/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $48.22
Solution prices: 11:0.797, 14:0.800, 15:0.796, 26:0.605, 37:0.799

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7965009973704584, 14: 0.8, 15: 0.7955010102450625, 26: 0.6045009957015282, 37: 0.7985010014235743}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.104620512566001

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 16.04812816342896

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.952360384488705

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.10
EV 2: Objective = 16.05
EV 3: Objective = 9.95

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7965009973704584), '14': np.float64(0.8), '15': np.float64(0.7955010102450625), '26': np.float64(0.6045009957015282), '37': np.float64(0.7985010014235743)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.800=$3.6467 + t12:3.321kWh*$0.800=$2.6565
  Station 15: t11:3.561kWh*$0.796=$2.8329 + t12:0.508kWh*$0.796=$0.4042
  Station 26: t11:1.348kWh*$0.605=$0.8147 + t12:6.600kWh*$0.605=$3.9897 + t13:6.600kWh*$0.605=$3.9897 + t14:11.703kWh*$0.605=$7.0744 + t15:13.200kWh*$0.605=$7.9794 + t16:11.753kWh*$0.605=$7.1049 + t17:0.399kWh*$0.605=$0.2414

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.1596
  Station 15: $3.1611
  Station 26: $30.3762
  Station 37: $0.0000

Total Revenue: $40.7345
Total Cost: $1.0375
Profit: $39.6969
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.159628495737415), '15': np.float64(3.1611250159578352), '26': np.float64(30.376194954502388), '37': np.float64(0.0)}
Real profit: $39.6969

========================================
RESULTS: rf algorithm
========================================
 Predicted profit: $48.2178
 Real profit: $39.6969
 Improvement over base: $9.4905 (31.4%)


============================================================
Testing algorithm: svm
============================================================


========================================
Solving aggregator model with svm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26, 37]
Competitor stations: [] with fixed prices: []
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm svm (R² = 0.3898)
Station 14: Using specified algorithm svm (R² = 0.5429)
Station 15: Using specified algorithm svm (R² = 0.5406)
Station 26: Using specified algorithm svm (R² = 0.5478)
Station 37: Using specified algorithm svm (R² = 0.4425)
     outcome model_type  ...        task objective
0  profit_11        svm  ...  continuous         1
1  profit_14        svm  ...  continuous         1
2  profit_15        svm  ...  continuous         1
3  profit_26        svm  ...  continuous         1
4  profit_37        svm  ...  continuous         1

[5 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        svm  ../regressors\svm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        svm  ../regressors\svm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        svm  ../regressors\svm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26        svm  ../regressors\svm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
4  profit_37        svm  ../regressors\svm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 5 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $40.07
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $40.07
Solution prices: 11:0.800, 14:0.800, 15:0.800, 26:0.800, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.8, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 15.749877842346653

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 18.45866001599852

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 14.1312671276796

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 15.75
EV 2: Objective = 18.46
EV 3: Objective = 14.13

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.800=$2.5830 + t11:11.158kWh*$0.800=$8.9267 + t12:11.444kWh*$0.800=$9.1554 + t13:6.600kWh*$0.800=$5.2800 + t14:1.910kWh*$0.800=$1.5278
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:3.600kWh*$0.800=$2.8800 + t13:3.600kWh*$0.800=$2.8800 + t14:3.600kWh*$0.800=$2.8800 + t15:0.039kWh*$0.800=$0.0311
  Station 37: t13:0.199kWh*$0.800=$0.1591 + t14:3.650kWh*$0.800=$2.9200 + t15:3.600kWh*$0.800=$2.8800 + t16:3.319kWh*$0.800=$2.6552 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:11.444kWh*$0.017=$0.1987 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:3.600kWh*$0.017=$0.0612 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:3.650kWh*$0.018=$0.0646
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $26.7877
  Station 15: $11.2649
  Station 26: $0.0000
  Station 37: $11.1468

Total Revenue: $50.3540
Total Cost: $1.1546
Profit: $49.1994
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(26.787716318349794), '15': np.float64(11.264855604341767), '26': np.float64(0.0), '37': np.float64(11.146793253230154)}
Real profit: $49.1994

========================================
RESULTS: svm algorithm
========================================
 Predicted profit: $40.0725
 Real profit: $49.1994
 Improvement over base: $18.9929 (62.9%)


============================================================
Testing algorithm: cart
============================================================


========================================
Solving aggregator model with cart...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26, 37]
Competitor stations: [] with fixed prices: []
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm cart (R² = 0.4133)
Station 14: Using specified algorithm cart (R² = 0.4991)
Station 15: Using specified algorithm cart (R² = 0.5669)
Station 26: Using specified algorithm cart (R² = 0.6695)
Station 37: Using specified algorithm cart (R² = 0.4953)
     outcome model_type  ...        task objective
0  profit_11       cart  ...  continuous         1
1  profit_14       cart  ...  continuous         1
2  profit_15       cart  ...  continuous         1
3  profit_26       cart  ...  continuous         1
4  profit_37       cart  ...  continuous         1

[5 rows x 5 columns]

Model master:
     outcome model_type                                                               save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11       cart  ../regressors\cart\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14       cart  ../regressors\cart\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15       cart  ../regressors\cart\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26       cart  ../regressors\cart\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
4  profit_37       cart  ../regressors\cart\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 15 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $49.55
Charging prices:
  Station 11 (AGGREGATOR): $0.433/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.400/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.514/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.439/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.443/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $49.55
Solution prices: 11:0.433, 14:0.400, 15:0.514, 26:0.439, 37:0.443

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4330009983241325, 14: 0.40000099105236586, 15: 0.5140009985625511, 26: 0.4385010020196205, 37: 0.442500995224691}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.993319862654605

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.481795411129713

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.323912868036716

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.99
EV 2: Objective = 9.48
EV 3: Objective = 6.32

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4330009983241325), '14': np.float64(0.40000099105236586), '15': np.float64(0.5140009985625511), '26': np.float64(0.4385010020196205), '37': np.float64(0.442500995224691)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.400=$2.3593 + t11:15.277kWh*$0.400=$6.1108 + t12:13.713kWh*$0.400=$5.4852 + t13:13.200kWh*$0.400=$5.2800 + t14:4.082kWh*$0.400=$1.6327
  Station 15: t13:2.690kWh*$0.514=$1.3829
  Station 37: t15:4.478kWh*$0.443=$1.9817 + t16:3.615kWh*$0.443=$1.5997

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722
  t15: s37:4.478kWh*$0.015=$0.0673
  t16: s37:3.615kWh*$0.013=$0.0476

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $19.8075
  Station 15: $1.3371
  Station 26: $0.0000
  Station 37: $3.4665

Total Revenue: $25.8323
Total Cost: $1.2212
Profit: $24.6111
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(19.807451576867305), '15': np.float64(1.3371465164641), '26': np.float64(0.0), '37': np.float64(3.4665222398609754)}
Real profit: $24.6111

========================================
RESULTS: cart algorithm
========================================
 Predicted profit: $49.5488
 Real profit: $24.6111
 Improvement over base: $-5.5953 (-18.5%)


============================================================
Testing algorithm: gbm
============================================================


========================================
Solving aggregator model with gbm...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26, 37]
Competitor stations: [] with fixed prices: []
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm gbm (R² = 0.4316)
Station 14: Using specified algorithm gbm (R² = 0.6610)
Station 15: Using specified algorithm gbm (R² = 0.6104)
Station 26: Using specified algorithm gbm (R² = 0.7428)
Station 37: Using specified algorithm gbm (R² = 0.6342)
     outcome model_type  ...        task objective
0  profit_11        gbm  ...  continuous         1
1  profit_14        gbm  ...  continuous         1
2  profit_15        gbm  ...  continuous         1
3  profit_26        gbm  ...  continuous         1
4  profit_37        gbm  ...  continuous         1

[5 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
4  profit_37        gbm  ../regressors\gbm\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 305 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $59.62
Charging prices:
  Station 11 (AGGREGATOR): $0.762/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.736/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.576/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $59.62
Solution prices: 11:0.762, 14:0.799, 15:0.736, 26:0.576, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7620009945094357, 14: 0.7985000014305124, 15: 0.7355000078678131, 26: 0.5760010049998517, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 12.398905280703925

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.565460628176748

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 10.89538206203516

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 12.40
EV 2: Objective = 15.57
EV 3: Objective = 10.90

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7620009945094357), '14': np.float64(0.7985000014305124), '15': np.float64(0.7355000078678131), '26': np.float64(0.5760010049998517), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.787kWh*$0.799=$1.4268 + t11:4.558kWh*$0.799=$3.6399 + t12:3.321kWh*$0.799=$2.6515
  Station 15: t11:3.561kWh*$0.736=$2.6192 + t12:0.508kWh*$0.736=$0.3737
  Station 26: t12:5.006kWh*$0.576=$2.8833 + t13:6.600kWh*$0.576=$3.8016 + t14:14.722kWh*$0.576=$8.4797 + t15:13.200kWh*$0.576=$7.6032 + t16:11.753kWh*$0.576=$6.7699 + t17:0.399kWh*$0.576=$0.2300

Cost breakdown by time period:
  t10: s14:1.787kWh*$0.040=$0.0720
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:5.006kWh*$0.017=$0.0869
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:14.722kWh*$0.018=$0.2605
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.5026
  Station 15: $2.9170
  Station 26: $28.9495
  Station 37: $0.0000

Total Revenue: $40.4789
Total Cost: $1.1099
Profit: $39.3690
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.502550519898057), '15': np.float64(2.9169650682035435), '26': np.float64(28.949502501233486), '37': np.float64(0.0)}
Real profit: $39.3690

========================================
RESULTS: gbm algorithm
========================================
 Predicted profit: $59.6199
 Real profit: $39.3690
 Improvement over base: $9.1626 (30.3%)


============================================================
Testing algorithm: mlp
============================================================


========================================
Solving aggregator model with mlp...
========================================
Using provided input data...
Using competition model...
Total stations: 5
Aggregator-controlled stations: [11, 14, 15, 26, 37]
Competitor stations: [] with fixed prices: []
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Using specified algorithm mlp (R² = 0.4430)
Station 14: Using specified algorithm mlp (R² = 0.6709)
Station 15: Using specified algorithm mlp (R² = 0.6750)
Station 26: Using specified algorithm mlp (R² = 0.8269)
Station 37: Using specified algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_15        mlp  ...  continuous         1
3  profit_26        mlp  ...  continuous         1
4  profit_37        mlp  ...  continuous         1

[5 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
3  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
4  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 935 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $51.97
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.651/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.502/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.639/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $51.97
Solution prices: 11:0.800, 14:0.651, 15:0.502, 26:0.639, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.6510472831988007, 15: 0.5017290632597977, 26: 0.639425804072863, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.626580412849439

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 18.21111249552341

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.799406805182412

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.63
EV 2: Objective = 18.21
EV 3: Objective = 7.80

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6510472831988007), '15': np.float64(0.5017290632597977), '26': np.float64(0.639425804072863), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:1.650kWh*$0.800=$1.3200
  Station 14: t9:2.387kWh*$0.651=$1.5543 + t10:1.650kWh*$0.651=$1.0742
  Station 15: t11:5.310kWh*$0.502=$2.6643 + t12:7.200kWh*$0.502=$3.6124 + t13:7.200kWh*$0.502=$3.6124 + t14:7.200kWh*$0.502=$3.6124 + t15:1.541kWh*$0.502=$0.7734
  Station 26: t12:4.975kWh*$0.639=$3.1810 + t13:6.600kWh*$0.639=$4.2202 + t14:6.600kWh*$0.639=$4.2202 + t15:3.596kWh*$0.639=$2.2994
  Station 37: t16:5.393kWh*$0.800=$4.3143 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t11: s11:1.650kWh*$0.019=$0.0311 + s15:5.310kWh*$0.019=$0.1001
  t9: s14:2.387kWh*$0.075=$0.1800
  t10: s14:1.650kWh*$0.040=$0.0665
  t12: s15:7.200kWh*$0.017=$0.1250 + s26:4.975kWh*$0.017=$0.0864
  t13: s15:7.200kWh*$0.017=$0.1224 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:7.200kWh*$0.018=$0.1274 + s26:6.600kWh*$0.018=$0.1168
  t15: s15:1.541kWh*$0.015=$0.0232 + s26:3.596kWh*$0.015=$0.0540
  t16: s37:5.393kWh*$0.013=$0.0710
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $1.2889
  Station 14: $2.3820
  Station 15: $13.7769
  Station 26: $13.5515
  Station 37: $6.9415

Total Revenue: $39.2053
Total Cost: $1.2645
Profit: $37.9408
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.28888496), '14': np.float64(2.381971905910211), '15': np.float64(13.776943485600047), '26': np.float64(13.551454078056732), '37': np.float64(6.941527133403307)}
Real profit: $37.9408

========================================
RESULTS: mlp algorithm
========================================
 Predicted profit: $51.9717
 Real profit: $37.9408
 Improvement over base: $7.7343 (25.6%)
✓ Completed combination 31/31

================================================================================
SAVING RESULTS
================================================================================
Total experiments completed: 403
Results saved to: ../results/aggregator_37map_alg_comparison_20250615_130521.csv
Log saved to: ../logs/aggregator_37map_alg_comparison_20250615_130521.txt

Results preview:
--------------------------------------------------------------------------------
controlled_stations             type    profit    rc_11    rc_14    rc_15    rc_26    rc_37
                 11        base_case  0.000000 0.600000 0.600000 0.500000 0.600000 0.500000
                 11 linear_predicted  4.362593 0.200000 0.600000      NaN 0.600000      NaN
                 11      linear_real  6.497949 0.200000 0.600000      NaN 0.600000      NaN
                 11     rf_predicted  5.956638 0.350500 0.600000 0.500000 0.600000 0.500000
                 11          rf_real  5.198519 0.350500 0.600000 0.500000 0.600000 0.500000
                 11    svm_predicted  6.272017 0.200000 0.600000 0.500000 0.600000 0.500000
                 11         svm_real  6.490620 0.200000 0.600000 0.500000 0.600000 0.500000
                 11   cart_predicted  8.610152 0.429000 0.600000 0.500000 0.600000 0.500000
                 11        cart_real  6.425009 0.429000 0.600000 0.500000 0.600000 0.500000
                 11    gbm_predicted  8.075072 0.260001 0.600000 0.500000 0.600000 0.500000
                 11         gbm_real  8.707212 0.260001 0.600000 0.500000 0.600000 0.500000
                 11    mlp_predicted  7.353036 0.360117 0.600000 0.500000 0.600000 0.500000
                 11         mlp_real  6.845028 0.360117 0.600000 0.500000 0.600000 0.500000
                 14        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
                 14 linear_predicted  9.834730 0.600000 0.200000 0.500000 0.600000 0.500000
                 14      linear_real  8.128775 0.600000 0.200000 0.500000 0.600000 0.500000
                 14     rf_predicted 11.391471 0.600000 0.397501 0.500000 0.600000 0.500000
                 14          rf_real 19.677027 0.600000 0.397501 0.500000 0.600000 0.500000
                 14    svm_predicted 12.322374 0.600000 0.200000 0.500000 0.600000 0.500000
                 14         svm_real  8.128775 0.600000 0.200000 0.500000 0.600000 0.500000
                 14   cart_predicted 14.158531 0.600000 0.439500 0.500000 0.600000 0.500000
                 14        cart_real 13.644943 0.600000 0.439500 0.500000 0.600000 0.500000
                 14    gbm_predicted 14.335618 0.600000 0.456501 0.500000 0.600000 0.500000
                 14         gbm_real 14.200527 0.600000 0.456501 0.500000 0.600000 0.500000
                 14    mlp_predicted 16.326376 0.600000 0.374836 0.500000 0.600000 0.500000
                 14         mlp_real 18.494570 0.600000 0.374836 0.500000 0.600000 0.500000
                 15        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
                 15 linear_predicted  5.437243 0.600000 0.600000 0.200000 0.600000      NaN
                 15      linear_real  7.785351 0.600000 0.600000 0.200000 0.600000      NaN
                 15     rf_predicted  7.400087 0.600000 0.600000 0.336500 0.600000 0.500000
                 15          rf_real  9.075893 0.600000 0.600000 0.336500 0.600000 0.500000
                 15    svm_predicted  7.896850 0.600000 0.600000 0.200000 0.600000 0.500000
                 15         svm_real  7.785351 0.600000 0.600000 0.200000 0.600000 0.500000
                 15   cart_predicted 10.062903 0.600000 0.600000 0.560500 0.600000 0.500000
                 15        cart_real  3.311961 0.600000 0.600000 0.560500 0.600000 0.500000
                 15    gbm_predicted 11.367904 0.600000 0.600000 0.502000 0.600000 0.500000
                 15         gbm_real  8.725357 0.600000 0.600000 0.502000 0.600000 0.500000
                 15    mlp_predicted  9.918395 0.600000 0.600000 0.396412 0.600000 0.500000
                 15         mlp_real 10.780478 0.600000 0.600000 0.396412 0.600000 0.500000
                 26        base_case  0.000000 0.600000 0.600000 0.500000 0.600000 0.500000
                 26 linear_predicted  9.766379 0.600000 0.600000 0.500000 0.200000 0.500000
                 26      linear_real  9.524537 0.600000 0.600000 0.500000 0.200000 0.500000
                 26     rf_predicted 12.390203 0.600000 0.600000 0.500000 0.432500 0.500000
                 26          rf_real 21.500409 0.600000 0.600000 0.500000 0.432500 0.500000
                 26    svm_predicted 12.895875 0.600000 0.600000 0.500000 0.200000 0.500000
                 26         svm_real  9.517477 0.600000 0.600000 0.500000 0.200000 0.500000
                 26   cart_predicted 19.519967 0.600000 0.600000 0.500000 0.489500 0.500000
                 26        cart_real 10.287444 0.600000 0.600000 0.500000 0.489500 0.500000
                 26    gbm_predicted 17.727972 0.600000 0.600000 0.500000 0.442501 0.500000
                 26         gbm_real 22.016492 0.600000 0.600000 0.500000 0.442501 0.500000
                 26    mlp_predicted 17.901623 0.600000 0.600000 0.500000 0.411140 0.500000
                 26         mlp_real 22.184210 0.600000 0.600000 0.500000 0.411140 0.500000
                 37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
                 37 linear_predicted  7.764131      NaN 0.600000      NaN 0.600000 0.200000
                 37      linear_real  7.965344      NaN 0.600000      NaN 0.600000 0.200000
                 37     rf_predicted  9.130649 0.600000 0.600000 0.500000 0.600000 0.441001
                 37          rf_real 18.376587 0.600000 0.600000 0.500000 0.600000 0.441001
                 37    svm_predicted 10.561471 0.600000 0.600000 0.500000 0.600000 0.200000
                 37         svm_real  7.965344 0.600000 0.600000 0.500000 0.600000 0.200000
                 37   cart_predicted 10.789686 0.600000 0.600000 0.500000 0.600000 0.427000
                 37        cart_real 17.768627 0.600000 0.600000 0.500000 0.600000 0.427000
                 37    gbm_predicted 10.716814 0.600000 0.600000 0.500000 0.600000 0.440501
                 37         gbm_real 12.248306 0.600000 0.600000 0.500000 0.600000 0.440501
                 37    mlp_predicted 13.216659 0.600000 0.600000 0.500000 0.600000 0.460142
                 37         mlp_real 19.203459 0.600000 0.600000 0.500000 0.600000 0.460142
              11|14        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
              11|14 linear_predicted 12.158522 0.200000 0.200000 0.500000 0.600000 0.500000
              11|14      linear_real  9.989385 0.200000 0.200000 0.500000 0.600000 0.500000
              11|14     rf_predicted 15.198129 0.310501 0.364501 0.500000 0.600000 0.500000
              11|14          rf_real 18.157508 0.310501 0.364501 0.500000 0.600000 0.500000
              11|14    svm_predicted 13.770490 0.200000 0.200000 0.500000 0.600000 0.500000
              11|14         svm_real  9.989385 0.200000 0.200000 0.500000 0.600000 0.500000
              11|14   cart_predicted 19.979355 0.368501 0.327001 0.500000 0.600000 0.500000
              11|14        cart_real 17.218079 0.368501 0.327001 0.500000 0.600000 0.500000
              11|14    gbm_predicted 19.862935 0.363001 0.456501 0.500000 0.600000 0.500000
              11|14         gbm_real 14.025842 0.363001 0.456501 0.500000 0.600000 0.500000
              11|14    mlp_predicted 18.658479 0.800000 0.381831 0.500000 0.600000 0.500000
              11|14         mlp_real 18.969325 0.800000 0.381831 0.500000 0.600000 0.500000
              11|15        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
              11|15 linear_predicted  9.600670 0.200000 0.600000 0.200000 0.600000      NaN
              11|15      linear_real  8.952835 0.200000 0.600000 0.200000 0.600000      NaN
              11|15     rf_predicted 12.128659 0.404501 0.600000 0.472001 0.600000 0.500000
              11|15          rf_real 20.347535 0.404501 0.600000 0.472001 0.600000 0.500000
              11|15    svm_predicted 12.214060 0.200000 0.600000 0.200000 0.600000 0.500000
              11|15         svm_real  8.952835 0.200000 0.600000 0.200000 0.600000 0.500000
              11|15   cart_predicted 16.930247 0.507501 0.600000 0.560501 0.600000 0.500000
              11|15        cart_real 10.963482 0.507501 0.600000 0.560501 0.600000 0.500000
              11|15    gbm_predicted 15.881911 0.356501 0.600000 0.438500 0.600000 0.500000
              11|15         gbm_real 17.820398 0.356501 0.600000 0.438500 0.600000 0.500000
              11|15    mlp_predicted 13.949705 0.374598 0.600000 0.265794 0.600000 0.500000
              11|15         mlp_real 15.104378 0.374598 0.600000 0.265794 0.600000 0.500000
              11|26        base_case  0.000000 0.600000 0.600000 0.500000 0.600000 0.500000
              11|26 linear_predicted 13.549273 0.200000 0.600000 0.500000 0.200000 0.500000
              11|26      linear_real 12.230689 0.200000 0.600000 0.500000 0.200000 0.500000
              11|26     rf_predicted 17.602828 0.350500 0.600000 0.500000 0.432500 0.500000
              11|26          rf_real 19.579916 0.350500 0.600000 0.500000 0.432500 0.500000
              11|26    svm_predicted 16.104052 0.200000 0.600000 0.500000 0.200000 0.500000
              11|26         svm_real 12.230689 0.200000 0.600000 0.500000 0.200000 0.500000
              11|26   cart_predicted 26.387312 0.433001 0.600000 0.500000 0.392001 0.500000
              11|26        cart_real 19.410536 0.433001 0.600000 0.500000 0.392001 0.500000
              11|26    gbm_predicted 23.000415 0.275501 0.600000 0.500000 0.442501 0.500000
              11|26         gbm_real 18.752694 0.275501 0.600000 0.500000 0.442501 0.500000
              11|26    mlp_predicted 20.405254 0.347272 0.600000 0.500000 0.411137 0.500000
              11|26         mlp_real 23.415294 0.347272 0.600000 0.500000 0.411137 0.500000
              11|37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
              11|37 linear_predicted 12.126724 0.200000 0.600000      NaN 0.600000 0.200000
              11|37      linear_real 10.756320 0.200000 0.600000      NaN 0.600000 0.200000
              11|37     rf_predicted 14.661201 0.271000 0.600000 0.500000 0.600000 0.441001
              11|37          rf_real 15.111407 0.271000 0.600000 0.500000 0.600000 0.441001
              11|37    svm_predicted 15.254574 0.200000 0.600000 0.500000 0.600000 0.200000
              11|37         svm_real 10.756320 0.200000 0.600000 0.500000 0.600000 0.200000
              11|37   cart_predicted 18.194170 0.411500 0.600000 0.500000 0.600000 0.601500
              11|37        cart_real 19.213133 0.411500 0.600000 0.500000 0.600000 0.601500
              11|37    gbm_predicted 17.861709 0.366501 0.600000 0.500000 0.600000 0.440501
              11|37         gbm_real 17.696826 0.366501 0.600000 0.500000 0.600000 0.440501
              11|37    mlp_predicted 18.685733 0.346954 0.600000 0.500000 0.600000 0.466514
              11|37         mlp_real 23.425292 0.346954 0.600000 0.500000 0.600000 0.466514
              14|15        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
              14|15 linear_predicted 12.767182 0.600000 0.200000 0.200000 0.600000 0.500000
              14|15      linear_real  9.751230 0.600000 0.200000 0.200000 0.600000 0.500000
              14|15     rf_predicted 16.479107 0.600000 0.458000 0.472001 0.600000 0.500000
              14|15          rf_real 22.015332 0.600000 0.458000 0.472001 0.600000 0.500000
              14|15    svm_predicted 14.807155 0.600000 0.200000 0.200000 0.600000 0.500000
              14|15         svm_real  9.751230 0.600000 0.200000 0.200000 0.600000 0.500000
              14|15   cart_predicted 21.535375 0.600000 0.441501 0.560500 0.600000 0.500000
              14|15        cart_real 23.536843 0.600000 0.441501 0.560500 0.600000 0.500000
              14|15    gbm_predicted 24.713673 0.600000 0.458001 0.499501 0.600000 0.500000
              14|15         gbm_real 22.485352 0.600000 0.458001 0.499501 0.600000 0.500000
              14|15    mlp_predicted 20.111583 0.600000 0.408064 0.347936 0.600000 0.500000
              14|15         mlp_real 17.687397 0.600000 0.408064 0.347936 0.600000 0.500000
              14|26        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
              14|26 linear_predicted 15.258492 0.600000 0.200000 0.500000 0.200000 0.500000
              14|26      linear_real 12.482916 0.600000 0.200000 0.500000 0.200000 0.500000
              14|26     rf_predicted 18.317117 0.600000 0.799501 0.500000 0.466500 0.500000
              14|26          rf_real 26.403369 0.600000 0.799501 0.500000 0.466500 0.500000
              14|26    svm_predicted 17.067934 0.600000 0.200000 0.500000 0.200000 0.500000
              14|26         svm_real 12.482916 0.600000 0.200000 0.500000 0.200000 0.500000
              14|26   cart_predicted 33.678498 0.600000 0.384501 0.500000 0.413501 0.500000
              14|26        cart_real 18.998817 0.600000 0.384501 0.500000 0.413501 0.500000
              14|26    gbm_predicted 25.452422 0.600000 0.547500 0.500000 0.459500 0.500000
              14|26         gbm_real 19.412031 0.600000 0.547500 0.500000 0.459500 0.500000
              14|26    mlp_predicted 24.819021 0.600000 0.798031 0.500000 0.421250 0.500000
              14|26         mlp_real 24.062435 0.600000 0.798031 0.500000 0.421250 0.500000
              14|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
              14|37 linear_predicted 15.771025 0.600000 0.200000 0.500000 0.600000 0.200000
              14|37      linear_real 10.874247 0.600000 0.200000 0.500000 0.600000 0.200000
              14|37     rf_predicted 19.054836 0.600000 0.400000 0.500000 0.600000 0.442500
              14|37          rf_real 23.464861 0.600000 0.400000 0.500000 0.600000 0.442500
              14|37    svm_predicted 18.482075 0.600000 0.200000 0.500000 0.600000 0.200000
              14|37         svm_real 10.874247 0.600000 0.200000 0.500000 0.600000 0.200000
              14|37   cart_predicted 22.262159 0.600000 0.452501 0.500000 0.600000 0.414501
              14|37        cart_real 21.201580 0.600000 0.452501 0.500000 0.600000 0.414501
              14|37    gbm_predicted 23.852238 0.600000 0.456501 0.500000 0.600000 0.442500
              14|37         gbm_real 22.098534 0.600000 0.456501 0.500000 0.600000 0.442500
              14|37    mlp_predicted 22.725196 0.600000 0.494745 0.500000 0.600000 0.611818
              14|37         mlp_real 21.710254 0.600000 0.494745 0.500000 0.600000 0.611818
              15|26        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
              15|26 linear_predicted 14.243756 0.600000 0.600000 0.200000 0.200000 0.500000
              15|26      linear_real 12.348840 0.600000 0.600000 0.200000 0.200000 0.500000
              15|26     rf_predicted 18.379004 0.600000 0.600000 0.477501 0.407501 0.500000
              15|26          rf_real 22.077483 0.600000 0.600000 0.477501 0.407501 0.500000
              15|26    svm_predicted 17.405555 0.600000 0.600000 0.200000 0.200000 0.500000
              15|26         svm_real 12.348840 0.600000 0.600000 0.200000 0.200000 0.500000
              15|26   cart_predicted 26.687596 0.600000 0.600000 0.446001 0.489500 0.500000
              15|26        cart_real  6.167270 0.600000 0.600000 0.446001 0.489500 0.500000
              15|26    gbm_predicted 24.117431 0.600000 0.600000 0.498001 0.442501 0.500000
              15|26         gbm_real 23.431288 0.600000 0.600000 0.498001 0.442501 0.500000
              15|26    mlp_predicted 25.866770 0.600000 0.600000 0.633539 0.405323 0.500000
              15|26         mlp_real 22.630403 0.600000 0.600000 0.633539 0.405323 0.500000
              15|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
              15|37 linear_predicted 13.201373 0.600000 0.600000 0.200000 0.600000 0.200000
              15|37      linear_real 13.198934 0.600000 0.600000 0.200000 0.600000 0.200000
              15|37     rf_predicted 16.155843 0.600000 0.600000 0.336500 0.600000 0.497001
              15|37          rf_real 22.870874 0.600000 0.600000 0.336500 0.600000 0.497001
              15|37    svm_predicted 16.782281 0.600000 0.600000 0.200000 0.600000 0.200000
              15|37         svm_real 13.198934 0.600000 0.600000 0.200000 0.600000 0.200000
              15|37   cart_predicted 26.750071 0.600000 0.600000 0.514000 0.600000 0.399500
              15|37        cart_real 21.075049 0.600000 0.600000 0.514000 0.600000 0.399500
              15|37    gbm_predicted 22.084717 0.600000 0.600000 0.498001 0.600000 0.440501
              15|37         gbm_real 22.540014 0.600000 0.600000 0.498001 0.600000 0.440501
              15|37    mlp_predicted 22.286947 0.600000 0.600000 0.495059 0.600000 0.460498
              15|37         mlp_real 22.449943 0.600000 0.600000 0.495059 0.600000 0.460498
              26|37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
              26|37 linear_predicted 12.974332 0.600000 0.600000 0.500000 0.200000 0.800000
              26|37      linear_real 12.437006 0.600000 0.600000 0.500000 0.200000 0.800000
              26|37     rf_predicted 19.117614 0.600000 0.600000 0.500000 0.458501 0.499500
              26|37          rf_real 22.842142 0.600000 0.600000 0.500000 0.458501 0.499500
              26|37    svm_predicted 15.042872 0.600000 0.600000 0.500000 0.200000 0.800000
              26|37         svm_real 12.437006 0.600000 0.600000 0.500000 0.200000 0.800000
              26|37   cart_predicted 29.103985 0.600000 0.600000 0.500000 0.438501 0.442501
              26|37        cart_real 19.527834 0.600000 0.600000 0.500000 0.438501 0.442501
              26|37    gbm_predicted 25.475349 0.600000 0.600000 0.500000 0.442501 0.442501
              26|37         gbm_real 19.630159 0.600000 0.600000 0.500000 0.442501 0.442501
              26|37    mlp_predicted 21.455494 0.600000 0.600000 0.500000 0.386945 0.352119
              26|37         mlp_real 19.290055 0.600000 0.600000 0.500000 0.386945 0.352119
           11|14|15        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
           11|14|15 linear_predicted 14.891808 0.200000 0.200000 0.200000 0.600000 0.500000
           11|14|15      linear_real 13.129049 0.200000 0.200000 0.200000 0.600000 0.500000
           11|14|15     rf_predicted 19.004634 0.796501 0.799501 0.795501 0.600000 0.500000
           11|14|15          rf_real 10.158085 0.796501 0.799501 0.795501 0.600000 0.500000
           11|14|15    svm_predicted 14.913115 0.800000 0.800000 0.200000 0.600000 0.500000
           11|14|15         svm_real 10.337114 0.800000 0.800000 0.200000 0.600000 0.500000
           11|14|15   cart_predicted 28.402720 0.507501 0.547500 0.486501 0.600000 0.500000
           11|14|15        cart_real 19.502872 0.507501 0.547500 0.486501 0.600000 0.500000
           11|14|15    gbm_predicted 26.606886 0.366500 0.458001 0.523501 0.600000 0.500000
           11|14|15         gbm_real 17.195997 0.366500 0.458001 0.523501 0.600000 0.500000
           11|14|15    mlp_predicted 23.341945 0.800000 0.416076 0.465857 0.600000 0.500000
           11|14|15         mlp_real 22.310675 0.800000 0.416076 0.465857 0.600000 0.500000
           11|14|26        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
           11|14|26 linear_predicted 17.284570 0.200000 0.800000 0.500000 0.200000 0.500000
           11|14|26      linear_real 12.230689 0.200000 0.800000 0.500000 0.200000 0.500000
           11|14|26     rf_predicted 23.250370 0.469501 0.799501 0.500000 0.421500 0.500000
           11|14|26          rf_real 24.081230 0.469501 0.799501 0.500000 0.421500 0.500000
           11|14|26    svm_predicted 17.731397 0.800000 0.800000 0.500000 0.200000 0.500000
           11|14|26         svm_real 12.653141 0.800000 0.800000 0.500000 0.200000 0.500000
           11|14|26   cart_predicted 34.939056 0.532500 0.439500 0.500000 0.489500 0.500000
           11|14|26        cart_real 13.644943 0.532500 0.439500 0.500000 0.489500 0.500000
           11|14|26    gbm_predicted 30.552628 0.484000 0.547501 0.500000 0.459501 0.500000
           11|14|26         gbm_real 20.568424 0.484000 0.547501 0.500000 0.459501 0.500000
           11|14|26    mlp_predicted 26.935114 0.615892 0.800000 0.500000 0.421207 0.500000
           11|14|26         mlp_real 24.068084 0.615892 0.800000 0.500000 0.421207 0.500000
           11|14|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
           11|14|37 linear_predicted 18.094818 0.200000 0.200000 0.500000 0.600000 0.200000
           11|14|37      linear_real 11.490528 0.200000 0.200000 0.500000 0.600000 0.200000
           11|14|37     rf_predicted 22.932470 0.338501 0.800000 0.500000 0.600000 0.798501
           11|14|37          rf_real 11.136245 0.338501 0.800000 0.500000 0.600000 0.798501
           11|14|37    svm_predicted 18.351277 0.200000 0.200000 0.500000 0.600000 0.200000
           11|14|37         svm_real 11.490528 0.200000 0.200000 0.500000 0.600000 0.200000
           11|14|37   cart_predicted 29.129503 0.434001 0.542001 0.500000 0.600000 0.414501
           11|14|37        cart_real 25.148134 0.434001 0.542001 0.500000 0.600000 0.414501
           11|14|37    gbm_predicted 28.475238 0.365001 0.456501 0.500000 0.600000 0.440501
           11|14|37         gbm_real 22.726394 0.365001 0.456501 0.500000 0.600000 0.440501
           11|14|37    mlp_predicted 27.142599 0.800000 0.480753 0.500000 0.600000 0.604514
           11|14|37         mlp_real 21.388624 0.800000 0.480753 0.500000 0.600000 0.604514
           11|15|26        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
           11|15|26 linear_predicted 17.827485 0.200000 0.600000 0.200000 0.200000 0.500000
           11|15|26      linear_real 12.440174 0.200000 0.600000 0.200000 0.200000 0.500000
           11|15|26     rf_predicted 22.880821 0.424500 0.600000 0.472001 0.432500 0.500000
           11|15|26          rf_real 23.345127 0.424500 0.600000 0.472001 0.432500 0.500000
           11|15|26    svm_predicted 18.658925 0.200000 0.600000 0.200000 0.200000 0.500000
           11|15|26         svm_real 12.440174 0.200000 0.600000 0.200000 0.200000 0.500000
           11|15|26   cart_predicted 31.003231 0.433001 0.600000 0.446001 0.392001 0.500000
           11|15|26        cart_real 21.212509 0.433001 0.600000 0.446001 0.392001 0.500000
           11|15|26    gbm_predicted 28.363720 0.484001 0.600000 0.560501 0.421501 0.500000
           11|15|26         gbm_real 23.491642 0.484001 0.600000 0.560501 0.421501 0.500000
           11|15|26    mlp_predicted 27.224686 0.455887 0.600000 0.755999 0.401045 0.500000
           11|15|26         mlp_real 22.908173 0.455887 0.600000 0.755999 0.401045 0.500000
           11|15|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
           11|15|37 linear_predicted 17.364801 0.200000 0.600000 0.200000 0.600000 0.200000
           11|15|37      linear_real 11.843107 0.200000 0.600000 0.200000 0.600000 0.200000
           11|15|37     rf_predicted 20.893620 0.404501 0.600000 0.477000 0.600000 0.524001
           11|15|37          rf_real 23.376739 0.404501 0.600000 0.477000 0.600000 0.524001
           11|15|37    svm_predicted 19.520576 0.200000 0.600000 0.200000 0.600000 0.200000
           11|15|37         svm_real 11.843107 0.200000 0.600000 0.200000 0.600000 0.200000
           11|15|37   cart_predicted 33.617416 0.507501 0.600000 0.560501 0.600000 0.601500
           11|15|37        cart_real 21.619444 0.507501 0.600000 0.560501 0.600000 0.601500
           11|15|37    gbm_predicted 26.400989 0.429001 0.600000 0.560500 0.600000 0.442500
           11|15|37         gbm_real 22.926924 0.429001 0.600000 0.560500 0.600000 0.442500
           11|15|37    mlp_predicted 25.489888 0.446845 0.600000 0.672238 0.600000 0.451584
           11|15|37         mlp_real 30.099110 0.446845 0.600000 0.672238 0.600000 0.451584
           11|26|37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
           11|26|37 linear_predicted 16.757226 0.200000 0.600000 0.500000 0.200000 0.800000
           11|26|37      linear_real 12.507695 0.200000 0.600000 0.500000 0.200000 0.800000
           11|26|37     rf_predicted 23.584197 0.424500 0.600000 0.500000 0.461000 0.492500
           11|26|37          rf_real 20.915940 0.424500 0.600000 0.500000 0.461000 0.492500
           11|26|37    svm_predicted 17.647999 0.200000 0.600000 0.500000 0.200000 0.800000
           11|26|37         svm_real 12.507695 0.200000 0.600000 0.500000 0.200000 0.800000
           11|26|37   cart_predicted 35.971330 0.433001 0.600000 0.500000 0.438501 0.442501
           11|26|37        cart_real 19.629738 0.433001 0.600000 0.500000 0.438501 0.442501
           11|26|37    gbm_predicted 29.799768 0.424501 0.600000 0.500000 0.442501 0.442501
           11|26|37         gbm_real 19.596433 0.424501 0.600000 0.500000 0.442501 0.442501
           11|26|37    mlp_predicted 23.456930 0.385128 0.600000 0.500000 0.372813 0.345749
           11|26|37         mlp_real 21.203155 0.385128 0.600000 0.500000 0.372813 0.345749
           14|15|26        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
           14|15|26 linear_predicted 18.738232 0.600000 0.800000 0.200000 0.200000 0.500000
           14|15|26      linear_real 12.722533 0.600000 0.800000 0.200000 0.200000 0.500000
           14|15|26     rf_predicted 24.589949 0.600000 0.800000 0.793001 0.459501 0.500000
           14|15|26          rf_real 27.058394 0.600000 0.800000 0.793001 0.459501 0.500000
           14|15|26    svm_predicted 21.725094 0.600000 0.800000 0.800000 0.200000 0.500000
           14|15|26         svm_real 15.832574 0.600000 0.800000 0.800000 0.200000 0.500000
           14|15|26   cart_predicted 37.452777 0.600000 0.439500 0.531000 0.489500 0.500000
           14|15|26        cart_real 22.630858 0.600000 0.439500 0.531000 0.489500 0.500000
           14|15|26    gbm_predicted 31.774088 0.600000 0.527001 0.560500 0.459500 0.500000
           14|15|26         gbm_real 22.928488 0.600000 0.527001 0.560500 0.459500 0.500000
           14|15|26    mlp_predicted 32.923160 0.600000 0.797456 0.651768 0.414609 0.500000
           14|15|26         mlp_real 24.549101 0.600000 0.797456 0.651768 0.414609 0.500000
           14|15|37        base_case 30.206443 0.600000 0.600000 0.500000 0.600000 0.500000
           14|15|37 linear_predicted 18.703477 0.600000 0.200000 0.200000 0.600000 0.200000
           14|15|37      linear_real 11.472660 0.600000 0.200000 0.200000 0.600000 0.200000
           14|15|37     rf_predicted 26.622263 0.600000 0.799501 0.795501 0.600000 0.798501
           14|15|37          rf_real  9.316822 0.600000 0.799501 0.795501 0.600000 0.798501
           14|15|37    svm_predicted 21.144931 0.600000 0.800000 0.800000 0.600000 0.200000
           14|15|37         svm_real 20.266371 0.600000 0.800000 0.800000 0.600000 0.200000
           14|15|37   cart_predicted 38.222544 0.600000 0.441501 0.514001 0.600000 0.414501
           14|15|37        cart_real 25.317581 0.600000 0.441501 0.514001 0.600000 0.414501
           14|15|37    gbm_predicted 34.230293 0.600000 0.458001 0.502500 0.600000 0.440501
           14|15|37         gbm_real 26.338853 0.600000 0.458001 0.502500 0.600000 0.440501
           14|15|37    mlp_predicted 32.664962 0.600000 0.460014 0.800000 0.600000 0.615046
           14|15|37         mlp_real 30.755670 0.600000 0.460014 0.800000 0.600000 0.615046
           14|26|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
           14|26|37 linear_predicted 18.714635 0.600000 0.800000 0.500000 0.800000 0.800000
           14|26|37      linear_real 24.872480 0.600000 0.800000 0.500000 0.800000 0.800000
           14|26|37     rf_predicted 31.754413 0.600000 0.799501 0.500000 0.620501 0.798501
           14|26|37          rf_real 20.772096 0.600000 0.799501 0.500000 0.620501 0.798501
           14|26|37    svm_predicted 22.943900 0.600000 0.800000 0.500000 0.800000 0.800000
           14|26|37         svm_real 24.872480 0.600000 0.800000 0.500000 0.800000 0.800000
           14|26|37   cart_predicted 40.357400 0.600000 0.384501 0.500000 0.489500 0.442501
           14|26|37        cart_real 24.641109 0.600000 0.384501 0.500000 0.489500 0.442501
           14|26|37    gbm_predicted 33.199799 0.600000 0.544501 0.500000 0.459501 0.442500
           14|26|37         gbm_real 18.209778 0.600000 0.544501 0.500000 0.459501 0.442500
           14|26|37    mlp_predicted 34.058609 0.600000 0.657528 0.500000 0.641643 0.800000
           14|26|37         mlp_real 30.869255 0.600000 0.657528 0.500000 0.641643 0.800000
           15|26|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
           15|26|37 linear_predicted 17.451710 0.600000 0.600000 0.200000 0.200000 0.800000
           15|26|37      linear_real 14.502810 0.600000 0.600000 0.200000 0.200000 0.800000
           15|26|37     rf_predicted 24.941814 0.600000 0.600000 0.477501 0.461000 0.497001
           15|26|37          rf_real 23.725161 0.600000 0.600000 0.477501 0.461000 0.497001
           15|26|37    svm_predicted 19.377603 0.600000 0.600000 0.200000 0.200000 0.800000
           15|26|37         svm_real 14.502810 0.600000 0.600000 0.200000 0.200000 0.800000
           15|26|37   cart_predicted 36.271614 0.600000 0.600000 0.460500 0.438501 0.601500
           15|26|37        cart_real 27.119398 0.600000 0.600000 0.460500 0.438501 0.601500
           15|26|37    gbm_predicted 32.257348 0.600000 0.600000 0.541001 0.442501 0.442500
           15|26|37         gbm_real 21.630460 0.600000 0.600000 0.541001 0.442501 0.442500
           15|26|37    mlp_predicted 27.879173 0.600000 0.600000 0.682833 0.426784 0.397062
           15|26|37         mlp_real 20.336720 0.600000 0.600000 0.682833 0.426784 0.397062
        11|14|15|26        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
        11|14|15|26 linear_predicted 21.618402 0.200000 0.800000 0.200000 0.200000 0.500000
        11|14|15|26      linear_real 11.470954 0.200000 0.800000 0.200000 0.200000 0.500000
        11|14|15|26     rf_predicted 29.022390 0.796501 0.799501 0.793001 0.459501 0.500000
        11|14|15|26          rf_real 29.336567 0.796501 0.799501 0.793001 0.459501 0.500000
        11|14|15|26    svm_predicted 24.881911 0.800000 0.800000 0.800000 0.200000 0.500000
        11|14|15|26         svm_real 16.631157 0.800000 0.800000 0.800000 0.200000 0.500000
        11|14|15|26   cart_predicted 38.713335 0.532500 0.400001 0.531000 0.413501 0.500000
        11|14|15|26        cart_real 21.190332 0.532500 0.400001 0.531000 0.413501 0.500000
        11|14|15|26    gbm_predicted 37.315266 0.484000 0.547500 0.560500 0.459501 0.500000
        11|14|15|26         gbm_real 30.384734 0.484000 0.547500 0.560500 0.459501 0.500000
        11|14|15|26    mlp_predicted 35.884715 0.663980 0.800000 0.661802 0.413722 0.500000
        11|14|15|26         mlp_real 26.298932 0.663980 0.800000 0.661802 0.413722 0.500000
        11|14|15|37        base_case 30.206443 0.600000 0.600000 0.500000 0.600000 0.500000
        11|14|15|37 linear_predicted 21.670112 0.200000 0.800000 0.200000 0.600000 0.200000
        11|14|15|37      linear_real 13.086079 0.200000 0.800000 0.200000 0.600000 0.200000
        11|14|15|37     rf_predicted 32.493040 0.796501 0.799501 0.795501 0.600000 0.798501
        11|14|15|37          rf_real  9.316822 0.796501 0.799501 0.795501 0.600000 0.798501
        11|14|15|37    svm_predicted 25.236596 0.800000 0.800000 0.800000 0.600000 0.200000
        11|14|15|37         svm_real 22.542689 0.800000 0.800000 0.800000 0.600000 0.200000
        11|14|15|37   cart_predicted 45.089889 0.507501 0.542001 0.514001 0.600000 0.414501
        11|14|15|37        cart_real 27.226888 0.507501 0.542001 0.514001 0.600000 0.414501
        11|14|15|37    gbm_predicted 39.172418 0.791001 0.792500 0.735500 0.600000 0.442500
        11|14|15|37         gbm_real 33.308895 0.791001 0.792500 0.735500 0.600000 0.442500
        11|14|15|37    mlp_predicted 37.316777 0.800000 0.498268 0.481831 0.600000 0.602212
        11|14|15|37         mlp_real 29.579238 0.800000 0.498268 0.481831 0.600000 0.602212
        11|14|26|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
        11|14|26|37 linear_predicted 22.338551 0.200000 0.800000 0.500000 0.800000 0.800000
        11|14|26|37      linear_real 20.291519 0.200000 0.800000 0.500000 0.800000 0.800000
        11|14|26|37     rf_predicted 36.622623 0.472500 0.799501 0.500000 0.620501 0.798501
        11|14|26|37          rf_real 27.876752 0.472500 0.799501 0.500000 0.620501 0.798501
        11|14|26|37    svm_predicted 28.324476 0.800000 0.800000 0.500000 0.800000 0.800000
        11|14|26|37         svm_real 19.103541 0.800000 0.800000 0.500000 0.800000 0.800000
        11|14|26|37   cart_predicted 43.303206 0.433001 0.542001 0.500000 0.462501 0.442501
        11|14|26|37        cart_real 23.841332 0.433001 0.542001 0.500000 0.462501 0.442501
        11|14|26|37    gbm_predicted 42.210889 0.763500 0.770501 0.500000 0.576001 0.799001
        11|14|26|37         gbm_real 29.050165 0.763500 0.770501 0.500000 0.576001 0.799001
        11|14|26|37    mlp_predicted 40.018275 0.800000 0.651234 0.500000 0.639511 0.800000
        11|14|26|37         mlp_real 21.070468 0.800000 0.651234 0.500000 0.639511 0.800000
        11|15|26|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
        11|15|26|37 linear_predicted 21.035438 0.200000 0.600000 0.200000 0.200000 0.800000
        11|15|26|37      linear_real 12.693526 0.200000 0.600000 0.200000 0.200000 0.800000
        11|15|26|37     rf_predicted 28.838200 0.404501 0.600000 0.472001 0.458501 0.497000
        11|15|26|37          rf_real 23.164172 0.404501 0.600000 0.472001 0.458501 0.497000
        11|15|26|37    svm_predicted 22.522798 0.800000 0.600000 0.800000 0.800000 0.800000
        11|15|26|37         svm_real  8.325047 0.800000 0.600000 0.800000 0.800000 0.800000
        11|15|26|37   cart_predicted 40.674592 0.433001 0.600000 0.560500 0.438501 0.601500
        11|15|26|37        cart_real 24.014924 0.433001 0.600000 0.560500 0.438501 0.601500
        11|15|26|37    gbm_predicted 37.764065 0.794500 0.600000 0.669501 0.555500 0.693001
        11|15|26|37         gbm_real 30.495989 0.794500 0.600000 0.669501 0.555500 0.693001
        11|15|26|37    mlp_predicted 32.668421 0.800000 0.600000 0.442306 0.552232 0.685076
        11|15|26|37         mlp_real 28.256027 0.800000 0.600000 0.442306 0.552232 0.685076
        14|15|26|37        base_case 30.206443 0.600000 0.600000 0.500000 0.600000 0.500000
        14|15|26|37 linear_predicted 24.106941 0.600000 0.800000 0.200000 0.800000 0.800000
        14|15|26|37      linear_real 26.038353 0.600000 0.800000 0.200000 0.800000 0.800000
        14|15|26|37     rf_predicted 42.905788 0.600000 0.799501 0.795501 0.620501 0.798501
        14|15|26|37          rf_real 40.518667 0.600000 0.799501 0.795501 0.620501 0.798501
        14|15|26|37    svm_predicted 33.473074 0.600000 0.800000 0.800000 0.800000 0.800000
        14|15|26|37         svm_real 49.146356 0.600000 0.800000 0.800000 0.800000 0.800000
        14|15|26|37   cart_predicted 48.288256 0.600000 0.400001 0.514001 0.438501 0.601500
        14|15|26|37        cart_real 26.851946 0.600000 0.400001 0.514001 0.438501 0.601500
        14|15|26|37    gbm_predicted 46.873002 0.600000 0.797501 0.722501 0.576001 0.799001
        14|15|26|37         gbm_real 22.204747 0.600000 0.797501 0.722501 0.576001 0.799001
        14|15|26|37    mlp_predicted 45.230660 0.600000 0.632102 0.576095 0.637030 0.800000
        14|15|26|37         mlp_real 36.643970 0.600000 0.632102 0.576095 0.637030 0.800000
     11|14|15|26|37        base_case 30.206443 0.600000 0.600000 0.500000 0.600000 0.500000
     11|14|15|26|37 linear_predicted 27.531692 0.200000 0.800000 0.200000 0.800000 0.800000
     11|14|15|26|37      linear_real 21.077543 0.200000 0.800000 0.200000 0.800000 0.800000
     11|14|15|26|37     rf_predicted 48.217791 0.796501 0.800000 0.795501 0.604501 0.798501
     11|14|15|26|37          rf_real 39.696948 0.796501 0.800000 0.795501 0.604501 0.798501
     11|14|15|26|37    svm_predicted 40.072523 0.800000 0.800000 0.800000 0.800000 0.800000
     11|14|15|26|37         svm_real 49.199365 0.800000 0.800000 0.800000 0.800000 0.800000
     11|14|15|26|37   cart_predicted 49.548814 0.433001 0.400001 0.514001 0.438501 0.442501
     11|14|15|26|37        cart_real 24.611120 0.433001 0.400001 0.514001 0.438501 0.442501
     11|14|15|26|37    gbm_predicted 59.619935 0.762001 0.798500 0.735500 0.576001 0.800000
     11|14|15|26|37         gbm_real 39.369018 0.762001 0.798500 0.735500 0.576001 0.800000
     11|14|15|26|37    mlp_predicted 51.971744 0.800000 0.651047 0.501729 0.639426 0.800000
     11|14|15|26|37         mlp_real 37.940782 0.800000 0.651047 0.501729 0.639426 0.800000
--------------------------------------------------------------------------------

================================================================================
ALGORITHM COMPARISON COMPLETED
================================================================================
