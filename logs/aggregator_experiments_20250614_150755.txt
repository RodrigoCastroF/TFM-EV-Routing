================================================================================
AGGREGATOR EXPERIMENTS - STATION COMBINATIONS
================================================================================
Timestamp: 2025-06-14 15:07:55
Solver: gurobi
Time limit: 15 seconds
Verbosity level: 2
Output CSV: ../results/aggregator_experiments_20250614_150755.csv
Log file: ../logs/aggregator_experiments_20250614_150755.txt

Loading base data...
→ Loading aggregator data from: ../data/37-intersection map Aggregator Competition.xlsx
→ Loading map data from: ../data/37-intersection map.xlsx
→ Extracting price information...
→ Available stations: [11, 14, 15, 26, 37]
→ Base case prices: {11: np.float64(0.6), 14: np.float64(0.6), 15: np.float64(0.5), 26: np.float64(0.6), 37: np.float64(0.5)}
→ Price range: $0.200 - $0.800

Generating station combinations...
→ Testing 25 combinations:
     1. [11]
     2. [14]
     3. [15]
     4. [26]
     5. [37]
     6. [11, 14]
     7. [11, 15]
     8. [11, 26]
     9. [11, 37]
    10. [14, 15]
    11. [14, 26]
    12. [14, 37]
    13. [15, 26]
    14. [15, 37]
    15. [26, 37]
    16. [11, 14, 15]
    17. [11, 14, 26]
    18. [11, 14, 37]
    19. [11, 15, 26]
    20. [11, 15, 37]
    21. [11, 26, 37]
    22. [14, 15, 26]
    23. [14, 15, 37]
    24. [14, 26, 37]
    25. [15, 26, 37]

Running base case scenario (once for all combinations)...
================================================================================
Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466128

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199929

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455732996

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 12.46
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $31.2505
Total Cost: $1.0441
Profit: $30.2064
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534995553), '15': np.float64(13.727748669593861), '26': np.float64(0.0), '37': np.float64(9.948502531171913)}
✓ Base case solved successfully

Starting experiments...
================================================================================

PROGRESS: Combination 1/25 - [11]
Remaining: 24 combinations


============================================================
EXPERIMENT: Controlled stations [11]
============================================================

Creating synthetic aggregator data for stations [11]...
Price bounds: $0.200 - $0.800
Controlled stations: [11]
Competitor stations: [14, 15, 26, 37]
Base case profit: $0.0000

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: np.float64(0.5), 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466414

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999986

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455733324

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 12.46
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $31.2505
Total Cost: $1.0441
Profit: $30.2064
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534996274), '15': np.float64(13.727748669594284), '26': np.float64(0.0), '37': np.float64(9.948502531172203)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Model created with 33 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $7.35
Charging prices:
  Station 11 (AGGREGATOR): $0.360/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $7.35
Solution prices: 11:0.360, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3601169304945935, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466384

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.008824121082107

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.401435523206618

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 11.01
EV 3: Objective = 5.40

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3601169304945935), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.096kWh*$0.360=$3.6357 + t12:13.200kWh*$0.360=$4.7535 + t13:10.401kWh*$0.360=$3.7457 + t14:1.914kWh*$0.360=$0.6891
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.600kWh*$0.500=$1.8000 + t15:6.302kWh*$0.500=$3.1512 + t16:7.200kWh*$0.500=$3.6000 + t17:5.671kWh*$0.500=$2.8354

Cost breakdown by time period:
  t11: s11:10.096kWh*$0.019=$0.1904 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:10.401kWh*$0.017=$0.1768 + s37:0.167kWh*$0.017=$0.0028
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:3.600kWh*$0.018=$0.0637
  t15: s37:6.302kWh*$0.015=$0.0947
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $12.1938
  Station 14: $0.0000
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $11.1340

Total Revenue: $27.3478
Total Cost: $1.0776
Profit: $26.2702
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(12.193802206584392), '14': np.float64(0.0), '15': np.float64(2.942447845502983), '26': np.float64(0.0), '37': np.float64(11.13398869265427)}
Real profit: $12.1938

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $7.3530
 Real profit: $12.1938
 Improvement over base: $12.1938 (inf%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11]
Competitor stations: [14, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Model created with 31 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $7.35
Charging prices:
  Station 11 (AGGREGATOR): $0.360/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $7.35
Solution prices: 11:0.360, 14:0.600, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3601169304945935, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466384

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.008824121082107

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.073466880100313

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 11.01
EV 3: Objective = 6.07

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3601169304945935), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:8.016kWh*$0.360=$2.8866 + t12:13.200kWh*$0.360=$4.7535 + t13:13.200kWh*$0.360=$4.7535 + t14:3.139kWh*$0.360=$1.1304
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.600kWh*$0.500=$1.8000 + t15:6.302kWh*$0.500=$3.1512 + t16:7.200kWh*$0.500=$3.6000 + t17:5.671kWh*$0.500=$2.8354

Cost breakdown by time period:
  t11: s11:8.016kWh*$0.019=$0.1512 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:13.200kWh*$0.017=$0.2244 + s37:0.167kWh*$0.017=$0.0028
  t14: s11:3.139kWh*$0.018=$0.0555 + s37:3.600kWh*$0.018=$0.0637
  t15: s37:6.302kWh*$0.015=$0.0947
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $12.8638
  Station 14: $0.0000
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $11.1340

Total Revenue: $28.0479
Total Cost: $1.1076
Profit: $26.9402
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(12.863810641318892), '14': np.float64(0.0), '15': np.float64(2.942447845502983), '26': np.float64(0.0), '37': np.float64(11.13398869265427)}
Real profit: $12.8638

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $7.3530
 Real profit: $12.8638
 Improvement over base: $12.8638 (inf%)
✓ Completed combination 1/25

PROGRESS: Combination 2/25 - [14]
Remaining: 23 combinations


============================================================
EXPERIMENT: Controlled stations [14]
============================================================

Creating synthetic aggregator data for stations [14]...
Price bounds: $0.200 - $0.800
Controlled stations: [14]
Competitor stations: [11, 15, 26, 37]
Base case profit: $6.5302

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: np.float64(0.5), 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651465842

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.381735430399825

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.966498187999129

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 15.38
EV 3: Objective = 8.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.496kWh*$0.600=$0.8974 + t16:2.071kWh*$0.600=$1.2427
  Station 15: t11:8.705kWh*$0.500=$4.3525 + t12:9.746kWh*$0.500=$4.8732 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:2.056kWh*$0.500=$1.0280
  Station 26: t16:2.704kWh*$0.600=$1.6226
  Station 37: t13:0.167kWh*$0.500=$0.0834 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:3.600kWh*$0.500=$1.8000 + t17:5.790kWh*$0.500=$2.8952 + t18:3.600kWh*$0.500=$1.8000 + t19:3.600kWh*$0.500=$1.8000 + t20:3.600kWh*$0.500=$1.8000 + t21:1.243kWh*$0.500=$0.6214

Cost breakdown by time period:
  t15: s11:1.496kWh*$0.015=$0.0225 + s15:2.056kWh*$0.015=$0.0309 + s37:3.600kWh*$0.015=$0.0541
  t16: s11:2.071kWh*$0.013=$0.0273 + s26:2.704kWh*$0.013=$0.0356 + s37:3.600kWh*$0.013=$0.0474
  t11: s15:8.705kWh*$0.019=$0.1642
  t12: s15:9.746kWh*$0.017=$0.1693
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:0.167kWh*$0.017=$0.0028
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t17: s37:5.790kWh*$0.014=$0.0816
  t18: s37:3.600kWh*$0.012=$0.0420
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:3.600kWh*$0.020=$0.0703
  t21: s37:1.243kWh*$0.062=$0.0774

Profit breakdown by station:
  Station 11: $2.0904
  Station 14: $0.0000
  Station 15: $16.8397
  Station 26: $1.5870
  Station 37: $13.9077

Total Revenue: $35.6166
Total Cost: $1.1917
Profit: $34.4249
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.0903683708535703), '14': np.float64(0.0), '15': np.float64(16.839744274445376), '26': np.float64(1.5870419508252995), '37': np.float64(13.907722605266546)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Model created with 153 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.33
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.375/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.33
Solution prices: 11:0.600, 14:0.375, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.37483553389955415, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.718527255818188

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.173371121099327

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.9734132108378795

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.72
EV 2: Objective = 9.17
EV 3: Objective = 5.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.37483553389955415), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.375=$2.2109 + t11:15.277kWh*$0.375=$5.7263 + t12:13.713kWh*$0.375=$5.1401 + t13:13.200kWh*$0.375=$4.9478 + t14:4.082kWh*$0.375=$1.5300
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.4946
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $24.8597
Total Cost: $1.2228
Profit: $23.6369
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.494569580185942), '15': np.float64(1.2994780035816453), '26': np.float64(0.0), '37': np.float64(3.842852111835885)}
Real profit: $18.4946

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $16.3264
 Real profit: $18.4946
 Improvement over base: $11.9644 (183.2%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14]
Competitor stations: [11, 15, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Model created with 151 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $16.33
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.375/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $16.33
Solution prices: 11:0.600, 14:0.375, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.3748355338979832, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.718527255788356

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.173371121069854

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.973413210818042

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.72
EV 2: Objective = 9.17
EV 3: Objective = 5.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.3748355338979832), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.375=$2.2109 + t11:15.277kWh*$0.375=$5.7263 + t12:13.713kWh*$0.375=$5.1401 + t13:13.200kWh*$0.375=$4.9478 + t14:4.082kWh*$0.375=$1.5300
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.4946
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $24.8597
Total Cost: $1.2228
Profit: $23.6369
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.494569580103406), '15': np.float64(1.2994780035820035), '26': np.float64(0.0), '37': np.float64(3.8428521118357084)}
Real profit: $18.4946

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $16.3264
 Real profit: $18.4946
 Improvement over base: $11.9644 (183.2%)
✓ Completed combination 2/25

PROGRESS: Combination 3/25 - [15]
Remaining: 22 combinations


============================================================
EXPERIMENT: Controlled stations [15]
============================================================

Creating synthetic aggregator data for stations [15]...
Price bounds: $0.200 - $0.800
Controlled stations: [15]
Competitor stations: [11, 14, 26, 37]
Base case profit: $13.7277

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: 0.8, 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 12.174976929759989

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199948

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.999469448638902

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 12.17
EV 2: Objective = 12.46
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.600=$3.1337 + t12:6.600kWh*$0.600=$3.9600 + t13:3.801kWh*$0.600=$2.2808
  Station 14: t10:5.695kWh*$0.600=$3.4171 + t11:8.000kWh*$0.600=$4.8002 + t12:5.076kWh*$0.600=$3.0458
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:6.801kWh*$0.500=$3.4004 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.205kWh*$0.500=$2.6027 + t18:0.399kWh*$0.500=$0.1996

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:8.000kWh*$0.019=$0.1509
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:1.995kWh*$0.017=$0.0339
  t10: s14:5.695kWh*$0.040=$0.2296
  t14: s37:6.801kWh*$0.018=$0.1203
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.205kWh*$0.014=$0.0734
  t18: s37:0.399kWh*$0.012=$0.0047

Profit breakdown by station:
  Station 11: $9.0967
  Station 14: $10.7945
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $13.9648

Total Revenue: $35.0375
Total Cost: $1.1816
Profit: $33.8560
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.096726430276243), '14': np.float64(10.794474698439506), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(13.964769434102056)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_15
Model created with 153 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $9.92
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.396/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.92
Solution prices: 11:0.600, 14:0.600, 15:0.396, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.3964115116359902, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.411666388322534

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.562326247999856

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.999469448639866

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.41
EV 2: Objective = 12.56
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.3964115116359902), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.600=$3.1337 + t12:6.600kWh*$0.600=$3.9600 + t13:3.801kWh*$0.600=$2.2808
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.251kWh*$0.600=$3.1507
  Station 15: t11:3.561kWh*$0.396=$1.4117 + t12:3.600kWh*$0.396=$1.4271 + t13:3.600kWh*$0.396=$1.4271 + t14:3.600kWh*$0.396=$1.4271 + t15:0.039kWh*$0.396=$0.0154
  Station 37: t14:3.577kWh*$0.500=$1.7885 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:7.033kWh*$0.500=$3.5166 + t18:0.023kWh*$0.500=$0.0115

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.251kWh*$0.017=$0.0912 + s15:3.600kWh*$0.017=$0.0625
  t13: s11:3.801kWh*$0.017=$0.0646 + s15:3.600kWh*$0.017=$0.0612
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:3.577kWh*$0.018=$0.0633
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:0.023kWh*$0.012=$0.0003

Profit breakdown by station:
  Station 11: $9.0967
  Station 14: $5.7086
  Station 15: $5.4532
  Station 26: $0.0000
  Station 37: $9.9544

Total Revenue: $31.2224
Total Cost: $1.0094
Profit: $30.2129
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.096726430277212), '14': np.float64(5.7086005940879465), '15': np.float64(5.453181371900031), '26': np.float64(0.0), '37': np.float64(9.954419857480957)}
Real profit: $5.4532

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $9.9184
 Real profit: $5.4532
 Improvement over base: $-8.2746 (-60.3%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15]
Competitor stations: [11, 14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Model created with 151 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $9.92
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.396/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $9.92
Solution prices: 11:0.600, 14:0.600, 15:0.396, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.39641151163728505, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.41166638833198

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199764

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.297851323627245

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.41
EV 2: Objective = 12.46
EV 3: Objective = 6.30

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.39641151163728505), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.396=$2.1051 + t12:7.200kWh*$0.396=$2.8542 + t13:7.200kWh*$0.396=$2.8542 + t14:7.200kWh*$0.396=$2.8542 + t15:1.541kWh*$0.396=$0.6110
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $10.7805
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $28.3032
Total Cost: $1.0441
Profit: $27.2592
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534993892), '15': np.float64(10.78047846622728), '26': np.float64(0.0), '37': np.float64(9.94850253116389)}
Real profit: $10.7805

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $9.9184
 Real profit: $10.7805
 Improvement over base: $-2.9473 (-21.5%)
✓ Completed combination 3/25

PROGRESS: Combination 4/25 - [26]
Remaining: 21 combinations


============================================================
EXPERIMENT: Controlled stations [26]
============================================================

Creating synthetic aggregator data for stations [26]...
Price bounds: $0.200 - $0.800
Controlled stations: [26]
Competitor stations: [11, 14, 15, 37]
Base case profit: $0.0000

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: np.float64(0.5), 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466524

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.048967574399839

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455732806

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 15.05
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.600=$2.9239 + t12:6.600kWh*$0.600=$3.9600 + t13:2.654kWh*$0.600=$1.5921
  Station 14: t10:1.650kWh*$0.600=$0.9900
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t14:2.299kWh*$0.500=$1.1494 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:7.033kWh*$0.500=$3.5166 + t18:1.301kWh*$0.500=$0.6506

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:5.310kWh*$0.019=$0.1001
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s11:2.654kWh*$0.017=$0.0451 + s15:7.200kWh*$0.017=$0.1224
  t10: s14:1.650kWh*$0.040=$0.0665
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:2.299kWh*$0.018=$0.0407
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:1.301kWh*$0.012=$0.0152

Profit breakdown by station:
  Station 11: $8.2244
  Station 14: $0.9235
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $9.9621

Total Revenue: $33.9457
Total Cost: $1.1079
Profit: $32.8378
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(8.224389295683803), '14': np.float64(0.9234822299999998), '15': np.float64(13.727748669593662), '26': np.float64(0.0), '37': np.float64(9.962133222262283)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_26        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_26
Model created with 303 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.90
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.90
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.411, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.4111403185719917, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.752524484450289

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.337623155674807

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.768916260052278

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.75
EV 2: Objective = 11.34
EV 3: Objective = 6.77

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4111403185719917), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.411=$0.5541 + t12:6.600kWh*$0.411=$2.7135 + t13:6.600kWh*$0.411=$2.7135 + t14:11.703kWh*$0.411=$4.8115 + t15:13.200kWh*$0.411=$5.4271 + t16:11.753kWh*$0.411=$4.8323 + t17:0.399kWh*$0.411=$0.1642

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:11.703kWh*$0.018=$0.2071
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $1.9587
  Station 26: $20.3982
  Station 37: $0.0000

Total Revenue: $27.9782
Total Cost: $1.0375
Profit: $26.9407
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.5838140437380135), '15': np.float64(1.9586532510818278), '26': np.float64(20.398184129391943), '37': np.float64(0.0)}
Real profit: $20.3982

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $17.9016
 Real profit: $20.3982
 Improvement over base: $20.3982 (inf%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [26]
Competitor stations: [11, 14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_26        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Model created with 301 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $17.90
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $17.90
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.411, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.41114031857199157, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.752524484449143

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.41675494802118

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.828484602557025

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.75
EV 2: Objective = 12.42
EV 3: Objective = 7.83

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.41114031857199157), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:2.723kWh*$0.600=$1.6340
  Station 14: t9:1.650kWh*$0.600=$0.9900 + t10:1.787kWh*$0.600=$1.0721
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t12:9.998kWh*$0.411=$4.1104 + t13:13.200kWh*$0.411=$5.4271 + t14:17.694kWh*$0.411=$7.2748 + t15:10.179kWh*$0.411=$4.1850 + t16:5.153kWh*$0.411=$2.1188
  Station 37: t16:2.719kWh*$0.500=$1.3593

Cost breakdown by time period:
  t11: s11:2.723kWh*$0.019=$0.0514 + s15:3.561kWh*$0.019=$0.0672
  t9: s14:1.650kWh*$0.075=$0.1244
  t10: s14:1.787kWh*$0.040=$0.0720
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:9.998kWh*$0.017=$0.1736
  t13: s26:13.200kWh*$0.017=$0.2244
  t14: s26:17.694kWh*$0.018=$0.3131
  t15: s26:10.179kWh*$0.015=$0.1529
  t16: s26:5.153kWh*$0.013=$0.0678 + s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $1.5826
  Station 14: $1.8656
  Station 15: $1.9587
  Station 26: $22.1842
  Station 37: $1.3235

Total Revenue: $30.2060
Total Cost: $1.2914
Profit: $28.9146
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.5826441852192707), '14': np.float64(1.8656439799656968), '15': np.float64(1.9586532510806869), '26': np.float64(22.184210346220564), '37': np.float64(1.3234679051917433)}
Real profit: $22.1842

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $17.9016
 Real profit: $22.1842
 Improvement over base: $22.1842 (inf%)
✓ Completed combination 4/25

PROGRESS: Combination 5/25 - [37]
Remaining: 20 combinations


============================================================
EXPERIMENT: Controlled stations [37]
============================================================

Creating synthetic aggregator data for stations [37]...
Price bounds: $0.200 - $0.800
Controlled stations: [37]
Competitor stations: [11, 14, 15, 26]
Base case profit: $9.9485

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: np.float64(0.5), 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.884061304639618

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.460910585759972

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.966498187999344

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.88
EV 2: Objective = 14.46
EV 3: Objective = 8.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.496kWh*$0.600=$0.8974 + t16:2.071kWh*$0.600=$1.2427
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.910kWh*$0.600=$1.1459
  Station 15: t11:6.498kWh*$0.500=$3.2490 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:0.702kWh*$0.500=$0.3510
  Station 26: t16:5.038kWh*$0.600=$3.0229 + t17:6.733kWh*$0.600=$4.0398 + t18:0.562kWh*$0.600=$0.3374

Cost breakdown by time period:
  t15: s11:1.496kWh*$0.015=$0.0225 + s15:0.702kWh*$0.015=$0.0105
  t16: s11:2.071kWh*$0.013=$0.0273 + s26:5.038kWh*$0.013=$0.0663
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:6.498kWh*$0.019=$0.1225
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $2.0904
  Station 14: $11.4544
  Station 15: $13.8921
  Station 26: $7.2323
  Station 37: $0.0000

Total Revenue: $35.7411
Total Cost: $1.0720
Profit: $34.6691
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.0903683708537693), '14': np.float64(11.454376432735506), '15': np.float64(13.8921048184383), '26': np.float64(7.232268150438958), '37': np.float64(0.0)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_37        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_37
Model created with 303 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.22
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.22
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.460

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4601415614328404}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.292670596714235

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.910591957246098

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455732739

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.29
EV 2: Objective = 11.91
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4601415614328404)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:6.146kWh*$0.500=$3.0732 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:1.503kWh*$0.500=$0.7513
  Station 37: t13:2.161kWh*$0.460=$0.9946 + t14:7.200kWh*$0.460=$3.3130 + t15:7.200kWh*$0.460=$3.3130 + t16:7.200kWh*$0.460=$3.3130 + t17:5.039kWh*$0.460=$2.3185

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:2.161kWh*$0.017=$0.0367
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $9.7253
  Station 26: $0.0000
  Station 37: $12.8140

Total Revenue: $30.1026
Total Cost: $1.0331
Profit: $29.0695
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534994779), '15': np.float64(9.725340910755078), '26': np.float64(0.0), '37': np.float64(12.81395400313835)}
Real profit: $12.8140

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $13.2167
 Real profit: $12.8140
 Improvement over base: $2.8655 (28.8%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [37]
Competitor stations: [11, 14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_37        mlp  ...  continuous         1

[1 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_37
Model created with 301 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.22
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.22
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.600, 37:0.460

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.46014156141328855}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.292670596443639

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.910591956977287

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.665047290736725

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.29
EV 2: Objective = 11.91
EV 3: Objective = 8.67

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.46014156141328855)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:2.421kWh*$0.460=$1.1138 + t13:5.761kWh*$0.460=$2.6511 + t14:10.800kWh*$0.460=$4.9695 + t15:10.800kWh*$0.460=$4.9695 + t16:8.379kWh*$0.460=$3.8557 + t17:5.039kWh*$0.460=$2.3185

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $19.2035

Total Revenue: $31.1128
Total Cost: $1.1049
Profit: $30.0080
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775197101), '15': np.float64(2.942447845502939), '26': np.float64(0.0), '37': np.float64(19.20345920944271)}
Real profit: $19.2035

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $13.2167
 Real profit: $19.2035
 Improvement over base: $9.2550 (93.0%)
✓ Completed combination 5/25

PROGRESS: Combination 6/25 - [11, 14]
Remaining: 19 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14]
============================================================

Creating synthetic aggregator data for stations [11, 14]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14]
Competitor stations: [15, 26, 37]
Base case profit: $6.5302

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: np.float64(0.5), 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466087

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 19.80308719119984

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455733265

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 19.80
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t16:0.946kWh*$0.800=$0.7568 + t17:2.919kWh*$0.800=$2.3354
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:6.146kWh*$0.500=$3.0732 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:1.503kWh*$0.500=$0.7513
  Station 26: t19:5.605kWh*$0.600=$3.3631 + t20:6.600kWh*$0.600=$3.9600 + t21:5.021kWh*$0.600=$3.0129
  Station 37: t11:1.275kWh*$0.500=$0.6374 + t12:3.600kWh*$0.500=$1.8000 + t13:3.767kWh*$0.500=$1.8834 + t14:7.200kWh*$0.500=$3.6000 + t15:5.925kWh*$0.500=$2.9626 + t16:3.600kWh*$0.500=$1.8000 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t16: s14:0.946kWh*$0.013=$0.0125 + s37:3.600kWh*$0.013=$0.0474
  t17: s14:2.919kWh*$0.014=$0.0412 + s37:3.433kWh*$0.014=$0.0484
  t11: s15:5.310kWh*$0.019=$0.1001 + s37:1.275kWh*$0.019=$0.0240
  t12: s15:6.146kWh*$0.017=$0.1067 + s37:3.600kWh*$0.017=$0.0625
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:3.767kWh*$0.017=$0.0640
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:5.925kWh*$0.015=$0.0890
  t19: s26:5.605kWh*$0.015=$0.0825
  t20: s26:6.600kWh*$0.020=$0.1290
  t21: s26:5.021kWh*$0.062=$0.3125

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.2921
  Station 15: $9.7253
  Station 26: $9.8121
  Station 37: $13.9372

Total Revenue: $39.2279
Total Cost: $1.4612
Profit: $37.7667
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.2920769248783746), '15': np.float64(9.725340910755024), '26': np.float64(9.812059691745132), '37': np.float64(13.937207727756983)}
Max prices profit: $4.2921


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 184 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.61
Charging prices:
  Station 11 (AGGREGATOR): $0.794/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.382/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.61
Solution prices: 11:0.794, 14:0.382, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7944352951870308, 14: 0.38202827198530137, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.85310962953375

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.309180720343178

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.063256604593766

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.85
EV 2: Objective = 9.31
EV 3: Objective = 6.06

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7944352951870308), '14': np.float64(0.38202827198530137), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.382=$2.2533 + t11:15.277kWh*$0.382=$5.8362 + t12:13.713kWh*$0.382=$5.2388 + t13:13.200kWh*$0.382=$5.0428 + t14:4.082kWh*$0.382=$1.5593
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.8698
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $25.2349
Total Cost: $1.2228
Profit: $24.0121
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.869814753848242), '15': np.float64(1.2994780035819262), '26': np.float64(0.0), '37': np.float64(3.8428521118352923)}
Real profit: $18.8698

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $18.6133
 Real profit: $18.8698
 Improvement over base: $12.3396 (189.0%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14]
Competitor stations: [15, 26, 37] with fixed prices: [np.float64(0.5), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Model created with 182 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.66
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.382/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.66
Solution prices: 11:0.800, 14:0.382, 15:0.500, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.3818313029459418, 15: 0.5, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.849424167816325

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.305461651751637

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.060796294381256

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.85
EV 2: Objective = 9.31
EV 3: Objective = 6.06

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.3818313029459418), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.382=$2.2521 + t11:15.277kWh*$0.382=$5.8332 + t12:13.713kWh*$0.382=$5.2361 + t13:13.200kWh*$0.382=$5.0402 + t14:4.082kWh*$0.382=$1.5585
  Station 15: t13:2.690kWh*$0.500=$1.3452
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:6.279kWh*$0.500=$3.1394 + t16:1.518kWh*$0.500=$0.7590

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:2.690kWh*$0.017=$0.0457
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.8595
  Station 15: $1.2995
  Station 26: $0.0000
  Station 37: $3.8429

Total Revenue: $25.2247
Total Cost: $1.2228
Profit: $24.0019
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.859538878305187), '15': np.float64(1.2994780035813702), '26': np.float64(0.0), '37': np.float64(3.8428521118357493)}
Real profit: $18.8595

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $18.6585
 Real profit: $18.8595
 Improvement over base: $12.3293 (188.8%)
✓ Completed combination 6/25

PROGRESS: Combination 7/25 - [11, 15]
Remaining: 18 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15]
============================================================

Creating synthetic aggregator data for stations [11, 15]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15]
Competitor stations: [14, 26, 37]
Base case profit: $13.7277

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: 0.8, 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 12.174976929759978

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999897

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.560748050879296

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 12.17
EV 2: Objective = 12.46
EV 3: Objective = 9.56

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:11.593kWh*$0.600=$6.9561 + t11:14.600kWh*$0.600=$8.7602 + t12:5.589kWh*$0.600=$3.3536
  Station 15: t13:2.690kWh*$0.800=$2.1523
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:6.801kWh*$0.500=$3.4004 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.205kWh*$0.500=$2.6027 + t18:0.399kWh*$0.500=$0.1996

Cost breakdown by time period:
  t10: s14:11.593kWh*$0.040=$0.4674
  t11: s14:14.600kWh*$0.019=$0.2753
  t12: s14:5.589kWh*$0.017=$0.0971
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:1.995kWh*$0.017=$0.0339
  t14: s37:6.801kWh*$0.018=$0.1203
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.205kWh*$0.014=$0.0734
  t18: s37:0.399kWh*$0.012=$0.0047

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.2301
  Station 15: $2.1066
  Station 26: $0.0000
  Station 37: $13.9648

Total Revenue: $35.6222
Total Cost: $1.3207
Profit: $34.3015
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.230103192183627), '15': np.float64(2.1066028535820154), '26': np.float64(0.0), '37': np.float64(13.96476943410206)}
Max prices profit: $2.1066


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 184 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.95
Charging prices:
  Station 11 (AGGREGATOR): $0.375/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.266/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.95
Solution prices: 11:0.375, 14:0.600, 15:0.266, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.37459770110802126, 14: 0.6, 15: 0.26579411527184293, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.606011500984531

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.853400524009935

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.95702167977693

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.61
EV 2: Objective = 10.85
EV 3: Objective = 4.96

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.37459770110802126), '14': np.float64(0.6), '15': np.float64(0.26579411527184293), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.653kWh*$0.375=$0.6193 + t16:8.671kWh*$0.375=$3.2482 + t17:1.807kWh*$0.375=$0.6768
  Station 15: t11:8.705kWh*$0.266=$2.3138 + t12:10.800kWh*$0.266=$2.8706 + t13:10.800kWh*$0.266=$2.8706 + t14:10.800kWh*$0.266=$2.8706 + t15:2.095kWh*$0.266=$0.5568
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:3.433kWh*$0.500=$1.7166 + t18:2.761kWh*$0.500=$1.3803 + t19:3.600kWh*$0.500=$1.8000 + t20:2.179kWh*$0.500=$1.0896

Cost breakdown by time period:
  t15: s11:1.653kWh*$0.015=$0.0248 + s15:2.095kWh*$0.015=$0.0315
  t16: s11:8.671kWh*$0.013=$0.1141 + s37:2.674kWh*$0.013=$0.0352
  t17: s11:1.807kWh*$0.014=$0.0255 + s37:3.433kWh*$0.014=$0.0484
  t11: s15:8.705kWh*$0.019=$0.1642
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:10.800kWh*$0.018=$0.1911
  t18: s37:2.761kWh*$0.012=$0.0322
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:2.179kWh*$0.020=$0.0426

Profit breakdown by station:
  Station 11: $4.3799
  Station 14: $0.0000
  Station 15: $10.7245
  Station 26: $0.0000
  Station 37: $7.1124

Total Revenue: $23.3505
Total Cost: $1.1336
Profit: $22.2168
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.379919991745164), '14': np.float64(0.0), '15': np.float64(10.72445781302829), '26': np.float64(0.0), '37': np.float64(7.112427306699279)}
Real profit: $15.1044

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $13.9497
 Real profit: $15.1044
 Improvement over base: $1.3766 (10.0%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 15]
Competitor stations: [14, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Model created with 182 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $13.95
Charging prices:
  Station 11 (AGGREGATOR): $0.375/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.266/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $13.95
Solution prices: 11:0.375, 14:0.600, 15:0.266, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.37459770110802126, 14: 0.6, 15: 0.26579411527184293, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 6.606011500984531

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.853400524009935

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 4.95702167977693

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 6.61
EV 2: Objective = 10.85
EV 3: Objective = 4.96

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.37459770110802126), '14': np.float64(0.6), '15': np.float64(0.26579411527184293), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t15:1.653kWh*$0.375=$0.6193 + t16:8.671kWh*$0.375=$3.2482 + t17:1.807kWh*$0.375=$0.6768
  Station 15: t11:8.705kWh*$0.266=$2.3138 + t12:10.800kWh*$0.266=$2.8706 + t13:10.800kWh*$0.266=$2.8706 + t14:10.800kWh*$0.266=$2.8706 + t15:2.095kWh*$0.266=$0.5568
  Station 37: t16:2.674kWh*$0.500=$1.3372 + t17:3.433kWh*$0.500=$1.7166 + t18:2.761kWh*$0.500=$1.3803 + t19:3.600kWh*$0.500=$1.8000 + t20:2.179kWh*$0.500=$1.0896

Cost breakdown by time period:
  t15: s11:1.653kWh*$0.015=$0.0248 + s15:2.095kWh*$0.015=$0.0315
  t16: s11:8.671kWh*$0.013=$0.1141 + s37:2.674kWh*$0.013=$0.0352
  t17: s11:1.807kWh*$0.014=$0.0255 + s37:3.433kWh*$0.014=$0.0484
  t11: s15:8.705kWh*$0.019=$0.1642
  t12: s15:10.800kWh*$0.017=$0.1876
  t13: s15:10.800kWh*$0.017=$0.1836
  t14: s15:10.800kWh*$0.018=$0.1911
  t18: s37:2.761kWh*$0.012=$0.0322
  t19: s37:3.600kWh*$0.015=$0.0530
  t20: s37:2.179kWh*$0.020=$0.0426

Profit breakdown by station:
  Station 11: $4.3799
  Station 14: $0.0000
  Station 15: $10.7245
  Station 26: $0.0000
  Station 37: $7.1124

Total Revenue: $23.3505
Total Cost: $1.1336
Profit: $22.2168
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(4.379919991745164), '14': np.float64(0.0), '15': np.float64(10.72445781302829), '26': np.float64(0.0), '37': np.float64(7.112427306699279)}
Real profit: $15.1044

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $13.9497
 Real profit: $15.1044
 Improvement over base: $1.3766 (10.0%)
✓ Completed combination 7/25

PROGRESS: Combination 8/25 - [11, 26]
Remaining: 17 combinations


============================================================
EXPERIMENT: Controlled stations [11, 26]
============================================================

Creating synthetic aggregator data for stations [11, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 26]
Competitor stations: [14, 15, 37]
Base case profit: $0.0000

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: np.float64(0.5), 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673651466096

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.461595011999975

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.216050345759745

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 12.46
EV 3: Objective = 9.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.721kWh*$0.500=$1.3607
  Station 37: t12:2.421kWh*$0.500=$1.2103 + t13:5.595kWh*$0.500=$2.7973 + t14:10.792kWh*$0.500=$5.3959 + t15:10.800kWh*$0.500=$5.4000 + t16:8.379kWh*$0.500=$4.1897 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.721kWh*$0.017=$0.0473 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.595kWh*$0.017=$0.0951
  t14: s37:10.792kWh*$0.018=$0.1909
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $3.0269
  Station 26: $0.0000
  Station 37: $20.8409

Total Revenue: $32.8347
Total Cost: $1.1049
Profit: $31.7298
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.86205177519742), '15': np.float64(3.026851072788933), '26': np.float64(0.0), '37': np.float64(20.840881623579463)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 334 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.41
Charging prices:
  Station 11 (AGGREGATOR): $0.347/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.41
Solution prices: 11:0.347, 14:0.600, 15:0.500, 26:0.411, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3472724781455038, 14: 0.6, 15: 0.5, 26: 0.4111365740118157, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.752462558381241

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.475576481464575

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.20878009570637

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.75
EV 2: Objective = 11.48
EV 3: Objective = 5.21

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3472724781455038), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4111365740118157), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.347=$3.7635 + t12:13.200kWh*$0.347=$4.5840 + t13:10.401kWh*$0.347=$3.6121 + t14:0.278kWh*$0.347=$0.0965
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t14:5.473kWh*$0.411=$2.2503 + t15:6.600kWh*$0.411=$2.7135 + t16:5.153kWh*$0.411=$2.1187 + t17:4.456kWh*$0.411=$1.8319 + t18:6.600kWh*$0.411=$2.7135 + t19:1.892kWh*$0.411=$0.7780

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:10.401kWh*$0.017=$0.1768
  t14: s11:0.278kWh*$0.018=$0.0049 + s26:5.473kWh*$0.018=$0.0968
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:5.153kWh*$0.013=$0.0678
  t17: s26:4.456kWh*$0.014=$0.0628
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $11.4408
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $11.9745
  Station 37: $0.0000

Total Revenue: $26.4967
Total Cost: $1.1227
Profit: $25.3739
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(11.440760520870452), '14': np.float64(0.0), '15': np.float64(1.9586532510821293), '26': np.float64(11.974533197302657), '37': np.float64(0.0)}
Real profit: $23.4153

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $20.4053
 Real profit: $23.4153
 Improvement over base: $23.4153 (inf%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 26]
Competitor stations: [14, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Model created with 332 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.41
Charging prices:
  Station 11 (AGGREGATOR): $0.347/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.411/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.41
Solution prices: 11:0.347, 14:0.600, 15:0.500, 26:0.411, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3472724781455038, 14: 0.6, 15: 0.5, 26: 0.4111365740118157, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.752462558381241

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.475576481464575

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.20878009570637

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.75
EV 2: Objective = 11.48
EV 3: Objective = 5.21

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3472724781455038), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.4111365740118157), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:10.837kWh*$0.347=$3.7635 + t12:13.200kWh*$0.347=$4.5840 + t13:10.401kWh*$0.347=$3.6121 + t14:0.278kWh*$0.347=$0.0965
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t14:5.473kWh*$0.411=$2.2503 + t15:6.600kWh*$0.411=$2.7135 + t16:5.153kWh*$0.411=$2.1187 + t17:4.456kWh*$0.411=$1.8319 + t18:6.600kWh*$0.411=$2.7135 + t19:1.892kWh*$0.411=$0.7780

Cost breakdown by time period:
  t11: s11:10.837kWh*$0.019=$0.2044 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:13.200kWh*$0.017=$0.2292 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:10.401kWh*$0.017=$0.1768
  t14: s11:0.278kWh*$0.018=$0.0049 + s26:5.473kWh*$0.018=$0.0968
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:5.153kWh*$0.013=$0.0678
  t17: s26:4.456kWh*$0.014=$0.0628
  t18: s26:6.600kWh*$0.012=$0.0769
  t19: s26:1.892kWh*$0.015=$0.0278

Profit breakdown by station:
  Station 11: $11.4408
  Station 14: $0.0000
  Station 15: $1.9587
  Station 26: $11.9745
  Station 37: $0.0000

Total Revenue: $26.4967
Total Cost: $1.1227
Profit: $25.3739
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(11.440760520870452), '14': np.float64(0.0), '15': np.float64(1.9586532510821293), '26': np.float64(11.974533197302657), '37': np.float64(0.0)}
Real profit: $23.4153

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $20.4053
 Real profit: $23.4153
 Improvement over base: $23.4153 (inf%)
✓ Completed combination 8/25

PROGRESS: Combination 9/25 - [11, 37]
Remaining: 16 combinations


============================================================
EXPERIMENT: Controlled stations [11, 37]
============================================================

Creating synthetic aggregator data for stations [11, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 37]
Competitor stations: [14, 15, 26]
Base case profit: $9.9485

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: np.float64(0.5), 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 32.576139254897654

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.310155549759978

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455732538

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 32.58
EV 2: Objective = 15.31
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.514kWh*$0.600=$1.5083 + t11:9.483kWh*$0.600=$5.6896 + t12:13.071kWh*$0.600=$7.8425 + t13:2.850kWh*$0.600=$1.7099
  Station 15: t11:1.749kWh*$0.500=$0.8746 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:1.503kWh*$0.500=$0.7513
  Station 26: t14:0.050kWh*$0.600=$0.0301 + t15:10.410kWh*$0.600=$6.2462 + t16:7.077kWh*$0.600=$4.2463 + t17:3.977kWh*$0.600=$2.3859

Cost breakdown by time period:
  t10: s14:2.514kWh*$0.040=$0.1013
  t11: s14:9.483kWh*$0.019=$0.1788 + s15:1.749kWh*$0.019=$0.0330
  t12: s14:13.071kWh*$0.017=$0.2270 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:2.850kWh*$0.017=$0.0484 + s15:3.600kWh*$0.017=$0.0612
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:0.050kWh*$0.018=$0.0009
  t15: s15:1.503kWh*$0.015=$0.0226 + s26:10.410kWh*$0.015=$0.1564
  t16: s26:7.077kWh*$0.013=$0.0932
  t17: s26:3.977kWh*$0.014=$0.0561

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $16.1947
  Station 15: $6.7829
  Station 26: $12.6020
  Station 37: $0.0000

Total Revenue: $36.6847
Total Cost: $1.1051
Profit: $35.5796
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(16.194694226099593), '15': np.float64(6.782893065251611), '26': np.float64(12.602014331055424), '37': np.float64(0.0)}
Max prices profit: $0.0000


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 334 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.69
Charging prices:
  Station 11 (AGGREGATOR): $0.347/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.467/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.69
Solution prices: 11:0.347, 14:0.600, 15:0.500, 26:0.600, 37:0.467

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3469538025381768, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4665143286266772}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.380767730401814

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.481733781618368

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.172273070455145

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.38
EV 2: Objective = 10.48
EV 3: Objective = 8.17

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3469538025381768), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4665143286266772)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.347=$1.6908 + t12:6.600kWh*$0.347=$2.2899 + t13:6.600kWh*$0.347=$2.2899 + t14:1.914kWh*$0.347=$0.6639
  Station 14: t10:2.992kWh*$0.600=$1.7950
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:3.313kWh*$0.467=$1.5455 + t13:3.767kWh*$0.467=$1.7572 + t14:7.200kWh*$0.467=$3.3589 + t15:9.902kWh*$0.467=$4.6196 + t16:7.487kWh*$0.467=$3.4928 + t17:5.671kWh*$0.467=$2.6455

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s11:6.600kWh*$0.017=$0.1122 + s37:3.767kWh*$0.017=$0.0640
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:7.200kWh*$0.018=$0.1274
  t10: s14:2.992kWh*$0.040=$0.1206
  t15: s37:9.902kWh*$0.015=$0.1488
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $6.5819
  Station 14: $1.6744
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $16.8434

Total Revenue: $29.2029
Total Cost: $1.1608
Profit: $28.0421
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.581938990372942), '14': np.float64(1.6743741348674284), '15': np.float64(2.9424478455032292), '26': np.float64(0.0), '37': np.float64(16.843353386406136)}
Real profit: $23.4253

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $18.6857
 Real profit: $23.4253
 Improvement over base: $13.4768 (135.5%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 37]
Competitor stations: [14, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_37
Model created with 332 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $18.69
Charging prices:
  Station 11 (AGGREGATOR): $0.347/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.467/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $18.69
Solution prices: 11:0.347, 14:0.600, 15:0.500, 26:0.600, 37:0.467

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.3469538025381768, 14: 0.6, 15: 0.5, 26: 0.6, 37: 0.4665143286266772}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.380767730401814

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.481733781618368

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.172273070455145

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.38
EV 2: Objective = 10.48
EV 3: Objective = 8.17

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.3469538025381768), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.4665143286266772)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.347=$1.6908 + t12:6.600kWh*$0.347=$2.2899 + t13:6.600kWh*$0.347=$2.2899 + t14:1.914kWh*$0.347=$0.6639
  Station 14: t10:2.992kWh*$0.600=$1.7950
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 37: t12:3.313kWh*$0.467=$1.5455 + t13:3.767kWh*$0.467=$1.7572 + t14:7.200kWh*$0.467=$3.3589 + t15:9.902kWh*$0.467=$4.6196 + t16:7.487kWh*$0.467=$3.4928 + t17:5.671kWh*$0.467=$2.6455

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s11:6.600kWh*$0.017=$0.1122 + s37:3.767kWh*$0.017=$0.0640
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:7.200kWh*$0.018=$0.1274
  t10: s14:2.992kWh*$0.040=$0.1206
  t15: s37:9.902kWh*$0.015=$0.1488
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $6.5819
  Station 14: $1.6744
  Station 15: $2.9424
  Station 26: $0.0000
  Station 37: $16.8434

Total Revenue: $29.2029
Total Cost: $1.1608
Profit: $28.0421
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.581938990372942), '14': np.float64(1.6743741348674284), '15': np.float64(2.9424478455032292), '26': np.float64(0.0), '37': np.float64(16.843353386406136)}
Real profit: $23.4253

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $18.6857
 Real profit: $23.4253
 Improvement over base: $13.4768 (135.5%)
✓ Completed combination 9/25

PROGRESS: Combination 10/25 - [14, 15]
Remaining: 15 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15]
============================================================

Creating synthetic aggregator data for stations [14, 15]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15]
Competitor stations: [11, 26, 37]
Base case profit: $20.2579

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: 0.8, 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842344697

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.31146001599944

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.99946944863988

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 14.31
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.600=$3.1337 + t12:6.600kWh*$0.600=$3.9600 + t13:3.801kWh*$0.600=$2.2808
  Station 14: t11:4.558kWh*$0.800=$3.6467 + t12:5.076kWh*$0.800=$4.0610
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372
  Station 37: t13:2.161kWh*$0.500=$1.0807 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $9.0967
  Station 14: $7.5337
  Station 15: $4.7747
  Station 26: $0.0000
  Station 37: $13.9619

Total Revenue: $36.3683
Total Cost: $1.0013
Profit: $35.3670
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.096726430277219), '14': np.float64(7.5336520174957196), '15': np.float64(4.774743877667924), '26': np.float64(0.0), '37': np.float64(13.961877033872538)}
Max prices profit: $12.3084


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 304 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.11
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.408/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.348/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.11
Solution prices: 11:0.600, 14:0.408, 15:0.348, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4080636704536282, 15: 0.34793641504431316, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.741546653039245

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.257641604864808

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.339912240587322

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.74
EV 2: Objective = 10.26
EV 3: Objective = 5.34

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4080636704536282), '15': np.float64(0.34793641504431316), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.408=$0.6733 + t11:4.558kWh*$0.408=$1.8601 + t12:6.600kWh*$0.408=$2.6932 + t13:6.600kWh*$0.408=$2.6932 + t14:1.910kWh*$0.408=$0.7793
  Station 15: t11:5.310kWh*$0.348=$1.8477 + t12:7.200kWh*$0.348=$2.5051 + t13:7.200kWh*$0.348=$2.5051 + t14:7.200kWh*$0.348=$2.5051 + t15:1.541kWh*$0.348=$0.5363
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:4.271kWh*$0.500=$2.1354 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:4.271kWh*$0.013=$0.0562
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $8.2861
  Station 15: $9.4013
  Station 26: $0.0000
  Station 37: $5.5521

Total Revenue: $24.3116
Total Cost: $1.0721
Profit: $23.2395
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(8.286118364607228), '15': np.float64(9.401278807540058), '26': np.float64(0.0), '37': np.float64(5.552114321132065)}
Real profit: $17.6874

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $20.1116
 Real profit: $17.6874
 Improvement over base: $-2.5705 (-12.7%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 15]
Competitor stations: [11, 26, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 302 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $20.11
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.408/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.348/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $20.11
Solution prices: 11:0.600, 14:0.408, 15:0.348, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4080636704536281, 15: 0.34793641504431305, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.741546653039061

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.80076778913174

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 5.339912240587154

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.74
EV 2: Objective = 9.80
EV 3: Objective = 5.34

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4080636704536281), '15': np.float64(0.34793641504431305), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.408=$0.6733 + t11:4.558kWh*$0.408=$1.8601 + t12:6.600kWh*$0.408=$2.6932 + t13:6.600kWh*$0.408=$2.6932 + t14:1.910kWh*$0.408=$0.7793
  Station 15: t11:5.310kWh*$0.348=$1.8477 + t12:7.200kWh*$0.348=$2.5051 + t13:7.200kWh*$0.348=$2.5051 + t14:7.200kWh*$0.348=$2.5051 + t15:1.541kWh*$0.348=$0.5363
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $8.2861
  Station 15: $9.4013
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $23.8357
Total Cost: $1.0595
Profit: $22.7761
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(8.286118364607345), '15': np.float64(9.401278807539912), '26': np.float64(0.0), '37': np.float64(5.08873328971401)}
Real profit: $17.6874

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $20.1116
 Real profit: $17.6874
 Improvement over base: $-2.5705 (-12.7%)
✓ Completed combination 10/25

PROGRESS: Combination 11/25 - [14, 26]
Remaining: 14 combinations


============================================================
EXPERIMENT: Controlled stations [14, 26]
============================================================

Creating synthetic aggregator data for stations [14, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 26]
Competitor stations: [11, 15, 37]
Base case profit: $6.5302

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: np.float64(0.5), 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.843673437782101

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.311460015999145

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455733038

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 14.31
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t11:4.558kWh*$0.800=$3.6467 + t12:5.076kWh*$0.800=$4.0610
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t13:1.995kWh*$0.500=$0.9973 + t14:3.600kWh*$0.500=$1.8000 + t15:3.600kWh*$0.500=$1.8000 + t16:6.274kWh*$0.500=$3.1372 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224 + s37:1.995kWh*$0.017=$0.0339
  t14: s15:7.200kWh*$0.018=$0.1274 + s37:3.600kWh*$0.018=$0.0637
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $8.7871
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $9.9485

Total Revenue: $33.5075
Total Cost: $1.0441
Profit: $32.4634
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(8.78713424749543), '15': np.float64(13.72774866959394), '26': np.float64(0.0), '37': np.float64(9.948502892299269)}
Max prices profit: $8.7871


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 454 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.82
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.798/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.82
Solution prices: 11:0.600, 14:0.798, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7980306461612408, 15: 0.5, 26: 0.4212499090435407, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.919712931472079

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.855448534393943

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.935358149193902

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.86
EV 3: Objective = 6.94

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7980306461612408), '15': np.float64(0.5), '26': np.float64(0.4212499090435407), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.798=$3.1962
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5677 + t12:6.600kWh*$0.421=$2.7802 + t13:6.600kWh*$0.421=$2.7802 + t14:8.075kWh*$0.421=$3.4018 + t15:8.697kWh*$0.421=$3.6635 + t16:11.753kWh*$0.421=$4.9511 + t17:6.600kWh*$0.421=$2.7802 + t18:1.930kWh*$0.421=$0.8130
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1207
  Station 15: $1.9587
  Station 26: $20.9418
  Station 37: $2.8372

Total Revenue: $29.9068
Total Cost: $1.0485
Profit: $28.8583
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.120662661102509), '15': np.float64(1.958653251081309), '26': np.float64(20.941772588345685), '37': np.float64(2.8371799672048637)}
Real profit: $24.0624

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $24.8190
 Real profit: $24.0624
 Improvement over base: $17.5322 (268.5%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 26]
Competitor stations: [11, 15, 37] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $24.82
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.798/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $24.82
Solution prices: 11:0.600, 14:0.798, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7980306461612408, 15: 0.5, 26: 0.4212499090435407, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.919712931472079

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.855448534393943

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.935358149193902

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.86
EV 3: Objective = 6.94

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7980306461612408), '15': np.float64(0.5), '26': np.float64(0.4212499090435407), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.798=$3.1962
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5677 + t12:6.600kWh*$0.421=$2.7802 + t13:6.600kWh*$0.421=$2.7802 + t14:8.075kWh*$0.421=$3.4018 + t15:8.697kWh*$0.421=$3.6635 + t16:11.753kWh*$0.421=$4.9511 + t17:6.600kWh*$0.421=$2.7802 + t18:1.930kWh*$0.421=$0.8130
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1207
  Station 15: $1.9587
  Station 26: $20.9418
  Station 37: $2.8372

Total Revenue: $29.9068
Total Cost: $1.0485
Profit: $28.8583
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.120662661102509), '15': np.float64(1.958653251081309), '26': np.float64(20.941772588345685), '37': np.float64(2.8371799672048637)}
Real profit: $24.0624

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $24.8190
 Real profit: $24.0624
 Improvement over base: $17.5322 (268.5%)
✓ Completed combination 11/25

PROGRESS: Combination 12/25 - [14, 37]
Remaining: 13 combinations


============================================================
EXPERIMENT: Controlled stations [14, 37]
============================================================

Creating synthetic aggregator data for stations [14, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 37]
Competitor stations: [11, 15, 26]
Base case profit: $16.4787

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: np.float64(0.5), 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.884061304638413

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.973692459676961

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455732843

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.88
EV 2: Objective = 15.97
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t11:4.558kWh*$0.800=$3.6467 + t12:3.321kWh*$0.800=$2.6565
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 26: t14:3.627kWh*$0.600=$2.1764 + t15:6.600kWh*$0.600=$3.9600 + t16:6.600kWh*$0.600=$3.9600 + t17:6.733kWh*$0.600=$4.0398 + t18:0.562kWh*$0.600=$0.3374

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224
  t14: s15:7.200kWh*$0.018=$0.1274 + s26:3.627kWh*$0.018=$0.0642
  t15: s15:1.541kWh*$0.015=$0.0232 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.4131
  Station 15: $13.7277
  Station 26: $14.1219
  Station 37: $0.0000

Total Revenue: $36.3227
Total Cost: $1.0600
Profit: $35.2627
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.413110725737252), '15': np.float64(13.727748669593682), '26': np.float64(14.12186100647024), '37': np.float64(0.0)}
Max prices profit: $7.4131


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 454 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.73
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.495/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.612/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.73
Solution prices: 11:0.600, 14:0.495, 15:0.500, 26:0.600, 37:0.612

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.49474495849149364, 15: 0.5, 26: 0.6, 37: 0.6118180699965968}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.49930183060027

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.16498608389765

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.158097430175793

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.50
EV 2: Objective = 12.16
EV 3: Objective = 9.16

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.49474495849149364), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.6118180699965968)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.495=$1.5974 + t11:11.158kWh*$0.495=$5.5206 + t12:11.444kWh*$0.495=$5.6620 + t13:6.600kWh*$0.495=$3.2653 + t14:1.910kWh*$0.495=$0.9449
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t13:0.199kWh*$0.612=$0.1217 + t14:3.528kWh*$0.612=$2.1586 + t15:0.060kWh*$0.612=$0.0364 + t16:6.274kWh*$0.612=$3.8388 + t17:4.581kWh*$0.612=$2.8027

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:11.444kWh*$0.017=$0.1987 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:3.600kWh*$0.017=$0.0612 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:3.528kWh*$0.018=$0.0624
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:0.060kWh*$0.015=$0.0009
  t16: s37:6.274kWh*$0.013=$0.0826
  t17: s37:4.581kWh*$0.014=$0.0646

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $16.3049
  Station 15: $6.9449
  Station 26: $0.0000
  Station 37: $8.7443

Total Revenue: $33.1483
Total Cost: $1.1543
Profit: $31.9940
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(16.304867505245813), '15': np.float64(6.94485560434176), '26': np.float64(0.0), '37': np.float64(8.744258356252477)}
Real profit: $25.0491

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $22.7252
 Real profit: $25.0491
 Improvement over base: $8.5704 (52.0%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 37]
Competitor stations: [11, 15, 26] with fixed prices: [np.float64(0.6), np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.73
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.495/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.612/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.73
Solution prices: 11:0.600, 14:0.495, 15:0.500, 26:0.600, 37:0.612

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.4947449584914937, 15: 0.5, 26: 0.6, 37: 0.6118180699965968}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.49930183060016

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.906162609500214

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.471183534214113

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.50
EV 2: Objective = 11.91
EV 3: Objective = 7.47

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.4947449584914937), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.6118180699965968)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.495=$2.9181 + t11:11.158kWh*$0.495=$5.5206 + t12:7.113kWh*$0.495=$3.5191 + t13:6.600kWh*$0.495=$3.2653 + t14:1.910kWh*$0.495=$0.9449
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:6.290kWh*$0.500=$3.1452 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t14:0.122kWh*$0.612=$0.0746 + t15:3.600kWh*$0.612=$2.2025 + t16:3.319kWh*$0.612=$2.0306 + t17:3.433kWh*$0.612=$2.1005

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $15.4503
  Station 15: $8.2443
  Station 26: $0.0000
  Station 37: $6.2599

Total Revenue: $31.1215
Total Cost: $1.1669
Profit: $29.9546
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(15.450321088774587), '15': np.float64(8.244333607923187), '26': np.float64(0.0), '37': np.float64(6.25993254266425)}
Real profit: $21.7103

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $22.7252
 Real profit: $21.7103
 Improvement over base: $5.2316 (31.7%)
✓ Completed combination 12/25

PROGRESS: Combination 13/25 - [15, 26]
Remaining: 12 combinations


============================================================
EXPERIMENT: Controlled stations [15, 26]
============================================================

Creating synthetic aggregator data for stations [15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [15, 26]
Competitor stations: [11, 14, 37]
Base case profit: $13.7277

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: 0.8, 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346283

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199898

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.216050345759268

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 12.46
EV 3: Objective = 9.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372
  Station 37: t12:2.421kWh*$0.500=$1.2103 + t13:5.761kWh*$0.500=$2.8807 + t14:10.800kWh*$0.500=$5.4000 + t15:10.800kWh*$0.500=$5.4000 + t16:8.379kWh*$0.500=$4.1897 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:2.421kWh*$0.017=$0.0420
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $4.7747
  Station 26: $0.0000
  Station 37: $20.9253

Total Revenue: $34.6670
Total Cost: $1.1049
Profit: $33.5621
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775195969), '15': np.float64(4.774743877669543), '26': np.float64(0.0), '37': np.float64(20.925343756388624)}
Max prices profit: $4.7747


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 454 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.87
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.634/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.405/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.87
Solution prices: 11:0.600, 14:0.600, 15:0.634, 26:0.405, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.633538864621931, 26: 0.4053226783427281, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.177983389464119

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.241413300489725

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.790114547370486

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.18
EV 2: Objective = 11.24
EV 3: Objective = 7.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.633538864621931), '26': np.float64(0.4053226783427281), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:1.887kWh*$0.600=$1.1323
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.634=$2.2561 + t12:0.508kWh*$0.634=$0.3219
  Station 26: t11:0.874kWh*$0.405=$0.3545 + t12:6.600kWh*$0.405=$2.6751 + t13:6.600kWh*$0.405=$2.6751 + t14:12.253kWh*$0.405=$4.9664 + t15:13.200kWh*$0.405=$5.3503 + t16:11.753kWh*$0.405=$4.7639 + t17:0.399kWh*$0.405=$0.1618

Cost breakdown by time period:
  t11: s11:1.887kWh*$0.019=$0.0356 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:0.874kWh*$0.019=$0.0165
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:12.253kWh*$0.018=$0.2168
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $1.0968
  Station 14: $4.5838
  Station 15: $2.5021
  Station 26: $20.1283
  Station 37: $0.0000

Total Revenue: $29.3849
Total Cost: $1.0739
Profit: $28.3110
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.096751781517419), '14': np.float64(4.583814043739683), '15': np.float64(2.502058209624104), '26': np.float64(20.12834458744217), '37': np.float64(0.0)}
Real profit: $22.6304

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $25.8668
 Real profit: $22.6304
 Improvement over base: $8.9027 (64.9%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15, 26]
Competitor stations: [11, 14, 37] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.87
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.634/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.405/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.87
Solution prices: 11:0.600, 14:0.600, 15:0.634, 26:0.405, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.6335388646219311, 26: 0.4053226783427281, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.177983389464394

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.24141330048815

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.79011454736993

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.18
EV 2: Objective = 11.24
EV 3: Objective = 7.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.6335388646219311), '26': np.float64(0.4053226783427281), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:1.887kWh*$0.600=$1.1323
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.634=$2.2561 + t12:0.508kWh*$0.634=$0.3219
  Station 26: t11:0.874kWh*$0.405=$0.3545 + t12:6.600kWh*$0.405=$2.6751 + t13:6.600kWh*$0.405=$2.6751 + t14:12.253kWh*$0.405=$4.9664 + t15:13.200kWh*$0.405=$5.3503 + t16:11.753kWh*$0.405=$4.7639 + t17:0.399kWh*$0.405=$0.1618

Cost breakdown by time period:
  t11: s11:1.887kWh*$0.019=$0.0356 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:0.874kWh*$0.019=$0.0165
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:12.253kWh*$0.018=$0.2168
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $1.0968
  Station 14: $4.5838
  Station 15: $2.5021
  Station 26: $20.1283
  Station 37: $0.0000

Total Revenue: $29.3849
Total Cost: $1.0739
Profit: $28.3110
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.0967517815168537), '14': np.float64(4.58381404373814), '15': np.float64(2.502058209624373), '26': np.float64(20.128344587442257), '37': np.float64(0.0)}
Real profit: $22.6304

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $25.8668
 Real profit: $22.6304
 Improvement over base: $8.9027 (64.9%)
✓ Completed combination 13/25

PROGRESS: Combination 14/25 - [15, 37]
Remaining: 11 combinations


============================================================
EXPERIMENT: Controlled stations [15, 37]
============================================================

Creating synthetic aggregator data for stations [15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [15, 37]
Competitor stations: [11, 14, 26]
Base case profit: $23.6763

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: 0.8, 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 14.011429852639719

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.682362377332566

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.999469448639523

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 14.01
EV 2: Objective = 14.68
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.600=$3.1337 + t12:6.600kWh*$0.600=$3.9600 + t13:3.801kWh*$0.600=$2.2808
  Station 14: t10:5.695kWh*$0.600=$3.4171 + t11:5.962kWh*$0.600=$3.5771 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.910kWh*$0.600=$1.1459
  Station 26: t14:2.737kWh*$0.600=$1.6422 + t15:6.600kWh*$0.600=$3.9600 + t16:6.600kWh*$0.600=$3.9600 + t17:1.290kWh*$0.600=$0.7738
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:3.600kWh*$0.800=$2.8800 + t16:0.645kWh*$0.800=$0.5157

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:5.962kWh*$0.019=$0.1124
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:6.600kWh*$0.017=$0.1146
  t13: s11:3.801kWh*$0.017=$0.0646 + s14:6.600kWh*$0.017=$0.1122
  t10: s14:5.695kWh*$0.040=$0.2296
  t14: s14:1.910kWh*$0.018=$0.0338 + s26:2.737kWh*$0.018=$0.0484 + s37:0.122kWh*$0.018=$0.0022
  t15: s26:6.600kWh*$0.015=$0.0992 + s37:3.600kWh*$0.015=$0.0541
  t16: s26:6.600kWh*$0.013=$0.0869 + s37:0.645kWh*$0.013=$0.0085
  t17: s26:1.290kWh*$0.014=$0.0182

Profit breakdown by station:
  Station 11: $9.0967
  Station 14: $15.4575
  Station 15: $0.0000
  Station 26: $10.0834
  Station 37: $3.4285

Total Revenue: $39.2638
Total Cost: $1.1977
Profit: $38.0661
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.096726430276863), '14': np.float64(15.457547573669558), '15': np.float64(0.0), '26': np.float64(10.08335937221623), '37': np.float64(3.4284707091677116)}
Max prices profit: $3.4285


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 454 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.29
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.495/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.29
Solution prices: 11:0.600, 14:0.600, 15:0.495, 26:0.600, 37:0.460

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.49505891547684383, 26: 0.6, 37: 0.46049769941716306}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.268622553597098

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.016246444742794

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.089099188262164

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.27
EV 2: Objective = 12.02
EV 3: Objective = 8.09

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.49505891547684383), '26': np.float64(0.6), '37': np.float64(0.46049769941716306)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.992kWh*$0.600=$1.7950 + t11:4.558kWh*$0.600=$2.7351 + t12:5.251kWh*$0.600=$3.1507
  Station 15: t11:3.561kWh*$0.495=$1.7630 + t12:2.546kWh*$0.495=$1.2607
  Station 37: t12:3.313kWh*$0.460=$1.5256 + t13:3.767kWh*$0.460=$1.7346 + t14:10.777kWh*$0.460=$4.9628 + t15:10.800kWh*$0.460=$4.9734 + t16:7.487kWh*$0.460=$3.4478 + t17:7.033kWh*$0.460=$3.2388 + t18:0.023kWh*$0.460=$0.0106

Cost breakdown by time period:
  t10: s14:2.992kWh*$0.040=$0.1206
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.251kWh*$0.017=$0.0912 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s37:3.767kWh*$0.017=$0.0640
  t14: s37:10.777kWh*$0.018=$0.1907
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:0.023kWh*$0.012=$0.0003

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.3830
  Station 15: $2.9123
  Station 26: $0.0000
  Station 37: $19.2210

Total Revenue: $30.5979
Total Cost: $1.0816
Profit: $29.5163
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.382974728954823), '15': np.float64(2.9122694136153155), '26': np.float64(0.0), '37': np.float64(19.22101064965359)}
Real profit: $22.1333

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $22.2869
 Real profit: $22.1333
 Improvement over base: $-1.5430 (-6.5%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15, 37]
Competitor stations: [11, 14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 452 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $22.29
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.495/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $22.29
Solution prices: 11:0.600, 14:0.600, 15:0.495, 26:0.600, 37:0.460

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.4950589154768439, 26: 0.6, 37: 0.460497699417163}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.26862255359689

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.915515208742221

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.628569970155631

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.27
EV 2: Objective = 11.92
EV 3: Objective = 7.63

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.4950589154768439), '26': np.float64(0.6), '37': np.float64(0.460497699417163)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:5.310kWh*$0.495=$2.6289 + t12:6.146kWh*$0.495=$3.0429 + t13:3.600kWh*$0.495=$1.7822 + t14:3.600kWh*$0.495=$1.7822 + t15:1.503kWh*$0.495=$0.7438
  Station 37: t13:2.161kWh*$0.460=$0.9953 + t14:7.200kWh*$0.460=$3.3156 + t15:7.200kWh*$0.460=$3.3156 + t16:7.200kWh*$0.460=$3.3156 + t17:5.039kWh*$0.460=$2.3203

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t13: s15:3.600kWh*$0.017=$0.0612 + s37:2.161kWh*$0.017=$0.0367
  t14: s15:3.600kWh*$0.018=$0.0637 + s37:7.200kWh*$0.018=$0.1274
  t15: s15:1.503kWh*$0.015=$0.0226 + s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $6.5302
  Station 15: $9.6257
  Station 26: $0.0000
  Station 37: $12.8242

Total Revenue: $30.0132
Total Cost: $1.0331
Profit: $28.9801
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(6.530191534995611), '15': np.float64(9.625731764724103), '26': np.float64(0.0), '37': np.float64(12.824210777086863)}
Real profit: $22.4499

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $22.2869
 Real profit: $22.4499
 Improvement over base: $-1.2263 (-5.2%)
✓ Completed combination 14/25

PROGRESS: Combination 15/25 - [26, 37]
Remaining: 10 combinations


============================================================
EXPERIMENT: Controlled stations [26, 37]
============================================================

Creating synthetic aggregator data for stations [26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [26, 37]
Competitor stations: [11, 14, 15]
Base case profit: $9.9485

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: np.float64(0.5), 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842345766

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.682362377332892

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455732701

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 14.68
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.910kWh*$0.600=$1.1459
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:3.600kWh*$0.800=$2.8800 + t16:3.319kWh*$0.800=$2.6552 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $12.3779
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $8.2310

Total Revenue: $35.3961
Total Cost: $1.0595
Profit: $34.3366
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(12.377858662735504), '15': np.float64(13.727748669593751), '26': np.float64(0.0), '37': np.float64(8.230978330212869)}
Max prices profit: $8.2310


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_26        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 604 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.46
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.387/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.352/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.46
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.387, 37:0.352

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.386945328949101, 37: 0.35211887486168736}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.799364977554543

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.508243455995547

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.370575714812328

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.80
EV 2: Objective = 10.51
EV 3: Objective = 6.37

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.386945328949101), '37': np.float64(0.35211887486168736)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.180kWh*$0.600=$2.5080
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t11:1.348kWh*$0.387=$0.5215 + t12:6.600kWh*$0.387=$2.5538 + t13:6.600kWh*$0.387=$2.5538 + t14:2.602kWh*$0.387=$1.0069 + t18:4.221kWh*$0.387=$1.6332 + t19:4.482kWh*$0.387=$1.7344
  Station 37: t13:3.214kWh*$0.352=$1.1318 + t14:7.200kWh*$0.352=$2.5353 + t15:7.200kWh*$0.352=$2.5353 + t16:7.200kWh*$0.352=$2.5353 + t17:3.986kWh*$0.352=$1.4034

Cost breakdown by time period:
  t11: s14:4.180kWh*$0.019=$0.0788 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:2.546kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.214kWh*$0.017=$0.0546
  t14: s26:2.602kWh*$0.018=$0.0460 + s37:7.200kWh*$0.018=$0.1274
  t18: s26:4.221kWh*$0.012=$0.0492
  t19: s26:4.482kWh*$0.015=$0.0659
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.986kWh*$0.014=$0.0562

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.4292
  Station 15: $2.9424
  Station 26: $9.5902
  Station 37: $9.6999

Total Revenue: $25.7064
Total Cost: $1.0448
Profit: $24.6617
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.429161502510736), '15': np.float64(2.9424478455031755), '26': np.float64(9.590204578883212), '37': np.float64(9.699850393365205)}
Real profit: $19.2901

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $21.4555
 Real profit: $19.2901
 Improvement over base: $9.3416 (93.9%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [26, 37]
Competitor stations: [11, 14, 15] with fixed prices: [np.float64(0.6), np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_26        mlp  ...  continuous         1
1  profit_37        mlp  ...  continuous         1

[2 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 602 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $21.46
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.387/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.352/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $21.46
Solution prices: 11:0.600, 14:0.600, 15:0.500, 26:0.387, 37:0.352

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.5, 26: 0.386945328949101, 37: 0.35211887486168736}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.799364977554543

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 10.508243455995547

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.370575714812328

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.80
EV 2: Objective = 10.51
EV 3: Objective = 6.37

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.386945328949101), '37': np.float64(0.35211887486168736)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.180kWh*$0.600=$2.5080
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.546kWh*$0.500=$1.2732
  Station 26: t11:1.348kWh*$0.387=$0.5215 + t12:6.600kWh*$0.387=$2.5538 + t13:6.600kWh*$0.387=$2.5538 + t14:2.602kWh*$0.387=$1.0069 + t18:4.221kWh*$0.387=$1.6332 + t19:4.482kWh*$0.387=$1.7344
  Station 37: t13:3.214kWh*$0.352=$1.1318 + t14:7.200kWh*$0.352=$2.5353 + t15:7.200kWh*$0.352=$2.5353 + t16:7.200kWh*$0.352=$2.5353 + t17:3.986kWh*$0.352=$1.4034

Cost breakdown by time period:
  t11: s14:4.180kWh*$0.019=$0.0788 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:2.546kWh*$0.017=$0.0442 + s26:6.600kWh*$0.017=$0.1146
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.214kWh*$0.017=$0.0546
  t14: s26:2.602kWh*$0.018=$0.0460 + s37:7.200kWh*$0.018=$0.1274
  t18: s26:4.221kWh*$0.012=$0.0492
  t19: s26:4.482kWh*$0.015=$0.0659
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:3.986kWh*$0.014=$0.0562

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $2.4292
  Station 15: $2.9424
  Station 26: $9.5902
  Station 37: $9.6999

Total Revenue: $25.7064
Total Cost: $1.0448
Profit: $24.6617
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(2.429161502510736), '15': np.float64(2.9424478455031755), '26': np.float64(9.590204578883212), '37': np.float64(9.699850393365205)}
Real profit: $19.2901

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $21.4555
 Real profit: $19.2901
 Improvement over base: $9.3416 (93.9%)
✓ Completed combination 15/25

PROGRESS: Combination 16/25 - [11, 14, 15]
Remaining: 9 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 15]
============================================================

Creating synthetic aggregator data for stations [11, 14, 15]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 15]
Competitor stations: [26, 37]
Base case profit: $20.2579

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: 0.8, 26: np.float64(0.6), 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842345994

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.824137070613082

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.984067127679985

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 15.82
EV 3: Objective = 9.98

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.037kWh*$0.800=$3.2299
  Station 14: t10:3.229kWh*$0.800=$2.5830 + t11:0.771kWh*$0.800=$0.6170
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372
  Station 26: t12:4.975kWh*$0.600=$2.9848 + t13:5.115kWh*$0.600=$3.0688
  Station 37: t12:2.421kWh*$0.500=$1.2103 + t13:3.767kWh*$0.500=$1.8834 + t14:9.499kWh*$0.500=$4.7494 + t15:10.800kWh*$0.500=$5.4000 + t16:8.379kWh*$0.500=$4.1897 + t17:7.033kWh*$0.500=$3.5166 + t18:1.301kWh*$0.500=$0.6506

Cost breakdown by time period:
  t11: s11:4.037kWh*$0.019=$0.0761 + s14:0.771kWh*$0.019=$0.0145 + s15:3.561kWh*$0.019=$0.0672
  t10: s14:3.229kWh*$0.040=$0.1302
  t12: s15:2.546kWh*$0.017=$0.0442 + s26:4.975kWh*$0.017=$0.0864 + s37:2.421kWh*$0.017=$0.0420
  t13: s26:5.115kWh*$0.017=$0.0869 + s37:3.767kWh*$0.017=$0.0640
  t14: s37:9.499kWh*$0.018=$0.1681
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:8.379kWh*$0.013=$0.1103
  t17: s37:7.033kWh*$0.014=$0.0992
  t18: s37:1.301kWh*$0.012=$0.0152

Profit breakdown by station:
  Station 11: $3.1537
  Station 14: $3.0554
  Station 15: $4.7747
  Station 26: $5.8803
  Station 37: $20.9390

Total Revenue: $38.9697
Total Cost: $1.1666
Profit: $37.8031
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(3.153738336869106), '14': np.float64(3.055359951368053), '15': np.float64(4.7747438776692475), '26': np.float64(5.880274017393843), '37': np.float64(20.938974447478547)}
Max prices profit: $10.9838


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_15        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 335 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.26
Charging prices:
  Station 11 (AGGREGATOR): $0.794/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.416/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.462/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.26
Solution prices: 11:0.794, 14:0.416, 15:0.462, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.7942072489162855, 14: 0.41566343322716465, 15: 0.46239611029220085, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.323837480145897

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.94426262021181

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.386264962365499

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.32
EV 2: Objective = 9.94
EV 3: Objective = 6.39

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.7942072489162855), '14': np.float64(0.41566343322716465), '15': np.float64(0.46239611029220085), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.416=$2.4517 + t11:11.158kWh*$0.416=$4.6382 + t12:7.113kWh*$0.416=$2.9566 + t13:6.600kWh*$0.416=$2.7434 + t14:1.910kWh*$0.416=$0.7938
  Station 15: t11:3.561kWh*$0.462=$1.6467 + t12:3.600kWh*$0.462=$1.6646 + t13:6.290kWh*$0.462=$2.9087 + t14:3.600kWh*$0.462=$1.6646 + t15:0.039kWh*$0.462=$0.0180
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:3.319kWh*$0.500=$1.6595 + t17:3.433kWh*$0.500=$1.7166

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $12.8660
  Station 15: $7.6017
  Station 26: $0.0000
  Station 37: $5.0887

Total Revenue: $26.7233
Total Cost: $1.1669
Profit: $25.5564
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(12.865975100075337), '15': np.float64(7.601667483332011), '26': np.float64(0.0), '37': np.float64(5.0887332897140185)}
Real profit: $20.4676

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $23.2596
 Real profit: $20.4676
 Improvement over base: $0.2097 (1.0%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14, 15]
Competitor stations: [26, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_15        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_15
Model created with 333 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.34
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.416/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.466/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.34
Solution prices: 11:0.800, 14:0.416, 15:0.466, 26:0.600, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.4160759859568138, 15: 0.4658571199658726, 26: 0.6, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.900400322213757

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 9.952052229705433

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.400357189676637

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.90
EV 2: Objective = 9.95
EV 3: Objective = 6.40

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.4160759859568138), '15': np.float64(0.4658571199658726), '26': np.float64(0.6), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:11.593kWh*$0.416=$4.8238 + t11:17.758kWh*$0.416=$7.3889 + t12:10.105kWh*$0.416=$4.2045 + t13:6.600kWh*$0.416=$2.7461 + t14:1.910kWh*$0.416=$0.7946
  Station 15: t13:3.423kWh*$0.466=$1.5948 + t14:3.600kWh*$0.466=$1.6771 + t15:0.724kWh*$0.466=$0.3375
  Station 37: t14:0.122kWh*$0.500=$0.0609 + t15:3.600kWh*$0.500=$1.8000 + t16:2.633kWh*$0.500=$1.3167 + t17:1.204kWh*$0.500=$0.6019

Cost breakdown by time period:
  t10: s14:11.593kWh*$0.040=$0.4674
  t11: s14:17.758kWh*$0.019=$0.3349
  t12: s14:10.105kWh*$0.017=$0.1755
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:3.423kWh*$0.017=$0.0582
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:0.724kWh*$0.015=$0.0109 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:2.633kWh*$0.013=$0.0347
  t17: s37:1.204kWh*$0.014=$0.0170

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $18.8341
  Station 15: $3.4766
  Station 26: $0.0000
  Station 37: $3.6716

Total Revenue: $27.3467
Total Cost: $1.3644
Profit: $25.9823
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(18.834096768469347), '15': np.float64(3.4765782897673834), '26': np.float64(0.0), '37': np.float64(3.6716330236093753)}
Real profit: $22.3107

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $23.3419
 Real profit: $22.3107
 Improvement over base: $2.0527 (10.1%)
✓ Completed combination 16/25

PROGRESS: Combination 17/25 - [11, 14, 26]
Remaining: 8 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 26]
============================================================

Creating synthetic aggregator data for stations [11, 14, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 26]
Competitor stations: [15, 37]
Base case profit: $6.5302

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: np.float64(0.5), 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.8436736514665

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.311460015998627

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.81930333689047

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.84
EV 2: Objective = 14.31
EV 3: Objective = 9.82

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.800=$3.6467 + t12:5.076kWh*$0.800=$4.0610
  Station 15: t10:3.078kWh*$0.500=$1.5390 + t11:7.161kWh*$0.500=$3.5806 + t12:6.146kWh*$0.500=$3.0732 + t13:2.427kWh*$0.500=$1.2133
  Station 37: t13:2.161kWh*$0.500=$1.0807 + t14:7.200kWh*$0.500=$3.6000 + t15:8.969kWh*$0.500=$4.4844 + t16:10.800kWh*$0.500=$5.4000 + t17:7.422kWh*$0.500=$3.7110

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:7.161kWh*$0.019=$0.1350
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:6.146kWh*$0.017=$0.1067
  t10: s15:3.078kWh*$0.040=$0.1241
  t13: s15:2.427kWh*$0.017=$0.0412 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:8.969kWh*$0.015=$0.1347
  t16: s37:10.800kWh*$0.013=$0.1422
  t17: s37:7.422kWh*$0.014=$0.1047

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.5337
  Station 15: $8.9990
  Station 26: $0.0000
  Station 37: $17.7305

Total Revenue: $35.3900
Total Cost: $1.1269
Profit: $34.2631
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.533652017494891), '15': np.float64(8.9989942147125), '26': np.float64(0.0), '37': np.float64(17.730464569184377)}
Max prices profit: $7.5337


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 485 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.93
Charging prices:
  Station 11 (AGGREGATOR): $0.615/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.799/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.93
Solution prices: 11:0.615, 14:0.799, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6151396754899813, 14: 0.7986933069161678, 15: 0.5, 26: 0.4211466254712877, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.918004868212986

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.856288330124897

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.933657713065269

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.86
EV 3: Objective = 6.93

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6151396754899813), '14': np.float64(0.7986933069161678), '15': np.float64(0.5), '26': np.float64(0.4211466254712877), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.799=$3.1988
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5676 + t12:6.600kWh*$0.421=$2.7796 + t13:6.600kWh*$0.421=$2.7796 + t14:8.075kWh*$0.421=$3.4009 + t15:8.697kWh*$0.421=$3.6626 + t16:11.753kWh*$0.421=$4.9499 + t17:6.600kWh*$0.421=$2.7796 + t18:1.930kWh*$0.421=$0.8128
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1233
  Station 15: $1.9587
  Station 26: $20.9364
  Station 37: $2.8372

Total Revenue: $29.9041
Total Cost: $1.0485
Profit: $28.8556
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.123316680883695), '15': np.float64(1.9586532510812067), '26': np.float64(20.93644283558871), '37': np.float64(2.8371799672047824)}
Real profit: $24.0598

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $26.9318
 Real profit: $24.0598
 Improvement over base: $17.5296 (268.4%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14, 26]
Competitor stations: [15, 37] with fixed prices: [np.float64(0.5), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_26
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $26.94
Charging prices:
  Station 11 (AGGREGATOR): $0.616/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.421/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $26.94
Solution prices: 11:0.616, 14:0.800, 15:0.500, 26:0.421, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6158918157708406, 14: 0.8, 15: 0.5, 26: 0.4212065212088545, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 8.91899540045803

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.862302956058123

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.934643822220097

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 8.92
EV 2: Objective = 12.86
EV 3: Objective = 6.93

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6158918157708406), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.4212065212088545), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.800=$3.2041
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:0.508kWh*$0.500=$0.2540
  Station 26: t11:1.348kWh*$0.421=$0.5676 + t12:6.600kWh*$0.421=$2.7800 + t13:6.600kWh*$0.421=$2.7800 + t14:8.075kWh*$0.421=$3.4014 + t15:8.697kWh*$0.421=$3.6631 + t16:11.753kWh*$0.421=$4.9506 + t17:6.600kWh*$0.421=$2.7800 + t18:1.930kWh*$0.421=$0.8129
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:8.075kWh*$0.018=$0.1429 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1286
  Station 15: $1.9587
  Station 26: $20.9395
  Station 37: $2.8372

Total Revenue: $29.9124
Total Cost: $1.0485
Profit: $28.8639
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.1285501118089134), '15': np.float64(1.958653251081134), '26': np.float64(20.939533641468984), '37': np.float64(2.8371799672046953)}
Real profit: $24.0681

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $26.9351
 Real profit: $24.0681
 Improvement over base: $17.5379 (268.6%)
✓ Completed combination 17/25

PROGRESS: Combination 18/25 - [11, 14, 37]
Remaining: 7 combinations


============================================================
EXPERIMENT: Controlled stations [11, 14, 37]
============================================================

Creating synthetic aggregator data for stations [11, 14, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 14, 37]
Competitor stations: [15, 26]
Base case profit: $16.4787

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: 0.8, 15: np.float64(0.5), 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.884061304639978

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.973692459678738

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.01202345573282

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.88
EV 2: Objective = 15.97
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t11:4.558kWh*$0.800=$3.6467 + t12:3.321kWh*$0.800=$2.6565
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 26: t14:3.627kWh*$0.600=$2.1764 + t15:6.600kWh*$0.600=$3.9600 + t16:6.600kWh*$0.600=$3.9600 + t17:6.733kWh*$0.600=$4.0398 + t18:0.562kWh*$0.600=$0.3374

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:7.200kWh*$0.017=$0.1250
  t13: s15:7.200kWh*$0.017=$0.1224
  t14: s15:7.200kWh*$0.018=$0.1274 + s26:3.627kWh*$0.018=$0.0642
  t15: s15:1.541kWh*$0.015=$0.0232 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.4131
  Station 15: $13.7277
  Station 26: $14.1219
  Station 37: $0.0000

Total Revenue: $36.3227
Total Cost: $1.0600
Profit: $35.2627
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.413110725739003), '15': np.float64(13.727748669593673), '26': np.float64(14.121861006471706), '37': np.float64(0.0)}
Max prices profit: $7.4131


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 485 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.03
Charging prices:
  Station 11 (AGGREGATOR): $0.794/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.481/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.605/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.03
Solution prices: 11:0.794, 14:0.481, 15:0.500, 26:0.600, 37:0.605

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.79387487514859, 14: 0.4811813373807779, 15: 0.5, 26: 0.6, 37: 0.6047379991967524}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.457788916570909

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.721909432983889

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.301762412844333

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.46
EV 2: Objective = 11.72
EV 3: Objective = 7.30

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.79387487514859), '14': np.float64(0.4811813373807779), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.6047379991967524)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.481=$2.8381 + t11:11.158kWh*$0.481=$5.3692 + t12:7.113kWh*$0.481=$3.4227 + t13:6.600kWh*$0.481=$3.1758 + t14:1.910kWh*$0.481=$0.9190
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:6.290kWh*$0.500=$3.1452 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t15:1.800kWh*$0.605=$1.0882 + t16:5.416kWh*$0.605=$3.2754 + t17:3.433kWh*$0.605=$2.0762

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:1.800kWh*$0.015=$0.0270
  t16: s37:5.416kWh*$0.013=$0.0713
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $15.0071
  Station 15: $8.2443
  Station 26: $0.0000
  Station 37: $6.2931

Total Revenue: $30.7099
Total Cost: $1.1653
Profit: $29.5445
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(15.007068512492383), '15': np.float64(8.244333607923496), '26': np.float64(0.0), '37': np.float64(6.29313100030484)}
Real profit: $21.3002

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $27.0278
 Real profit: $21.3002
 Improvement over base: $4.8215 (29.3%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 14, 37]
Competitor stations: [15, 26] with fixed prices: [np.float64(0.5), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 14: Best algorithm mlp (R² = 0.6709)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_14        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_14
Embedding objective function for profit_37
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.14
Charging prices:
  Station 11 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 14 (AGGREGATOR): $0.481/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.605/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.14
Solution prices: 11:0.800, 14:0.481, 15:0.500, 26:0.600, 37:0.605

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.8, 14: 0.48075281938597986, 15: 0.5, 26: 0.6, 37: 0.604514317208188}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.557966515305477

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.712843184188337

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.296409859967544

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.56
EV 2: Objective = 11.71
EV 3: Objective = 7.30

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.48075281938597986), '15': np.float64(0.5), '26': np.float64(0.6), '37': np.float64(0.604514317208188)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.481=$2.8356 + t11:11.158kWh*$0.481=$5.3644 + t12:7.113kWh*$0.481=$3.4196 + t13:6.600kWh*$0.481=$3.1730 + t14:1.910kWh*$0.481=$0.9181
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:6.290kWh*$0.500=$3.1452 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 37: t15:1.800kWh*$0.605=$1.0878 + t16:4.394kWh*$0.605=$2.6562 + t17:3.600kWh*$0.605=$2.1763 + t18:1.030kWh*$0.605=$0.6229

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:7.113kWh*$0.017=$0.1235 + s15:3.600kWh*$0.017=$0.0625
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:6.290kWh*$0.017=$0.1069
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:3.600kWh*$0.018=$0.0637
  t15: s15:0.039kWh*$0.015=$0.0006 + s37:1.800kWh*$0.015=$0.0270
  t16: s37:4.394kWh*$0.013=$0.0578
  t17: s37:3.600kWh*$0.014=$0.0508
  t18: s37:1.030kWh*$0.012=$0.0120

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $14.9931
  Station 15: $8.2443
  Station 26: $0.0000
  Station 37: $6.3956

Total Revenue: $30.7992
Total Cost: $1.1662
Profit: $29.6330
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(14.993064751725434), '15': np.float64(8.244333607923444), '26': np.float64(0.0), '37': np.float64(6.395559620453599)}
Real profit: $21.3886

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $27.1426
 Real profit: $21.3886
 Improvement over base: $4.9099 (29.8%)
✓ Completed combination 18/25

PROGRESS: Combination 19/25 - [11, 15, 26]
Remaining: 6 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15, 26]
============================================================

Creating synthetic aggregator data for stations [11, 15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15, 26]
Competitor stations: [14, 37]
Base case profit: $13.7277

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: 0.8, 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346608

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.46159501199994

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.560748050879535

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 12.46
EV 3: Objective = 9.56

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:5.898kWh*$0.600=$3.5390 + t11:11.158kWh*$0.600=$6.6951 + t12:5.589kWh*$0.600=$3.3536
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372 + t13:2.690kWh*$0.800=$2.1523
  Station 37: t13:2.161kWh*$0.500=$1.0807 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:11.158kWh*$0.019=$0.2104 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.589kWh*$0.017=$0.0971 + s15:2.546kWh*$0.017=$0.0442
  t13: s15:2.690kWh*$0.017=$0.0457 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $13.0423
  Station 15: $6.8813
  Station 26: $0.0000
  Station 37: $13.9619

Total Revenue: $35.0261
Total Cost: $1.1405
Profit: $33.8856
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(13.042337798740133), '15': np.float64(6.881346731251799), '26': np.float64(0.0), '37': np.float64(13.961877033872542)}
Max prices profit: $6.8813


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 485 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.22
Charging prices:
  Station 11 (AGGREGATOR): $0.456/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.756/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.401/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.22
Solution prices: 11:0.456, 14:0.600, 15:0.756, 26:0.401, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4558870306880226, 14: 0.6, 15: 0.7559994909696252, 26: 0.4010453520713339, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.710960237275119

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.1706765541567

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.602715136483747

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.71
EV 2: Objective = 11.17
EV 3: Objective = 6.60

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4558870306880226), '14': np.float64(0.6), '15': np.float64(0.7559994909696252), '26': np.float64(0.4010453520713339), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:1.292kWh*$0.756=$0.9770
  Station 26: t11:1.348kWh*$0.401=$0.5405 + t12:6.600kWh*$0.401=$2.6469 + t13:6.600kWh*$0.401=$2.6469 + t14:8.266kWh*$0.401=$3.3151 + t15:13.200kWh*$0.401=$5.2938 + t16:13.200kWh*$0.401=$5.2938 + t17:2.389kWh*$0.401=$0.9582
  Station 37: t12:1.382kWh*$0.500=$0.6910 + t13:3.078kWh*$0.500=$1.5389

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:1.292kWh*$0.019=$0.0244 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s26:6.600kWh*$0.017=$0.1146 + s37:1.382kWh*$0.017=$0.0240
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.078kWh*$0.017=$0.0523
  t14: s26:8.266kWh*$0.018=$0.1463
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:13.200kWh*$0.013=$0.1738
  t17: s26:2.389kWh*$0.014=$0.0337

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.5838
  Station 15: $0.9527
  Station 26: $19.8910
  Station 37: $2.1535

Total Revenue: $28.6295
Total Cost: $1.0485
Profit: $27.5810
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.583814043740211), '15': np.float64(0.9526737371573325), '26': np.float64(19.890954820676807), '37': np.float64(2.153546544484621)}
Real profit: $20.8436

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $27.2247
 Real profit: $20.8436
 Improvement over base: $7.1159 (51.8%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 15, 26]
Competitor stations: [14, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.22
Charging prices:
  Station 11 (AGGREGATOR): $0.456/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.756/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.401/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.22
Solution prices: 11:0.456, 14:0.600, 15:0.756, 26:0.401, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.4558870306880227, 14: 0.6, 15: 0.755999490969625, 26: 0.401045352071334, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.585638333078998

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.170676554156131

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.661538001036213

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.59
EV 2: Objective = 11.17
EV 3: Objective = 7.66

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.4558870306880227), '14': np.float64(0.6), '15': np.float64(0.755999490969625), '26': np.float64(0.401045352071334), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.787kWh*$0.600=$1.0721 + t11:4.558kWh*$0.600=$2.7351 + t12:3.321kWh*$0.600=$1.9924
  Station 15: t11:3.561kWh*$0.756=$2.6922 + t12:0.508kWh*$0.756=$0.3841
  Station 26: t12:5.006kWh*$0.401=$2.0075 + t13:6.600kWh*$0.401=$2.6469 + t14:14.722kWh*$0.401=$5.9040 + t15:13.200kWh*$0.401=$5.2938 + t16:11.753kWh*$0.401=$4.7136 + t17:0.399kWh*$0.401=$0.1601

Cost breakdown by time period:
  t10: s14:1.787kWh*$0.040=$0.0720
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088 + s26:5.006kWh*$0.017=$0.0869
  t13: s26:6.600kWh*$0.017=$0.1122
  t14: s26:14.722kWh*$0.018=$0.2605
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.5839
  Station 15: $3.0004
  Station 26: $19.9078
  Station 37: $0.0000

Total Revenue: $29.6019
Total Cost: $1.1099
Profit: $28.4920
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.583871323704836), '15': np.float64(3.0003828866537123), '26': np.float64(19.90778983455501), '37': np.float64(0.0)}
Real profit: $22.9082

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $27.2247
 Real profit: $22.9082
 Improvement over base: $9.1804 (66.9%)
✓ Completed combination 19/25

PROGRESS: Combination 20/25 - [11, 15, 37]
Remaining: 5 combinations


============================================================
EXPERIMENT: Controlled stations [11, 15, 37]
============================================================

Creating synthetic aggregator data for stations [11, 15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 15, 37]
Competitor stations: [14, 26]
Base case profit: $23.6763

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: 0.8, 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.047760084852657

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.460910585759958

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 9.878257063518943

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.05
EV 2: Objective = 14.46
EV 3: Objective = 9.88

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.910kWh*$0.600=$1.1459
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:0.508kWh*$0.800=$0.4065
  Station 26: t11:1.348kWh*$0.600=$0.8086 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:8.075kWh*$0.600=$4.8452 + t15:6.600kWh*$0.600=$3.9600 + t16:10.192kWh*$0.600=$6.1150 + t17:0.399kWh*$0.600=$0.2396

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:0.508kWh*$0.017=$0.0088 + s26:6.600kWh*$0.017=$0.1146
  t13: s14:6.600kWh*$0.017=$0.1122 + s26:6.600kWh*$0.017=$0.1122
  t14: s14:1.910kWh*$0.018=$0.0338 + s26:8.075kWh*$0.018=$0.1429
  t15: s26:6.600kWh*$0.015=$0.0992
  t16: s26:10.192kWh*$0.013=$0.1342
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $11.4544
  Station 15: $3.1794
  Station 26: $23.2543
  Station 37: $0.0000

Total Revenue: $38.9447
Total Cost: $1.0566
Profit: $37.8881
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(11.454376432735502), '15': np.float64(3.179432595164596), '26': np.float64(23.254336756310128), '37': np.float64(0.0)}
Max prices profit: $3.1794


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 485 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.49
Charging prices:
  Station 11 (AGGREGATOR): $0.447/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.672/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.452/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.49
Solution prices: 11:0.447, 14:0.600, 15:0.672, 26:0.600, 37:0.452

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.44684539161098463, 14: 0.6, 15: 0.6722379799649458, 26: 0.6, 37: 0.4515842612189427}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.184265573847469

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.792295839090482

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.965879818610511

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.18
EV 2: Objective = 11.79
EV 3: Objective = 7.97

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.44684539161098463), '14': np.float64(0.6), '15': np.float64(0.6722379799649458), '26': np.float64(0.6), '37': np.float64(0.4515842612189427)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:2.992kWh*$0.600=$1.7950 + t11:4.558kWh*$0.600=$2.7351 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:3.561kWh*$0.672=$2.3940 + t12:2.546kWh*$0.672=$1.7118
  Station 37: t12:3.313kWh*$0.452=$1.4961 + t13:5.761kWh*$0.452=$2.6018 + t14:10.800kWh*$0.452=$4.8771 + t15:10.800kWh*$0.452=$4.8771 + t16:7.487kWh*$0.452=$3.3810 + t17:5.039kWh*$0.452=$2.2753

Cost breakdown by time period:
  t10: s14:2.992kWh*$0.040=$0.1206
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442 + s37:3.313kWh*$0.017=$0.0575
  t13: s37:5.761kWh*$0.017=$0.0979
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:7.487kWh*$0.013=$0.0986
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.2811
  Station 15: $3.9944
  Station 26: $0.0000
  Station 37: $18.8300

Total Revenue: $31.1900
Total Cost: $1.0845
Profit: $30.1055
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.281083439863423), '15': np.float64(3.994417736430495), '26': np.float64(0.0), '37': np.float64(18.83003279318207)}
Real profit: $22.8245

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $25.4899
 Real profit: $22.8245
 Improvement over base: $-0.8518 (-3.6%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 15, 37]
Competitor stations: [14, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 483 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $25.49
Charging prices:
  Station 11 (AGGREGATOR): $0.447/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.672/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.452/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $25.49
Solution prices: 11:0.447, 14:0.600, 15:0.672, 26:0.600, 37:0.452

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.44684539161098374, 14: 0.6, 15: 0.6722379799649438, 26: 0.6, 37: 0.4515842612189429}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.184265573847707

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.275985404243382

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.692953400036014

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.18
EV 2: Objective = 12.28
EV 3: Objective = 7.69

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.44684539161098374), '14': np.float64(0.6), '15': np.float64(0.6722379799649438), '26': np.float64(0.6), '37': np.float64(0.4515842612189429)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t9:3.683kWh*$0.447=$1.6456 + t11:4.873kWh*$0.447=$2.1775 + t12:6.600kWh*$0.447=$2.9492 + t13:6.600kWh*$0.447=$2.9492 + t14:1.914kWh*$0.447=$0.8551
  Station 15: t11:3.561kWh*$0.672=$2.3940 + t12:2.546kWh*$0.672=$1.7118
  Station 37: t12:2.492kWh*$0.452=$1.1253 + t13:3.767kWh*$0.452=$1.7010 + t14:7.200kWh*$0.452=$3.2514 + t15:9.902kWh*$0.452=$4.4718 + t16:8.009kWh*$0.452=$3.6168 + t17:5.671kWh*$0.452=$2.5608

Cost breakdown by time period:
  t9: s11:3.683kWh*$0.075=$0.2777
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:2.546kWh*$0.017=$0.0442 + s37:2.492kWh*$0.017=$0.0433
  t13: s11:6.600kWh*$0.017=$0.1122 + s37:3.767kWh*$0.017=$0.0640
  t14: s11:1.914kWh*$0.018=$0.0339 + s37:7.200kWh*$0.018=$0.1274
  t15: s37:9.902kWh*$0.015=$0.1488
  t16: s37:8.009kWh*$0.013=$0.1054
  t17: s37:5.671kWh*$0.014=$0.0800

Profit breakdown by station:
  Station 11: $9.9464
  Station 14: $0.0000
  Station 15: $3.9944
  Station 26: $0.0000
  Station 37: $16.1583

Total Revenue: $31.4096
Total Cost: $1.3105
Profit: $30.0991
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.946407957727207), '14': np.float64(0.0), '15': np.float64(3.9944177364307407), '26': np.float64(0.0), '37': np.float64(16.158284098375432)}
Real profit: $30.0991

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $25.4899
 Real profit: $30.0991
 Improvement over base: $6.4229 (27.1%)
✓ Completed combination 20/25

PROGRESS: Combination 21/25 - [11, 26, 37]
Remaining: 4 combinations


============================================================
EXPERIMENT: Controlled stations [11, 26, 37]
============================================================

Creating synthetic aggregator data for stations [11, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [11, 26, 37]
Competitor stations: [14, 15]
Base case profit: $9.9485

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: 0.8, 14: np.float64(0.6), 15: np.float64(0.5), 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346253

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.682362377331653

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.695223455733347

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 14.68
EV 3: Objective = 7.70

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.8), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.600=$0.9900 + t11:4.558kWh*$0.600=$2.7351 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.910kWh*$0.600=$1.1459
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:3.600kWh*$0.800=$2.8800 + t16:3.319kWh*$0.800=$2.6552 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $12.3779
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $8.2310

Total Revenue: $35.3961
Total Cost: $1.0595
Profit: $34.3366
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(12.377858662734605), '15': np.float64(13.72774866959419), '26': np.float64(0.0), '37': np.float64(8.230978330213015)}
Max prices profit: $8.2310


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 635 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.46
Charging prices:
  Station 11 (AGGREGATOR): $0.385/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.373/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.346/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.46
Solution prices: 11:0.385, 14:0.600, 15:0.500, 26:0.373, 37:0.346

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.38512846400261436, 14: 0.6, 15: 0.5, 26: 0.37281318558249826, 37: 0.3457491768086618}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.7952529683362535

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.728205102474686

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.083686965962905

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.80
EV 2: Objective = 11.73
EV 3: Objective = 7.08

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.38512846400261436), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.37281318558249826), '37': np.float64(0.3457491768086618)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t17:0.223kWh*$0.385=$0.0858 + t18:6.600kWh*$0.385=$2.5418 + t19:6.600kWh*$0.385=$2.5418 + t20:5.371kWh*$0.385=$2.0686
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:0.771kWh*$0.600=$0.4628
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.721kWh*$0.500=$1.3607
  Station 37: t11:0.375kWh*$0.346=$0.1296 + t12:6.021kWh*$0.346=$2.0816 + t13:7.200kWh*$0.346=$2.4894 + t14:9.770kWh*$0.346=$3.3778 + t15:10.425kWh*$0.346=$3.6045 + t16:4.779kWh*$0.346=$1.6525 + t17:3.600kWh*$0.346=$1.2447 + t18:1.030kWh*$0.346=$0.3563

Cost breakdown by time period:
  t17: s11:0.223kWh*$0.014=$0.0031 + s37:3.600kWh*$0.014=$0.0508
  t18: s11:6.600kWh*$0.012=$0.0769 + s37:1.030kWh*$0.012=$0.0120
  t19: s11:6.600kWh*$0.015=$0.0971
  t20: s11:5.371kWh*$0.020=$0.1049
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:0.771kWh*$0.019=$0.0145 + s15:3.561kWh*$0.019=$0.0672 + s37:0.375kWh*$0.019=$0.0071
  t12: s15:2.721kWh*$0.017=$0.0473 + s37:6.021kWh*$0.017=$0.1046
  t13: s37:7.200kWh*$0.017=$0.1224
  t14: s37:9.770kWh*$0.018=$0.1729
  t15: s37:10.425kWh*$0.015=$0.1566
  t16: s37:4.779kWh*$0.013=$0.0629

Profit breakdown by station:
  Station 11: $6.9560
  Station 14: $2.2553
  Station 15: $3.0269
  Station 26: $0.0000
  Station 37: $14.2472

Total Revenue: $27.7158
Total Cost: $1.2304
Profit: $26.4853
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.95596390252363), '14': np.float64(2.255342470201394), '15': np.float64(3.026851072789496), '26': np.float64(0.0), '37': np.float64(14.247191455773306)}
Real profit: $21.2032

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $23.4569
 Real profit: $21.2032
 Improvement over base: $11.2547 (113.1%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [11, 26, 37]
Competitor stations: [14, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 11: Best algorithm mlp (R² = 0.4430)
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_11        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_11        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_11_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_11
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 633 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $23.46
Charging prices:
  Station 11 (AGGREGATOR): $0.385/kWh (range: $0.2-$0.8)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.373/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.346/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $23.46
Solution prices: 11:0.385, 14:0.600, 15:0.500, 26:0.373, 37:0.346

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.38512846400261436, 14: 0.6, 15: 0.5, 26: 0.37281318558249826, 37: 0.3457491768086618}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 7.7952529683362535

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.728205102474686

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.083686965962905

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 7.80
EV 2: Objective = 11.73
EV 3: Objective = 7.08

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.38512846400261436), '14': np.float64(0.6), '15': np.float64(0.5), '26': np.float64(0.37281318558249826), '37': np.float64(0.3457491768086618)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t17:0.223kWh*$0.385=$0.0858 + t18:6.600kWh*$0.385=$2.5418 + t19:6.600kWh*$0.385=$2.5418 + t20:5.371kWh*$0.385=$2.0686
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:0.771kWh*$0.600=$0.4628
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:2.721kWh*$0.500=$1.3607
  Station 37: t11:0.375kWh*$0.346=$0.1296 + t12:6.021kWh*$0.346=$2.0816 + t13:7.200kWh*$0.346=$2.4894 + t14:9.770kWh*$0.346=$3.3778 + t15:10.425kWh*$0.346=$3.6045 + t16:4.779kWh*$0.346=$1.6525 + t17:3.600kWh*$0.346=$1.2447 + t18:1.030kWh*$0.346=$0.3563

Cost breakdown by time period:
  t17: s11:0.223kWh*$0.014=$0.0031 + s37:3.600kWh*$0.014=$0.0508
  t18: s11:6.600kWh*$0.012=$0.0769 + s37:1.030kWh*$0.012=$0.0120
  t19: s11:6.600kWh*$0.015=$0.0971
  t20: s11:5.371kWh*$0.020=$0.1049
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:0.771kWh*$0.019=$0.0145 + s15:3.561kWh*$0.019=$0.0672 + s37:0.375kWh*$0.019=$0.0071
  t12: s15:2.721kWh*$0.017=$0.0473 + s37:6.021kWh*$0.017=$0.1046
  t13: s37:7.200kWh*$0.017=$0.1224
  t14: s37:9.770kWh*$0.018=$0.1729
  t15: s37:10.425kWh*$0.015=$0.1566
  t16: s37:4.779kWh*$0.013=$0.0629

Profit breakdown by station:
  Station 11: $6.9560
  Station 14: $2.2553
  Station 15: $3.0269
  Station 26: $0.0000
  Station 37: $14.2472

Total Revenue: $27.7158
Total Cost: $1.2304
Profit: $26.4853
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(6.95596390252363), '14': np.float64(2.255342470201394), '15': np.float64(3.026851072789496), '26': np.float64(0.0), '37': np.float64(14.247191455773306)}
Real profit: $21.2032

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $23.4569
 Real profit: $21.2032
 Improvement over base: $11.2547 (113.1%)
✓ Completed combination 21/25

PROGRESS: Combination 22/25 - [14, 15, 26]
Remaining: 3 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15, 26]
============================================================

Creating synthetic aggregator data for stations [14, 15, 26]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15, 26]
Competitor stations: [11, 37]
Base case profit: $20.2579

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: 0.8, 26: 0.8, 37: np.float64(0.5)}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346518

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 14.311460015999991

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.999469448639422

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 14.31
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.600=$3.1337 + t12:6.600kWh*$0.600=$3.9600 + t13:3.801kWh*$0.600=$2.2808
  Station 14: t11:4.558kWh*$0.800=$3.6467 + t12:5.076kWh*$0.800=$4.0610
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:2.546kWh*$0.800=$2.0372
  Station 37: t13:2.161kWh*$0.500=$1.0807 + t14:7.200kWh*$0.500=$3.6000 + t15:7.200kWh*$0.500=$3.6000 + t16:7.200kWh*$0.500=$3.6000 + t17:5.039kWh*$0.500=$2.5193

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:5.076kWh*$0.017=$0.0882 + s15:2.546kWh*$0.017=$0.0442
  t13: s11:3.801kWh*$0.017=$0.0646 + s37:2.161kWh*$0.017=$0.0367
  t14: s37:7.200kWh*$0.018=$0.1274
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:7.200kWh*$0.013=$0.0948
  t17: s37:5.039kWh*$0.014=$0.0710

Profit breakdown by station:
  Station 11: $9.0967
  Station 14: $7.5337
  Station 15: $4.7747
  Station 26: $0.0000
  Station 37: $13.9619

Total Revenue: $36.3683
Total Cost: $1.0013
Profit: $35.3670
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.096726430276755), '14': np.float64(7.533652017496274), '15': np.float64(4.774743877669777), '26': np.float64(0.0), '37': np.float64(13.961877033872549)}
Max prices profit: $12.3084


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 605 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.92
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.652/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.92
Solution prices: 11:0.600, 14:0.797, 15:0.652, 26:0.415, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7969416445569613, 15: 0.6517200414832265, 26: 0.41458460895217153, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.402178226259688

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.741033318985437

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.223267815456227

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.40
EV 2: Objective = 12.74
EV 3: Objective = 8.22

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7969416445569613), '15': np.float64(0.6517200414832265), '26': np.float64(0.41458460895217153), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.787kWh*$0.797=$1.4240 + t11:4.005kWh*$0.797=$3.1918
  Station 15: t11:3.561kWh*$0.652=$2.3209 + t12:0.508kWh*$0.652=$0.3311
  Station 26: t12:5.006kWh*$0.415=$2.0753 + t13:6.600kWh*$0.415=$2.7363 + t14:11.094kWh*$0.415=$4.5995 + t15:8.697kWh*$0.415=$3.6055 + t16:11.753kWh*$0.415=$4.8728 + t17:6.600kWh*$0.415=$2.7363 + t18:1.930kWh*$0.415=$0.8002
  Station 37: t12:1.465kWh*$0.500=$0.7327 + t13:3.600kWh*$0.500=$1.8000 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t10: s14:1.787kWh*$0.040=$0.0720
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:3.561kWh*$0.019=$0.0672
  t12: s15:0.508kWh*$0.017=$0.0088 + s26:5.006kWh*$0.017=$0.0869 + s37:1.465kWh*$0.017=$0.0254
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:11.094kWh*$0.018=$0.1963 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:6.600kWh*$0.014=$0.0931
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $4.4683
  Station 15: $2.5760
  Station 26: $20.6294
  Station 37: $2.8372

Total Revenue: $31.6317
Total Cost: $1.1209
Profit: $30.5109
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(4.468257226837908), '15': np.float64(2.5760422268343457), '26': np.float64(20.62940120667102), '37': np.float64(2.837179967204828)}
Real profit: $27.6737

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $32.9205
 Real profit: $27.6737
 Improvement over base: $7.4158 (36.6%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 15, 26]
Competitor stations: [11, 37] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_26        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_26
Model created with 603 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.92
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.652/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.415/kWh (range: $0.2-$0.8)
  Station 37 (COMPETITOR): $0.500/kWh (FIXED)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.92
Solution prices: 11:0.600, 14:0.797, 15:0.652, 26:0.415, 37:0.500

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.7974562648758801, 15: 0.6517675499878688, 26: 0.4146088109318735, 37: 0.5}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.80594756668943

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 12.743412221354786

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 6.826020691975669

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.81
EV 2: Objective = 12.74
EV 3: Objective = 6.83

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.7974562648758801), '15': np.float64(0.6517675499878688), '26': np.float64(0.4146088109318735), '37': np.float64(0.5)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.005kWh*$0.797=$3.1939
  Station 15: t11:1.292kWh*$0.652=$0.8423
  Station 26: t11:1.348kWh*$0.415=$0.5588 + t12:6.600kWh*$0.415=$2.7364 + t13:6.600kWh*$0.415=$2.7364 + t14:4.639kWh*$0.415=$1.9233 + t15:8.697kWh*$0.415=$3.6057 + t16:13.200kWh*$0.415=$5.4728 + t17:8.590kWh*$0.415=$3.5615 + t18:1.930kWh*$0.415=$0.8002
  Station 37: t12:2.847kWh*$0.500=$1.4237 + t13:6.678kWh*$0.500=$3.3389 + t14:0.811kWh*$0.500=$0.4055

Cost breakdown by time period:
  t11: s14:4.005kWh*$0.019=$0.0755 + s15:1.292kWh*$0.019=$0.0244 + s26:1.348kWh*$0.019=$0.0254
  t12: s26:6.600kWh*$0.017=$0.1146 + s37:2.847kWh*$0.017=$0.0494
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:6.678kWh*$0.017=$0.1135
  t14: s26:4.639kWh*$0.018=$0.0821 + s37:0.811kWh*$0.018=$0.0143
  t15: s26:8.697kWh*$0.015=$0.1307
  t16: s26:13.200kWh*$0.013=$0.1738
  t17: s26:8.590kWh*$0.014=$0.1211
  t18: s26:1.930kWh*$0.012=$0.0225

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $3.1184
  Station 15: $0.8180
  Station 26: $20.6128
  Station 37: $4.9907

Total Revenue: $30.5994
Total Cost: $1.0595
Profit: $29.5398
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(3.118362209056986), '15': np.float64(0.8179655704357787), '26': np.float64(20.6127736038386), '37': np.float64(4.990726511689482)}
Real profit: $24.5491

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $32.9232
 Real profit: $24.5491
 Improvement over base: $4.2912 (21.2%)
✓ Completed combination 22/25

PROGRESS: Combination 23/25 - [14, 15, 37]
Remaining: 2 combinations


============================================================
EXPERIMENT: Controlled stations [14, 15, 37]
============================================================

Creating synthetic aggregator data for stations [14, 15, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 15, 37]
Competitor stations: [11, 26]
Base case profit: $30.2064

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: 0.8, 26: np.float64(0.6), 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.047760084851568

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.973692459677963

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.999469448639497

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.05
EV 2: Objective = 15.97
EV 3: Objective = 9.00

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:5.223kWh*$0.600=$3.1337 + t12:6.600kWh*$0.600=$3.9600 + t13:3.801kWh*$0.600=$2.2808
  Station 14: t11:4.558kWh*$0.800=$3.6467 + t12:3.321kWh*$0.800=$2.6565
  Station 15: t11:3.561kWh*$0.800=$2.8489 + t12:0.508kWh*$0.800=$0.4065
  Station 26: t14:9.101kWh*$0.600=$5.4604 + t15:13.200kWh*$0.600=$7.9200 + t16:11.753kWh*$0.600=$7.0520 + t17:0.399kWh*$0.600=$0.2396

Cost breakdown by time period:
  t11: s11:5.223kWh*$0.019=$0.0985 + s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672
  t12: s11:6.600kWh*$0.017=$0.1146 + s14:3.321kWh*$0.017=$0.0577 + s15:0.508kWh*$0.017=$0.0088
  t13: s11:3.801kWh*$0.017=$0.0646
  t14: s26:9.101kWh*$0.018=$0.1610
  t15: s26:13.200kWh*$0.015=$0.1983
  t16: s26:11.753kWh*$0.013=$0.1547
  t17: s26:0.399kWh*$0.014=$0.0056

Profit breakdown by station:
  Station 11: $9.0967
  Station 14: $6.1596
  Station 15: $3.1794
  Station 26: $20.1523
  Station 37: $0.0000

Total Revenue: $39.6051
Total Cost: $1.0170
Profit: $38.5881
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(9.096726430276842), '14': np.float64(6.159628495738219), '15': np.float64(3.1794325951634947), '26': np.float64(20.15233386527041), '37': np.float64(0.0)}
Max prices profit: $9.3391


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 605 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.65
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.797/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.615/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.65
Solution prices: 11:0.600, 14:0.460, 15:0.797, 26:0.600, 37:0.615

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.46034847190048356, 15: 0.7971091123248153, 26: 0.6, 37: 0.6150149805404378}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.113607287014805

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.270106681388016

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.747747138043789

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.11
EV 2: Objective = 11.27
EV 3: Objective = 7.75

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.46034847190048356), '15': np.float64(0.7971091123248153), '26': np.float64(0.6), '37': np.float64(0.6150149805404378)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t13:3.468kWh*$0.600=$2.0808
  Station 14: t10:5.898kWh*$0.460=$2.7153 + t11:15.277kWh*$0.460=$7.0327 + t12:13.713kWh*$0.460=$6.3128 + t13:13.200kWh*$0.460=$6.0766 + t14:4.082kWh*$0.460=$1.8790
  Station 26: t16:4.340kWh*$0.600=$2.6043
  Station 37: t14:0.122kWh*$0.615=$0.0749 + t15:3.600kWh*$0.615=$2.2141 + t16:0.645kWh*$0.615=$0.3965

Cost breakdown by time period:
  t13: s11:3.468kWh*$0.017=$0.0589 + s14:13.200kWh*$0.017=$0.2244
  t10: s14:5.898kWh*$0.040=$0.2378
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:13.713kWh*$0.017=$0.2381
  t14: s14:4.082kWh*$0.018=$0.0722 + s37:0.122kWh*$0.018=$0.0022
  t16: s26:4.340kWh*$0.013=$0.0571 + s37:0.645kWh*$0.013=$0.0085
  t15: s37:3.600kWh*$0.015=$0.0541

Profit breakdown by station:
  Station 11: $2.0219
  Station 14: $22.9558
  Station 15: $0.0000
  Station 26: $2.5471
  Station 37: $2.6207

Total Revenue: $31.3869
Total Cost: $1.2414
Profit: $30.1455
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(2.021890090745034), '14': np.float64(22.95577988536972), '15': np.float64(0.0), '26': np.float64(2.5471232466598828), '37': np.float64(2.620734233176376)}
Real profit: $25.5765

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $32.6540
 Real profit: $25.5765
 Improvement over base: $-4.6299 (-15.3%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 15, 37]
Competitor stations: [11, 26] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 15: Best algorithm mlp (R² = 0.6750)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_15        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_15
Embedding objective function for profit_37
Model created with 603 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $32.66
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.460/kWh (range: $0.2-$0.8)
  Station 15 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
  Station 26 (COMPETITOR): $0.600/kWh (FIXED)
  Station 37 (AGGREGATOR): $0.615/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $32.66
Solution prices: 11:0.600, 14:0.460, 15:0.800, 26:0.600, 37:0.615

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.46001379223220434, 15: 0.8, 26: 0.6, 37: 0.6150460866523222}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 10.704600245631127

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.263917822928978

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.740567591996395

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 10.70
EV 2: Objective = 11.26
EV 3: Objective = 8.74

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.46001379223220434), '15': np.float64(0.8), '26': np.float64(0.6), '37': np.float64(0.6150460866523222)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:4.659kWh*$0.460=$2.1432 + t11:15.277kWh*$0.460=$7.0276 + t12:17.174kWh*$0.460=$7.9003 + t13:13.200kWh*$0.460=$6.0722 + t14:4.082kWh*$0.460=$1.8777
  Station 15: t13:0.917kWh*$0.800=$0.7338 + t14:1.704kWh*$0.800=$1.3636
  Station 37: t14:0.122kWh*$0.615=$0.0749 + t15:6.279kWh*$0.615=$3.8618 + t16:1.518kWh*$0.615=$0.9336

Cost breakdown by time period:
  t10: s14:4.659kWh*$0.040=$0.1878
  t11: s14:15.277kWh*$0.019=$0.2881
  t12: s14:17.174kWh*$0.017=$0.2983
  t13: s14:13.200kWh*$0.017=$0.2244 + s15:0.917kWh*$0.017=$0.0156
  t14: s14:4.082kWh*$0.018=$0.0722 + s15:1.704kWh*$0.018=$0.0302 + s37:0.122kWh*$0.018=$0.0022
  t15: s37:6.279kWh*$0.015=$0.0943
  t16: s37:1.518kWh*$0.013=$0.0200

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $23.9502
  Station 15: $2.0516
  Station 26: $0.0000
  Station 37: $4.7539

Total Revenue: $31.9886
Total Cost: $1.2330
Profit: $30.7557
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(23.950162555079224), '15': np.float64(2.0516465672906503), '26': np.float64(0.0), '37': np.float64(4.753860710346706)}
Real profit: $30.7557

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $32.6650
 Real profit: $30.7557
 Improvement over base: $0.5492 (1.8%)
✓ Completed combination 23/25

PROGRESS: Combination 24/25 - [14, 26, 37]
Remaining: 1 combinations


============================================================
EXPERIMENT: Controlled stations [14, 26, 37]
============================================================

Creating synthetic aggregator data for stations [14, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [14, 26, 37]
Competitor stations: [11, 15]
Base case profit: $16.4787

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: 0.8, 15: np.float64(0.5), 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.602677842346445

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 18.458660015999765

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.012023455733104

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.60
EV 2: Objective = 18.46
EV 3: Objective = 8.01

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.8), '15': np.float64(0.5), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:1.650kWh*$0.800=$1.3200 + t11:4.558kWh*$0.800=$3.6467 + t12:6.600kWh*$0.800=$5.2800 + t13:6.600kWh*$0.800=$5.2800 + t14:1.910kWh*$0.800=$1.5278
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 37: t14:0.122kWh*$0.800=$0.0975 + t15:3.600kWh*$0.800=$2.8800 + t16:3.319kWh*$0.800=$2.6552 + t17:3.433kWh*$0.800=$2.7466

Cost breakdown by time period:
  t10: s14:1.650kWh*$0.040=$0.0665
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:5.310kWh*$0.019=$0.1001
  t12: s14:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s14:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s14:1.910kWh*$0.018=$0.0338 + s15:7.200kWh*$0.018=$0.1274 + s37:0.122kWh*$0.018=$0.0022
  t15: s15:1.541kWh*$0.015=$0.0232 + s37:3.600kWh*$0.015=$0.0541
  t16: s37:3.319kWh*$0.013=$0.0437
  t17: s37:3.433kWh*$0.014=$0.0484

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $16.6415
  Station 15: $13.7277
  Station 26: $0.0000
  Station 37: $8.2310

Total Revenue: $39.6598
Total Cost: $1.0595
Profit: $38.6002
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(16.64150203634651), '15': np.float64(13.72774866959393), '26': np.float64(0.0), '37': np.float64(8.230978330213857)}
Max prices profit: $24.8725


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 755 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $34.04
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.657/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.641/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $34.04
Solution prices: 11:0.600, 14:0.657, 15:0.500, 26:0.641, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6573424548736027, 15: 0.5, 26: 0.6414188628315491, 37: 0.7997166379585512}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.158258408532902

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 17.184051259456965

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.786053904252486

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.16
EV 2: Objective = 17.18
EV 3: Objective = 7.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6573424548736027), '15': np.float64(0.5), '26': np.float64(0.6414188628315491), '37': np.float64(0.7997166379585512)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:4.873kWh*$0.600=$2.9239 + t12:6.600kWh*$0.600=$3.9600 + t13:6.600kWh*$0.600=$3.9600 + t14:1.914kWh*$0.600=$1.1482
  Station 14: t10:1.650kWh*$0.657=$1.0846
  Station 15: t11:5.310kWh*$0.500=$2.6552 + t12:7.200kWh*$0.500=$3.6000 + t13:7.200kWh*$0.500=$3.6000 + t14:7.200kWh*$0.500=$3.6000 + t15:1.541kWh*$0.500=$0.7707
  Station 26: t14:2.225kWh*$0.641=$1.4273 + t15:3.596kWh*$0.641=$2.3066 + t17:6.334kWh*$0.641=$4.0625 + t18:0.562kWh*$0.641=$0.3607
  Station 37: t16:2.719kWh*$0.800=$2.1740

Cost breakdown by time period:
  t11: s11:4.873kWh*$0.019=$0.0919 + s15:5.310kWh*$0.019=$0.1001
  t12: s11:6.600kWh*$0.017=$0.1146 + s15:7.200kWh*$0.017=$0.1250
  t13: s11:6.600kWh*$0.017=$0.1122 + s15:7.200kWh*$0.017=$0.1224
  t14: s11:1.914kWh*$0.018=$0.0339 + s15:7.200kWh*$0.018=$0.1274 + s26:2.225kWh*$0.018=$0.0394
  t10: s14:1.650kWh*$0.040=$0.0665
  t15: s15:1.541kWh*$0.015=$0.0232 + s26:3.596kWh*$0.015=$0.0540
  t17: s26:6.334kWh*$0.014=$0.0893
  t18: s26:0.562kWh*$0.012=$0.0066
  t16: s37:2.719kWh*$0.013=$0.0358

Profit breakdown by station:
  Station 11: $11.6395
  Station 14: $1.0181
  Station 15: $13.7277
  Station 26: $7.9679
  Station 37: $2.1382

Total Revenue: $37.6337
Total Cost: $1.1422
Profit: $36.4915
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(11.639522455950633), '14': np.float64(1.018097280541618), '15': np.float64(13.727748669593609), '26': np.float64(7.9678637941276875), '37': np.float64(2.1382491911306105)}
Real profit: $11.1242

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $34.0394
 Real profit: $11.1242
 Improvement over base: $-5.3545 (-32.5%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [14, 26, 37]
Competitor stations: [11, 15] with fixed prices: [np.float64(0.6), np.float64(0.5)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 14: Best algorithm mlp (R² = 0.6709)
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_14        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_14        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_14_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_14
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 753 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $34.06
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (AGGREGATOR): $0.658/kWh (range: $0.2-$0.8)
  Station 15 (COMPETITOR): $0.500/kWh (FIXED)
  Station 26 (AGGREGATOR): $0.642/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.800/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $34.06
Solution prices: 11:0.600, 14:0.658, 15:0.500, 26:0.642, 37:0.800

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6575280451358231, 15: 0.5, 26: 0.6416432826676809, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 11.159744090777071

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 15.584727801351306

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 10.56386214878641

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 11.16
EV 2: Objective = 15.58
EV 3: Objective = 10.56

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6575280451358231), '15': np.float64(0.5), '26': np.float64(0.6416432826676809), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t11:4.558kWh*$0.658=$2.9973 + t12:3.321kWh*$0.658=$2.1834
  Station 15: t11:3.561kWh*$0.500=$1.7806 + t12:3.600kWh*$0.500=$1.8000 + t13:3.600kWh*$0.500=$1.8000 + t14:3.600kWh*$0.500=$1.8000 + t15:0.039kWh*$0.500=$0.0194
  Station 26: t11:1.348kWh*$0.642=$0.8647 + t12:6.600kWh*$0.642=$4.2348 + t13:6.600kWh*$0.642=$4.2348 + t14:6.229kWh*$0.642=$3.9971 + t15:6.600kWh*$0.642=$4.2348 + t16:6.600kWh*$0.642=$4.2348 + t17:6.733kWh*$0.642=$4.3201 + t18:0.562kWh*$0.642=$0.3608

Cost breakdown by time period:
  t11: s14:4.558kWh*$0.019=$0.0860 + s15:3.561kWh*$0.019=$0.0672 + s26:1.348kWh*$0.019=$0.0254
  t12: s14:3.321kWh*$0.017=$0.0577 + s15:3.600kWh*$0.017=$0.0625 + s26:6.600kWh*$0.017=$0.1146
  t13: s15:3.600kWh*$0.017=$0.0612 + s26:6.600kWh*$0.017=$0.1122
  t14: s15:3.600kWh*$0.018=$0.0637 + s26:6.229kWh*$0.018=$0.1102
  t15: s15:0.039kWh*$0.015=$0.0006 + s26:6.600kWh*$0.015=$0.0992
  t16: s26:6.600kWh*$0.013=$0.0869
  t17: s26:6.733kWh*$0.014=$0.0949
  t18: s26:0.562kWh*$0.012=$0.0066

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $5.0371
  Station 15: $6.9449
  Station 26: $25.8322
  Station 37: $0.0000

Total Revenue: $38.8628
Total Cost: $1.0487
Profit: $37.8141
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(5.037081668341874), '15': np.float64(6.944855604342065), '26': np.float64(25.832173594562985), '37': np.float64(0.0)}
Real profit: $30.8693

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $34.0586
 Real profit: $30.8693
 Improvement over base: $14.3906 (87.3%)
✓ Completed combination 24/25

PROGRESS: Combination 25/25 - [15, 26, 37]
Remaining: 0 combinations


============================================================
EXPERIMENT: Controlled stations [15, 26, 37]
============================================================

Creating synthetic aggregator data for stations [15, 26, 37]...
Price bounds: $0.200 - $0.800
Controlled stations: [15, 26, 37]
Competitor stations: [11, 14]
Base case profit: $23.6763

========================================
Testing max prices scenario...
========================================

Solving routing model for prices {11: np.float64(0.6), 14: np.float64(0.6), 15: 0.8, 26: 0.8, 37: 0.8}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 13.954567294932136

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 19.275460055519048

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 11.314039030720036

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 13.95
EV 2: Objective = 19.28
EV 3: Objective = 11.31

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.8), '26': np.float64(0.8), '37': np.float64(0.8)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t16:4.027kWh*$0.600=$2.4164 + t17:6.600kWh*$0.600=$3.9600 + t18:3.364kWh*$0.600=$2.0183
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:16.656kWh*$0.600=$9.9933 + t12:18.044kWh*$0.600=$10.8266 + t13:13.200kWh*$0.600=$7.9200 + t14:2.508kWh*$0.600=$1.5049
  Station 37: t13:0.199kWh*$0.800=$0.1591 + t14:3.528kWh*$0.800=$2.8225 + t15:2.679kWh*$0.800=$2.1431 + t16:0.873kWh*$0.800=$0.6986

Cost breakdown by time period:
  t16: s11:4.027kWh*$0.013=$0.0530 + s37:0.873kWh*$0.013=$0.0115
  t17: s11:6.600kWh*$0.014=$0.0931
  t18: s11:3.364kWh*$0.012=$0.0392
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:16.656kWh*$0.019=$0.3141
  t12: s14:18.044kWh*$0.017=$0.3134
  t13: s14:13.200kWh*$0.017=$0.2244 + s37:0.199kWh*$0.017=$0.0034
  t14: s14:2.508kWh*$0.018=$0.0444 + s37:3.528kWh*$0.018=$0.0624
  t15: s37:2.679kWh*$0.015=$0.0402

Profit breakdown by station:
  Station 11: $8.2094
  Station 14: $31.1557
  Station 15: $0.0000
  Station 26: $0.0000
  Station 37: $5.7058

Total Revenue: $46.4001
Total Cost: $1.3292
Profit: $45.0709
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(8.209411731466316), '14': np.float64(31.15567057393027), '15': np.float64(0.0), '26': np.float64(0.0), '37': np.float64(5.705788468850073)}
Max prices profit: $5.7058


============================================================
Testing with trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Generating constraints for the trust region using 1001 samples.
... Trust region defined.
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 755 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.88
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.683/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.427/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.397/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.88
Solution prices: 11:0.600, 14:0.600, 15:0.683, 26:0.427, 37:0.397

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.6828330667712267, 26: 0.4267835183971605, 37: 0.39706187583399033}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.32149482291748

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.139309619528898

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 8.145025513406457

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.32
EV 2: Objective = 11.14
EV 3: Objective = 8.15

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.6828330667712267), '26': np.float64(0.4267835183971605), '37': np.float64(0.39706187583399033)}
Total demand records: 120

Revenue breakdown by station:
  Station 11: t11:1.887kWh*$0.600=$1.1323
  Station 14: t11:4.558kWh*$0.600=$2.7351 + t12:5.251kWh*$0.600=$3.1507
  Station 15: t11:1.292kWh*$0.683=$0.8825
  Station 26: t11:0.874kWh*$0.427=$0.3732 + t12:6.600kWh*$0.427=$2.8168 + t13:6.600kWh*$0.427=$2.8168 + t14:3.152kWh*$0.427=$1.3453 + t17:3.613kWh*$0.427=$1.5419 + t18:3.674kWh*$0.427=$1.5678
  Station 37: t12:1.382kWh*$0.397=$0.5487 + t13:3.600kWh*$0.397=$1.4294 + t14:7.177kWh*$0.397=$2.8497 + t15:7.200kWh*$0.397=$2.8588 + t16:5.818kWh*$0.397=$2.3101 + t17:3.600kWh*$0.397=$1.4294 + t18:0.023kWh*$0.397=$0.0092

Cost breakdown by time period:
  t11: s11:1.887kWh*$0.019=$0.0356 + s14:4.558kWh*$0.019=$0.0860 + s15:1.292kWh*$0.019=$0.0244 + s26:0.874kWh*$0.019=$0.0165
  t12: s14:5.251kWh*$0.017=$0.0912 + s26:6.600kWh*$0.017=$0.1146 + s37:1.382kWh*$0.017=$0.0240
  t13: s26:6.600kWh*$0.017=$0.1122 + s37:3.600kWh*$0.017=$0.0612
  t14: s26:3.152kWh*$0.018=$0.0558 + s37:7.177kWh*$0.018=$0.1270
  t17: s26:3.613kWh*$0.014=$0.0509 + s37:3.600kWh*$0.014=$0.0508
  t18: s26:3.674kWh*$0.012=$0.0428 + s37:0.023kWh*$0.012=$0.0003
  t15: s37:7.200kWh*$0.015=$0.1082
  t16: s37:5.818kWh*$0.013=$0.0766

Profit breakdown by station:
  Station 11: $1.0968
  Station 14: $5.7086
  Station 15: $0.8581
  Station 26: $10.0689
  Station 37: $10.9874

Total Revenue: $29.7977
Total Cost: $1.0779
Profit: $28.7198
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(1.0967517815165198), '14': np.float64(5.708600594087912), '15': np.float64(0.8581142885223365), '26': np.float64(10.068939216360208), '37': np.float64(10.987422066451456)}
Real profit: $21.9145

========================================
RESULTS: with trust_region
========================================
 Predicted profit: $27.8792
 Real profit: $21.9145
 Improvement over base: $-1.7618 (-7.4%)


============================================================
Testing without trust region
============================================================


========================================
Solving aggregator model...
========================================
Using provided input data...
Detected competition model (some stations have fixed prices)
Total stations: 5
Aggregator-controlled stations: [15, 26, 37]
Competitor stations: [11, 14] with fixed prices: [np.float64(0.6), np.float64(0.6)]
Loading regression model data...
Feature columns: ['rc_11', 'rc_14', 'rc_15', 'rc_26', 'rc_37']
Profit columns: ['profit_11', 'profit_14', 'profit_15', 'profit_26', 'profit_37']
Station 15: Best algorithm mlp (R² = 0.6750)
Station 26: Best algorithm mlp (R² = 0.8269)
Station 37: Best algorithm mlp (R² = 0.7336)
     outcome model_type  ...        task objective
0  profit_15        mlp  ...  continuous         1
1  profit_26        mlp  ...  continuous         1
2  profit_37        mlp  ...  continuous         1

[3 rows x 5 columns]

Model master:
     outcome model_type                                                              save_path        task  objective    lb    ub SCM_counterfactuals                             features
0  profit_15        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_15_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
1  profit_26        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_26_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]
2  profit_37        mlp  ../regressors\mlp\37map_1001scenarios_competition_profit_37_model.csv  continuous          1  None  None                None  [rc_11, rc_14, rc_15, rc_26, rc_37]

Creating concrete model...
Embedding regression models with OptiCL...
Embedding objective function for profit_15
Embedding objective function for profit_26
Embedding objective function for profit_37
Model created with 753 constraints
Solving with gurobi...
Solver status: ok
Termination: optimal
Predicted aggregator profit: $27.88
Charging prices:
  Station 11 (COMPETITOR): $0.600/kWh (FIXED)
  Station 14 (COMPETITOR): $0.600/kWh (FIXED)
  Station 15 (AGGREGATOR): $0.683/kWh (range: $0.2-$0.8)
  Station 26 (AGGREGATOR): $0.427/kWh (range: $0.2-$0.8)
  Station 37 (AGGREGATOR): $0.397/kWh (range: $0.2-$0.8)
Extracting solution data...
Aggregator solver status: optimal
Predicted profit: $27.88
Solution prices: 11:0.600, 14:0.600, 15:0.683, 26:0.427, 37:0.397

========================================
Testing solution against routing model...
========================================

Solving routing model for prices {11: 0.6, 14: 0.6, 15: 0.6828330667712267, 26: 0.42678351839716056, 37: 0.39706187583399016}...

Extracting electricity costs from map data...
Electricity costs: {0: 0.0271504, 1: 0.0407256, 2: 0.033512, 3: 0.032447000000000004, 4: 0.0344208, 5: 0.037133, 6: 0.039689, 7: 0.0524122, 8: 0.0708438, 9: 0.07540200000000001, 10: 0.040313800000000004, 11: 0.0188576, 12: 0.0173666, 13: 0.016997400000000003, 14: 0.017693200000000003, 15: 0.0150236, 16: 0.0131634, 17: 0.0141006, 18: 0.011658200000000002, 19: 0.014711199999999999, 20: 0.0195392, 21: 0.0622386, 22: 0.06818840000000001, 23: 0.04544}

Processing EV 1
--------------------------------------------------
Filtering data for EV 1...
Creating abstract routing_model for EV 1 with linearized constraints...
Creating concrete routing_model instance for EV 1...

Model Information for EV 1:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 1...
Solving the routing_model for EV 1...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 1! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 1: 9.321494822917927

Extracting solution data for EV 1...
Solution data extracted successfully for EV 1!

Processing EV 2
--------------------------------------------------
Filtering data for EV 2...
Creating abstract routing_model for EV 2 with linearized constraints...
Creating concrete routing_model instance for EV 2...

Model Information for EV 2:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 5
Number of charging stations: 5

Setting up gurobi solver for EV 2...
Solving the routing_model for EV 2...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 2! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 2: 11.038578383528893

Extracting solution data for EV 2...
Solution data extracted successfully for EV 2!

Processing EV 3
--------------------------------------------------
Filtering data for EV 3...
Creating abstract routing_model for EV 3 with linearized constraints...
Creating concrete routing_model instance for EV 3...

Model Information for EV 3:
Number of intersections: 38
Number of paths: 166
Number of delivery points: 4
Number of charging stations: 5

Setting up gurobi solver for EV 3...
Solving the routing_model for EV 3...
WARNING: Loading a SolverResults object with an 'aborted' status, but
containing a solution

Solver returned a solution for EV 3! :)
	Status: aborted
	Termination condition: maxTimeLimit
Objective function value for EV 3: 7.793033717288962

Extracting solution data for EV 3...
Solution data extracted successfully for EV 3!

SUMMARY OF ALL EVs
--------------------------------------------------
EV 1: Objective = 9.32
EV 2: Objective = 11.04
EV 3: Objective = 7.79

Extracting aggregated demand...
--------------------------------------------------
Aggregated demand extracted successfully!

Computing station profits...
--------------------------------------------------

--- Profit Computation ---
Charging prices: {'11': np.float64(0.6), '14': np.float64(0.6), '15': np.float64(0.6828330667712267), '26': np.float64(0.42678351839716056), '37': np.float64(0.39706187583399016)}
Total demand records: 120

Revenue breakdown by station:
  Station 14: t10:3.229kWh*$0.600=$1.9373 + t11:5.330kWh*$0.600=$3.1978 + t12:5.076kWh*$0.600=$3.0458
  Station 15: t11:1.292kWh*$0.683=$0.8825
  Station 26: t17:3.613kWh*$0.427=$1.5419 + t18:3.674kWh*$0.427=$1.5678
  Station 37: t12:3.803kWh*$0.397=$1.5098 + t13:9.195kWh*$0.397=$3.6509 + t14:10.800kWh*$0.397=$4.2883 + t15:10.800kWh*$0.397=$4.2883 + t16:6.997kWh*$0.397=$2.7784 + t17:1.605kWh*$0.397=$0.6374

Cost breakdown by time period:
  t10: s14:3.229kWh*$0.040=$0.1302
  t11: s14:5.330kWh*$0.019=$0.1005 + s15:1.292kWh*$0.019=$0.0244
  t12: s14:5.076kWh*$0.017=$0.0882 + s37:3.803kWh*$0.017=$0.0660
  t17: s26:3.613kWh*$0.014=$0.0509 + s37:1.605kWh*$0.014=$0.0226
  t18: s26:3.674kWh*$0.012=$0.0428
  t13: s37:9.195kWh*$0.017=$0.1563
  t14: s37:10.800kWh*$0.018=$0.1911
  t15: s37:10.800kWh*$0.015=$0.1623
  t16: s37:6.997kWh*$0.013=$0.0921

Profit breakdown by station:
  Station 11: $0.0000
  Station 14: $7.8621
  Station 15: $0.8581
  Station 26: $3.0159
  Station 37: $16.4627

Total Revenue: $29.3262
Total Cost: $1.1274
Profit: $28.1988
--- End Profit Computation ---

Station profits computed successfully!
Station profits: {'11': np.float64(0.0), '14': np.float64(7.862051775197403), '15': np.float64(0.8581142885227907), '26': np.float64(3.0159435602548874), '37': np.float64(16.46266247466804)}
Real profit: $20.3367

========================================
RESULTS: without trust_region
========================================
 Predicted profit: $27.8792
 Real profit: $20.3367
 Improvement over base: $-3.3395 (-14.1%)
✓ Completed combination 25/25

================================================================================
SAVING RESULTS
================================================================================
Total experiments completed: 150
Results saved to: ../results/aggregator_experiments_20250614_150755.csv
Log saved to: ../logs/aggregator_experiments_20250614_150755.txt

Results preview:
--------------------------------------------------------------------------------
controlled_stations             type    profit    rc_11    rc_14    rc_15    rc_26    rc_37
                 11        base_case  0.000000 0.600000 0.600000 0.500000 0.600000 0.500000
                 11       max_prices  0.000000 0.800000 0.600000 0.500000 0.600000 0.500000
                 11 sol_tr_predicted  7.353036 0.360117 0.600000 0.500000 0.600000 0.500000
                 11      sol_tr_real 12.193802 0.360117 0.600000 0.500000 0.600000 0.500000
                 11    sol_predicted  7.353036 0.360117 0.600000 0.500000 0.600000 0.500000
                 11         sol_real 12.863811 0.360117 0.600000 0.500000 0.600000 0.500000
                 14        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
                 14       max_prices  0.000000 0.600000 0.800000 0.500000 0.600000 0.500000
                 14 sol_tr_predicted 16.326376 0.600000 0.374836 0.500000 0.600000 0.500000
                 14      sol_tr_real 18.494570 0.600000 0.374836 0.500000 0.600000 0.500000
                 14    sol_predicted 16.326376 0.600000 0.374836 0.500000 0.600000 0.500000
                 14         sol_real 18.494570 0.600000 0.374836 0.500000 0.600000 0.500000
                 15        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
                 15       max_prices  0.000000 0.600000 0.600000 0.800000 0.600000 0.500000
                 15 sol_tr_predicted  9.918395 0.600000 0.600000 0.396412 0.600000 0.500000
                 15      sol_tr_real  5.453181 0.600000 0.600000 0.396412 0.600000 0.500000
                 15    sol_predicted  9.918395 0.600000 0.600000 0.396412 0.600000 0.500000
                 15         sol_real 10.780478 0.600000 0.600000 0.396412 0.600000 0.500000
                 26        base_case  0.000000 0.600000 0.600000 0.500000 0.600000 0.500000
                 26       max_prices  0.000000 0.600000 0.600000 0.500000 0.800000 0.500000
                 26 sol_tr_predicted 17.901623 0.600000 0.600000 0.500000 0.411140 0.500000
                 26      sol_tr_real 20.398184 0.600000 0.600000 0.500000 0.411140 0.500000
                 26    sol_predicted 17.901623 0.600000 0.600000 0.500000 0.411140 0.500000
                 26         sol_real 22.184210 0.600000 0.600000 0.500000 0.411140 0.500000
                 37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
                 37       max_prices  0.000000 0.600000 0.600000 0.500000 0.600000 0.800000
                 37 sol_tr_predicted 13.216659 0.600000 0.600000 0.500000 0.600000 0.460142
                 37      sol_tr_real 12.813954 0.600000 0.600000 0.500000 0.600000 0.460142
                 37    sol_predicted 13.216659 0.600000 0.600000 0.500000 0.600000 0.460142
                 37         sol_real 19.203459 0.600000 0.600000 0.500000 0.600000 0.460142
              11|14        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
              11|14       max_prices  4.292077 0.800000 0.800000 0.500000 0.600000 0.500000
              11|14 sol_tr_predicted 18.613345 0.794435 0.382028 0.500000 0.600000 0.500000
              11|14      sol_tr_real 18.869815 0.794435 0.382028 0.500000 0.600000 0.500000
              11|14    sol_predicted 18.658479 0.800000 0.381831 0.500000 0.600000 0.500000
              11|14         sol_real 18.859539 0.800000 0.381831 0.500000 0.600000 0.500000
              11|15        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
              11|15       max_prices  2.106603 0.800000 0.600000 0.800000 0.600000 0.500000
              11|15 sol_tr_predicted 13.949705 0.374598 0.600000 0.265794 0.600000 0.500000
              11|15      sol_tr_real 15.104378 0.374598 0.600000 0.265794 0.600000 0.500000
              11|15    sol_predicted 13.949705 0.374598 0.600000 0.265794 0.600000 0.500000
              11|15         sol_real 15.104378 0.374598 0.600000 0.265794 0.600000 0.500000
              11|26        base_case  0.000000 0.600000 0.600000 0.500000 0.600000 0.500000
              11|26       max_prices  0.000000 0.800000 0.600000 0.500000 0.800000 0.500000
              11|26 sol_tr_predicted 20.405254 0.347272 0.600000 0.500000 0.411137 0.500000
              11|26      sol_tr_real 23.415294 0.347272 0.600000 0.500000 0.411137 0.500000
              11|26    sol_predicted 20.405254 0.347272 0.600000 0.500000 0.411137 0.500000
              11|26         sol_real 23.415294 0.347272 0.600000 0.500000 0.411137 0.500000
              11|37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
              11|37       max_prices  0.000000 0.800000 0.600000 0.500000 0.600000 0.800000
              11|37 sol_tr_predicted 18.685733 0.346954 0.600000 0.500000 0.600000 0.466514
              11|37      sol_tr_real 23.425292 0.346954 0.600000 0.500000 0.600000 0.466514
              11|37    sol_predicted 18.685733 0.346954 0.600000 0.500000 0.600000 0.466514
              11|37         sol_real 23.425292 0.346954 0.600000 0.500000 0.600000 0.466514
              14|15        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
              14|15       max_prices 12.308396 0.600000 0.800000 0.800000 0.600000 0.500000
              14|15 sol_tr_predicted 20.111583 0.600000 0.408064 0.347936 0.600000 0.500000
              14|15      sol_tr_real 17.687397 0.600000 0.408064 0.347936 0.600000 0.500000
              14|15    sol_predicted 20.111583 0.600000 0.408064 0.347936 0.600000 0.500000
              14|15         sol_real 17.687397 0.600000 0.408064 0.347936 0.600000 0.500000
              14|26        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
              14|26       max_prices  8.787134 0.600000 0.800000 0.500000 0.800000 0.500000
              14|26 sol_tr_predicted 24.819021 0.600000 0.798031 0.500000 0.421250 0.500000
              14|26      sol_tr_real 24.062435 0.600000 0.798031 0.500000 0.421250 0.500000
              14|26    sol_predicted 24.819021 0.600000 0.798031 0.500000 0.421250 0.500000
              14|26         sol_real 24.062435 0.600000 0.798031 0.500000 0.421250 0.500000
              14|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
              14|37       max_prices  7.413111 0.600000 0.800000 0.500000 0.600000 0.800000
              14|37 sol_tr_predicted 22.725196 0.600000 0.494745 0.500000 0.600000 0.611818
              14|37      sol_tr_real 25.049126 0.600000 0.494745 0.500000 0.600000 0.611818
              14|37    sol_predicted 22.725196 0.600000 0.494745 0.500000 0.600000 0.611818
              14|37         sol_real 21.710254 0.600000 0.494745 0.500000 0.600000 0.611818
              15|26        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
              15|26       max_prices  4.774744 0.600000 0.600000 0.800000 0.800000 0.500000
              15|26 sol_tr_predicted 25.866770 0.600000 0.600000 0.633539 0.405323 0.500000
              15|26      sol_tr_real 22.630403 0.600000 0.600000 0.633539 0.405323 0.500000
              15|26    sol_predicted 25.866770 0.600000 0.600000 0.633539 0.405323 0.500000
              15|26         sol_real 22.630403 0.600000 0.600000 0.633539 0.405323 0.500000
              15|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
              15|37       max_prices  3.428471 0.600000 0.600000 0.800000 0.600000 0.800000
              15|37 sol_tr_predicted 22.286947 0.600000 0.600000 0.495059 0.600000 0.460498
              15|37      sol_tr_real 22.133280 0.600000 0.600000 0.495059 0.600000 0.460498
              15|37    sol_predicted 22.286947 0.600000 0.600000 0.495059 0.600000 0.460498
              15|37         sol_real 22.449943 0.600000 0.600000 0.495059 0.600000 0.460498
              26|37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
              26|37       max_prices  8.230978 0.600000 0.600000 0.500000 0.800000 0.800000
              26|37 sol_tr_predicted 21.455494 0.600000 0.600000 0.500000 0.386945 0.352119
              26|37      sol_tr_real 19.290055 0.600000 0.600000 0.500000 0.386945 0.352119
              26|37    sol_predicted 21.455494 0.600000 0.600000 0.500000 0.386945 0.352119
              26|37         sol_real 19.290055 0.600000 0.600000 0.500000 0.386945 0.352119
           11|14|15        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
           11|14|15       max_prices 10.983842 0.800000 0.800000 0.800000 0.600000 0.500000
           11|14|15 sol_tr_predicted 23.259650 0.794207 0.415663 0.462396 0.600000 0.500000
           11|14|15      sol_tr_real 20.467643 0.794207 0.415663 0.462396 0.600000 0.500000
           11|14|15    sol_predicted 23.341945 0.800000 0.416076 0.465857 0.600000 0.500000
           11|14|15         sol_real 22.310675 0.800000 0.416076 0.465857 0.600000 0.500000
           11|14|26        base_case  6.530192 0.600000 0.600000 0.500000 0.600000 0.500000
           11|14|26       max_prices  7.533652 0.800000 0.800000 0.500000 0.800000 0.500000
           11|14|26 sol_tr_predicted 26.931787 0.615140 0.798693 0.500000 0.421147 0.500000
           11|14|26      sol_tr_real 24.059760 0.615140 0.798693 0.500000 0.421147 0.500000
           11|14|26    sol_predicted 26.935114 0.615892 0.800000 0.500000 0.421207 0.500000
           11|14|26         sol_real 24.068084 0.615892 0.800000 0.500000 0.421207 0.500000
           11|14|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
           11|14|37       max_prices  7.413111 0.800000 0.800000 0.500000 0.600000 0.800000
           11|14|37 sol_tr_predicted 27.027751 0.793875 0.481181 0.500000 0.600000 0.604738
           11|14|37      sol_tr_real 21.300200 0.793875 0.481181 0.500000 0.600000 0.604738
           11|14|37    sol_predicted 27.142599 0.800000 0.480753 0.500000 0.600000 0.604514
           11|14|37         sol_real 21.388624 0.800000 0.480753 0.500000 0.600000 0.604514
           11|15|26        base_case 13.727749 0.600000 0.600000 0.500000 0.600000 0.500000
           11|15|26       max_prices  6.881347 0.800000 0.600000 0.800000 0.800000 0.500000
           11|15|26 sol_tr_predicted 27.224686 0.455887 0.600000 0.755999 0.401045 0.500000
           11|15|26      sol_tr_real 20.843629 0.455887 0.600000 0.755999 0.401045 0.500000
           11|15|26    sol_predicted 27.224686 0.455887 0.600000 0.755999 0.401045 0.500000
           11|15|26         sol_real 22.908173 0.455887 0.600000 0.755999 0.401045 0.500000
           11|15|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
           11|15|37       max_prices  3.179433 0.800000 0.600000 0.800000 0.600000 0.800000
           11|15|37 sol_tr_predicted 25.489888 0.446845 0.600000 0.672238 0.600000 0.451584
           11|15|37      sol_tr_real 22.824451 0.446845 0.600000 0.672238 0.600000 0.451584
           11|15|37    sol_predicted 25.489888 0.446845 0.600000 0.672238 0.600000 0.451584
           11|15|37         sol_real 30.099110 0.446845 0.600000 0.672238 0.600000 0.451584
           11|26|37        base_case  9.948503 0.600000 0.600000 0.500000 0.600000 0.500000
           11|26|37       max_prices  8.230978 0.800000 0.600000 0.500000 0.800000 0.800000
           11|26|37 sol_tr_predicted 23.456930 0.385128 0.600000 0.500000 0.372813 0.345749
           11|26|37      sol_tr_real 21.203155 0.385128 0.600000 0.500000 0.372813 0.345749
           11|26|37    sol_predicted 23.456930 0.385128 0.600000 0.500000 0.372813 0.345749
           11|26|37         sol_real 21.203155 0.385128 0.600000 0.500000 0.372813 0.345749
           14|15|26        base_case 20.257940 0.600000 0.600000 0.500000 0.600000 0.500000
           14|15|26       max_prices 12.308396 0.600000 0.800000 0.800000 0.800000 0.500000
           14|15|26 sol_tr_predicted 32.920547 0.600000 0.796942 0.651720 0.414585 0.500000
           14|15|26      sol_tr_real 27.673701 0.600000 0.796942 0.651720 0.414585 0.500000
           14|15|26    sol_predicted 32.923160 0.600000 0.797456 0.651768 0.414609 0.500000
           14|15|26         sol_real 24.549101 0.600000 0.797456 0.651768 0.414609 0.500000
           14|15|37        base_case 30.206443 0.600000 0.600000 0.500000 0.600000 0.500000
           14|15|37       max_prices  9.339061 0.600000 0.800000 0.800000 0.600000 0.800000
           14|15|37 sol_tr_predicted 32.653951 0.600000 0.460348 0.797109 0.600000 0.615015
           14|15|37      sol_tr_real 25.576514 0.600000 0.460348 0.797109 0.600000 0.615015
           14|15|37    sol_predicted 32.664962 0.600000 0.460014 0.800000 0.600000 0.615046
           14|15|37         sol_real 30.755670 0.600000 0.460014 0.800000 0.600000 0.615046
           14|26|37        base_case 16.478694 0.600000 0.600000 0.500000 0.600000 0.500000
           14|26|37       max_prices 24.872480 0.600000 0.800000 0.500000 0.800000 0.800000
           14|26|37 sol_tr_predicted 34.039362 0.600000 0.657342 0.500000 0.641419 0.799717
           14|26|37      sol_tr_real 11.124210 0.600000 0.657342 0.500000 0.641419 0.799717
           14|26|37    sol_predicted 34.058609 0.600000 0.657528 0.500000 0.641643 0.800000
           14|26|37         sol_real 30.869255 0.600000 0.657528 0.500000 0.641643 0.800000
           15|26|37        base_case 23.676251 0.600000 0.600000 0.500000 0.600000 0.500000
           15|26|37       max_prices  5.705788 0.600000 0.600000 0.800000 0.800000 0.800000
           15|26|37 sol_tr_predicted 27.879173 0.600000 0.600000 0.682833 0.426784 0.397062
           15|26|37      sol_tr_real 21.914476 0.600000 0.600000 0.682833 0.426784 0.397062
           15|26|37    sol_predicted 27.879173 0.600000 0.600000 0.682833 0.426784 0.397062
           15|26|37         sol_real 20.336720 0.600000 0.600000 0.682833 0.426784 0.397062
--------------------------------------------------------------------------------

================================================================================
EXPERIMENTS COMPLETED
================================================================================
